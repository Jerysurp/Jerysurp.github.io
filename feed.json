{
    "version": "https://jsonfeed.org/version/1",
    "title": "熵白之痕",
    "subtitle": "以前进为目标吧",
    "icon": "https://entropywhite.com/images/favicon.ico",
    "description": "欢迎来到熵白的博客",
    "home_page_url": "https://entropywhite.com",
    "items": [
        {
            "id": "https://entropywhite.com/computer-science/web/JavaScript/JS%E9%9D%A2%E8%AF%95/JS%E7%B3%BB%E5%88%97/",
            "url": "https://entropywhite.com/computer-science/web/JavaScript/JS%E9%9D%A2%E8%AF%95/JS%E7%B3%BB%E5%88%97/",
            "title": "",
            "date_published": "2022-08-15T03:55:11.793Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://entropywhite.com/computer-science/web/%E7%BC%96%E8%BE%91%E5%99%A8/%E5%9B%9B%E4%B8%AA%E7%BC%96%E8%BE%91%E5%99%A8/",
            "url": "https://entropywhite.com/computer-science/web/%E7%BC%96%E8%BE%91%E5%99%A8/%E5%9B%9B%E4%B8%AA%E7%BC%96%E8%BE%91%E5%99%A8/",
            "title": "四个编辑器",
            "date_published": "2022-08-15T03:54:00.000Z",
            "content_html": "<h1 id=\"vscode\"><a class=\"anchor\" href=\"#vscode\">#</a> VSCODE</h1>\n<h2 id=\"emmet语法\"><a class=\"anchor\" href=\"#emmet语法\">#</a> Emmet 语法</h2>\n<p>快速生成 HTML 解构语法</p>\n<p>1. 生成标签，直接输入标签名，按 tab 即可</p>\n<p>2. 如果要生成多个相同的标签，输入标签名后加入 <code>*</code> n，如 div*3，会生成三个 div</p>\n<p>3. 如果有父子级关系标签，可以用 <code>&gt;</code> ，如  <code>ul &gt; li</code> ，会生成一个列表</p>\n<p>4. 如果有兄弟关系的标签，可以用 <code>+</code> ，如 <code>div+p</code> ，会生成一个被 <code>div</code>  包裹的 <code>p</code>  标签</p>\n<p>5. 如果生成类名或者 <code>id</code>  名的，直接写 <code>.类名</code> 和 <code>#id名</code></p>\n<p>6. 如果生成的 div 类名是有顺序的，可以用自增符号 <code>$</code> ，如 <code>.nav*5</code> ，会生成 <code>div class=.nav1-5</code>  的标签</p>\n<p>7. 如果想在生成标签内部写内容可以用（）表示</p>\n<p>快速生成 CSS 样式语法</p>\n<p>1.CSS 基本采取简写形式，如 w200，tab 生成 <code>width:200px</code> 、lh26，tab 生成 <code>line-height:26px</code></p>\n",
            "tags": [
                "计算机科学",
                "web",
                "编辑器",
                "前端 编辑器"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%AE%E5%BC%82%E5%85%BC%E5%AE%B9%E6%80%A7/",
            "url": "https://entropywhite.com/computer-science/web/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%AE%E5%BC%82%E5%85%BC%E5%AE%B9%E6%80%A7/",
            "title": "浏览器差异",
            "date_published": "2022-08-15T03:53:00.000Z",
            "content_html": "<h1 id=\"各大浏览器内核\"><a class=\"anchor\" href=\"#各大浏览器内核\">#</a> 各大浏览器内核</h1>\n<table>\n<thead>\n<tr>\n<th>浏览器</th>\n<th>内核</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IE</td>\n<td>Trident</td>\n<td>IE、猎豹安全、360 极速浏览器、百度浏览器</td>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>Gecko</td>\n<td>没落了，打开慢和升级频繁</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>Webkit</td>\n<td>这玩意其实不是 chrome 内核</td>\n</tr>\n<tr>\n<td>Edge、Chrome</td>\n<td>Chromium/Blink</td>\n<td>在 Chromiun 项目中研发的 Blink 渲染引擎（浏览器核心）内置于 Chrome 浏览器中。Blink 是 Webkit 的分支，大部分国产浏览器最新版都采用 Blink 内核。二次开发</td>\n</tr>\n<tr>\n<td>Opera</td>\n<td>Blink</td>\n<td>以前是 presto 内核，现跟随 Chrome 用同一个内核</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "计算机科学",
                "web",
                "浏览器",
                "前端 浏览器"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E5%8F%8A%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/",
            "url": "https://entropywhite.com/computer-science/web/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E5%8F%8A%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/",
            "title": "浏览器如何工作",
            "date_published": "2022-08-15T03:52:00.000Z",
            "content_html": "<h1 id=\"浏览器是如何工作的\"><a class=\"anchor\" href=\"#浏览器是如何工作的\">#</a> 浏览器是如何工作的</h1>\n<p>简化的浏览器结构图</p>\n<h2 id=\"用户界面\"><a class=\"anchor\" href=\"#用户界面\">#</a> 用户界面</h2>\n<p>用户界面用于展示除标签页窗口之外的其他用户界面内容</p>\n<h2 id=\"浏览器引擎\"><a class=\"anchor\" href=\"#浏览器引擎\">#</a> 浏览器引擎</h2>\n<p>浏览器引擎用于在用户界面和渲染引擎之间传递数据</p>\n<h2 id=\"渲染引擎\"><a class=\"anchor\" href=\"#渲染引擎\">#</a> 渲染引擎</h2>\n<p>渲染引擎负责渲染用户请求的页面内容，可以说是一个浏览器的核心</p>\n<p>渲染器下面还有很多小的功能模块，如负责网络请求的网络模块，用于解析和执行 js 的 js 解释器，还有数据存储持久层，帮助浏览器存储各种数据如 cookie</p>\n<p>往往我们会把渲染引擎称为浏览器的内核，不同浏览器使用的内核也不太一样</p>\n<h2 id=\"进程和线程的联系和区别\"><a class=\"anchor\" href=\"#进程和线程的联系和区别\">#</a> 进程和线程的联系和区别</h2>\n<p>浏览器是运行在操作系统上的一个应用程序，每个应用程序必须至少启动一个进程来执行其功能，每个程序往往需要运行很多任务，进程就会创建一些线程来帮助它去执行这些任务</p>\n<p>当我们启动某个程序时，就会创建一个进程来执行任务代码，同时为该进程分配内存空间，该应用程序的状态都保存在该内存空间里，当应用关闭时，该内存空间会被回收，进程可以启动更多进程来执行任务，由于每个进程分配的内存空间时独立的，如果两个进程间需要传递某些数据，则需要通过进程间通信管道 IPC 来传递，很多应用程序都是多进程的结构，这样是为了避免某一进程卡死，由于进程间相互独立，这样不会影响到整个应用程序，进程可以将任务分成更多细小的任务，通过创建多个线程并行执行不同任务，同一进程下的线程之间可以直接通信共享数据的。</p>\n<p>早期的浏览器是一个单进程的结构，一个进程中大概有页面线程负责页面渲染和展示等，JS 线程执行 JS 代码，还有其他结构。单进程的结构引发了很多问题，一是不稳定，一个卡死可能会导致整个进程崩溃；二是不安全，浏览器之间可以共享数据的，那 JS 线程可以随意访问浏览器进程内的所有数据；三是不流畅，一个经常需要负责太多事情，导致运行效率低下</p>\n<p>而现在的浏览器采用了多进程结构，根据进程功能不同来拆解浏览器</p>\n<p>浏览器进程负责控制浏览器除标签页外的用户界面，包括地址栏、书签、后退和前进按钮，以及负责与浏览器的其他进程协调工作</p>\n<p>网络进程负责发起接受网络请求</p>\n<p>GPU 进程负责整个浏览器界面的渲染</p>\n<p>插件进程负责控制网站使用的所有插件 (不是浏览器安装的扩展)</p>\n<p>渲染器进程用来控制显示 tab 标签内的所有内容，浏览器默认会为每个标签页都创建一个进程，在启动浏览器时选择的进程模型有关。</p>\n<p>举例子，如 chrome 浏览器有四种进程模型</p>\n<p>第一种是默认的，访问不同站点和同一站点的不同页面都会创建新的进程，该模型会创建更多的进程，占用更多的内存空间，但却是最安全的，每个 tab 以及 tab 内的每个站点都是相互隔离互不影响的，当一个浏览器进程卡死，并不会影响其他进程</p>\n<p>第二种是模型表示同意站点使用同一进程</p>\n<p>第三种是 tab 里的所有站点使用一个进程</p>\n<p>第四种是让浏览器引擎和渲染引擎共用一个进程</p>\n",
            "tags": [
                "计算机科学",
                "web",
                "浏览器",
                "前端 浏览器"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%89%87%E8%A7%84%E8%8C%83/%E5%9B%BE%E7%89%87%E8%A7%84%E8%8C%83/",
            "url": "https://entropywhite.com/computer-science/web/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%89%87%E8%A7%84%E8%8C%83/%E5%9B%BE%E7%89%87%E8%A7%84%E8%8C%83/",
            "title": "前端图片规范",
            "date_published": "2022-08-15T03:51:00.000Z",
            "content_html": "<h1 id=\"前端图片规范\"><a class=\"anchor\" href=\"#前端图片规范\">#</a> 前端图片规范</h1>\n<h2 id=\"图片格式\"><a class=\"anchor\" href=\"#图片格式\">#</a> 图片格式</h2>\n<p>常见的图片格式有 GIF、PNG8、PNG24、JPEG、WEBP、SVG，根据图片格式的特性和场景需要选取适合的图片格式。</p>\n<h3 id=\"gif\"><a class=\"anchor\" href=\"#gif\">#</a> GIF</h3>\n<blockquote>\n<p>GIF 图象是基于颜色列表的（存储的数据是该点的颜色对应于颜色列表的索引值），最多只支持 8 位（ 256 色）。GIF 文件内部分成许多存储块，用来存储多幅图象或者是决定图象表现行为的控制块，用以实现动画和交互式应用。GIF 文件还通过 LZW 压缩算法压缩图象数据来减少图象尺寸</p>\n</blockquote>\n<h4 id=\"特性\"><a class=\"anchor\" href=\"#特性\">#</a> 特性</h4>\n<ul>\n<li>优秀的压缩算法使其在一定程度上保证图像质量的同时将体积变得很小。</li>\n<li>可插入多帧，从而实现动画效果。</li>\n<li>可设置透明色以产生对象浮现于背景之上的效果。</li>\n<li>由于采用了 8 位压缩，最多只能处理 256 种颜色，故不宜应用于真彩色图片。</li>\n</ul>\n<h3 id=\"png\"><a class=\"anchor\" href=\"#png\">#</a> PNG</h3>\n<blockquote>\n<p>PNG 是 20 世纪 90 年代中期开始开发的图像文件存储格式，其目的是企图替代 GIF 和 TIFF 文件格式，同时增加一些 GIF 文件格式所不具备的特性。流式网络图形格式 (Portable Network Graphic Format，PNG) 名称来源于非官方的 “PNG’s Not GIF”，是一种位图文件 (bitmap file) 存储格式，读成 “ping”。PNG 用来存储灰度图像时，灰度图像的深度可多到 16 位，存储彩色图像时，彩色图像的深度可多到 48 位，并且还可存储多到 16 位的 α 通道数据。PNG 使用从 LZ77 派生的无损数据压缩算法。</p>\n</blockquote>\n<h4 id=\"特性-2\"><a class=\"anchor\" href=\"#特性-2\">#</a> 特性</h4>\n<ul>\n<li>支持 256 色调色板技术，文件体积小。</li>\n<li>无损压缩</li>\n<li>最高支持 48 位真彩色图像以及 16 位灰度图像。</li>\n<li>支持 Alpha 通道的透明 / 半透明特性。</li>\n<li>支持图像亮度的 Gamma 校准信息。</li>\n<li>支持存储附加文本信息，以保留图像名称、作者、版权、创作时间、注释等信息。</li>\n<li>渐近显示和流式读写，适合在网络传输中快速显示预览效果后再展示全貌。</li>\n<li>使用 CRC 防止文件出错。</li>\n<li>最新的 PNG 标准允许在一个文件内存储多幅图像。</li>\n</ul>\n<h3 id=\"jpeg\"><a class=\"anchor\" href=\"#jpeg\">#</a> JPEG</h3>\n<blockquote>\n<p>JPEG 是一种针对照片视频而广泛使用的一种有损压缩标准方法。这个名称代表 Joint Photographic Experts Group（联合图像专家小组）。此团队创立于公元 1986 年，1992 年发布了 JPEG 的标准而在 1994 年获得了 ISO 10918-1 的认定</p>\n</blockquote>\n<h4 id=\"特性-3\"><a class=\"anchor\" href=\"#特性-3\">#</a> 特性</h4>\n<ul>\n<li>适用于储存 24 位元全采影像</li>\n<li>采取的压缩方式通常为有损压缩</li>\n<li>不支持透明或动画</li>\n<li>压缩比越高影像耗损越大，失真越严重</li>\n<li>压缩比在 10 左右肉眼无法辨出压缩图与原图的差别</li>\n</ul>\n<h3 id=\"webp\"><a class=\"anchor\" href=\"#webp\">#</a> WEBP</h3>\n<blockquote>\n<p>WebP，是一种同时提供了有损压缩与无损压缩的图片文件格式，派生自视频编码格式 VP8，是由 Google 在购买 On2 Technologies 后发展出来。WebP 最初在 2010 年发布，2011 年 11 月 8 日，Google 开始让 WebP 支持无损压缩和透明色的功能，而在 2012 年 8 月 16 日的参考实做 libwebp 0.2.0 中正式支持</p>\n</blockquote>\n<h4 id=\"特性-4\"><a class=\"anchor\" href=\"#特性-4\">#</a> 特性</h4>\n<ul>\n<li>同时提供有损压缩和无损压缩两种图片文件格式</li>\n<li>文件体积小，无损压缩后，比 PNG 文件少了 45％ 的文件大小；有损压缩后，比 JPEG 文件少了 25% - 34% 文件大小</li>\n<li>浏览器兼容差，目前只支持客户端 Chrome 和 Opera 浏览器以及安卓原生浏览器 (Andriod 4.0+)</li>\n</ul>\n<h2 id=\"团队约定\"><a class=\"anchor\" href=\"#团队约定\">#</a> 团队约定</h2>\n<h3 id=\"内容图\"><a class=\"anchor\" href=\"#内容图\">#</a> 内容图</h3>\n<p>内容图多以商品图等照片类图片形式存在，颜色较为丰富，文件体积较大</p>\n<ul>\n<li>优先考虑 JPEG 格式，条件允许的话优先考虑 WebP 格式</li>\n<li>尽量不使用 PNG 格式，PNG8 色位太低，PNG24 压缩率低，文件体积大</li>\n</ul>\n<h3 id=\"背景图\"><a class=\"anchor\" href=\"#背景图\">#</a> 背景图</h3>\n<p>背景图多为图标等颜色比较简单、文件体积不大、起修饰作用的图片</p>\n<ul>\n<li>PNG 与 GIF 格式，优先考虑使用 PNG 格式，PNG 格式允许更多的颜色并提供更好的压缩率</li>\n<li>图像颜色比较简单的，如纯色块线条图标，优先考虑使用 PNG8 格式，避免不使用 JPEG 格式</li>\n<li>图像颜色丰富而且图片文件不太大的（40KB 以下）或有半透明效果的优先考虑 PNG24 格式</li>\n<li>图像颜色丰富而且文件比较大的（40KB - 200KB）优先考虑 JPEG 格式</li>\n<li>条件允许的，优先考虑 WebP 代替 PNG 和 JPEG 格式</li>\n</ul>\n<h2 id=\"图片大小\"><a class=\"anchor\" href=\"#图片大小\">#</a> 图片大小</h2>\n<h3 id=\"团队约定-2\"><a class=\"anchor\" href=\"#团队约定-2\">#</a> 团队约定</h3>\n<p>中国普通家庭的宽带基本能达到 8Mbps，实际速率大约为 500—900KB/s，全国 3G/4G 用户占有比超过了 50%，为了保证图片能更好地加载展示给用户看，团队约定：</p>\n<p>PC 平台单张的图片的大小不应大于 200KB。</p>\n<p>移动平台单张的图片的大小不应大于 100KB。</p>\n<p>（图片的大小约定标准随全国网速的改变而改变）</p>\n<h2 id=\"图片引入\"><a class=\"anchor\" href=\"#图片引入\">#</a> 图片引入</h2>\n<p>测试内容图应该写上表明图片尺寸的占位图，可以用线上占位图生成服务，如：</p>\n<pre><code>http://placeholder.qiniudn.com/300x200\n</code></pre>\n<p>HTML 中图片引入不需添加 width、height 属性，alt 属性应该写上</p>\n<p>推荐：</p>\n<pre><code>&lt;img src=&quot;&quot; alt=&quot;&quot; &gt;\n</code></pre>\n<p>不推荐：</p>\n<pre><code>&lt;img src=&quot;&quot; width=&quot;&quot; height=&quot;&quot; &gt;\n</code></pre>\n<p>CSS 中图片引入不需要引号</p>\n<pre><code>.jdc &#123;\n    background-image: url(icon.png);\n&#125;\n</code></pre>\n<h3 id=\"css-sprites-vs-data-uris\"><a class=\"anchor\" href=\"#css-sprites-vs-data-uris\">#</a> CSS Sprites VS Data URIs</h3>\n<h4 id=\"css-sprites特点\"><a class=\"anchor\" href=\"#css-sprites特点\">#</a> CSS Sprites 特点</h4>\n<ul>\n<li>减少请求数</li>\n<li>加速图片的显示</li>\n<li>维护更新成本大</li>\n<li>更多的内存消耗，特别是大体积或有过多空白的 Sprites 图</li>\n<li>图片渗漏，相邻的不需展示的图片有可能出现在展示元素中，特别是在高清设备移动设备上</li>\n</ul>\n<h4 id=\"data-urisbase64编码\"><a class=\"anchor\" href=\"#data-urisbase64编码\">#</a> Data URIs（base64 编码）</h4>\n<ul>\n<li>减少请求数</li>\n<li>转换文件体积大，大约比原始的二进制大 33%</li>\n<li>IE6 / IE7 不支持</li>\n<li>图片显示相对较慢，需要更多的 CPU 消耗</li>\n</ul>\n<h2 id=\"团队约定-3\"><a class=\"anchor\" href=\"#团队约定-3\">#</a> 团队约定</h2>\n<h3 id=\"css-sprites-使用建议\"><a class=\"anchor\" href=\"#css-sprites-使用建议\">#</a> CSS Sprites 使用建议</h3>\n<ul>\n<li>适合使用频率高更新频率低的小图标</li>\n<li>尽量不留太多的空白</li>\n<li>体积较大的图片不合并</li>\n<li>确保要合并的小图坐标数值和合并后的 Sprites 图尺寸均为偶数</li>\n</ul>\n<h3 id=\"data-urisbase64编码使用建议\"><a class=\"anchor\" href=\"#data-urisbase64编码使用建议\">#</a> Data URIs（base64 编码）使用建议</h3>\n<ul>\n<li>适合更新频率高的小图片，如某些具备自定义功能的标题 icon 等</li>\n<li>转换成 Base64 编码的图片应小于 2KB</li>\n<li>移动端不使用 Base64 编码</li>\n<li>要兼容 IE6/IE7 的不使用</li>\n</ul>\n<h2 id=\"图片质量\"><a class=\"anchor\" href=\"#图片质量\">#</a> 图片质量</h2>\n<ul>\n<li>上线的图片都应该经过压缩处理，压缩后的图片不应该出现肉眼可感知的失真区域</li>\n<li>60 质量的 JPEG 格式图片与质量大于 60 的相比，肉眼已看不出明显的区别，因此保存 JPEG 图的时候，质量一般控制在 60，若保真度要求高的图片可适量提高到 80，图片大小控制在 200KB 以内</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "web",
                "前端规范",
                "前端"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/",
            "url": "https://entropywhite.com/computer-science/web/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/",
            "title": "代码规范",
            "date_published": "2022-08-15T03:48:00.000Z",
            "content_html": "<p>一、京东凹凸实验室前端代码规范</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ndWlkZS5hb3R1LmlvLw==\">https://guide.aotu.io/</span></p>\n<p>二、腾讯前端代码规范</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3RnaWRlYXMucXEuY29tL2RvYy9pbmRleC5odG1s\">http://tgideas.qq.com/doc/index.html</span></p>\n<p>三、百度前端代码规范文档</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Vjb21mZS9zcGVjL2Jsb2IvbWFzdGVyL2phdmFzY3JpcHQtc3R5bGUtZ3VpZGUubWQ=\">https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md</span></p>\n<p>四、JavaScript Standard Style</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N0YW5kYXJkL3N0YW5kYXJk\">https://github.com/standard/standard</span></p>\n<p>五、Vue 官方特有的代码风格指南</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvc3R5bGUtZ3VpZGUvaW5kZXguaHRtbA==\">https://cn.vuejs.org/v2/style-guide/index.html</span></p>\n<p>六、玩一峰的 ES6 编程风格</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lczYucnVhbnlpZmVuZy5jb20vI2RvY3Mvc3R5bGU=\">https://es6.ruanyifeng.com/#docs/style</span></p>\n<p>七、代码整洁之道（这是一本书）</p>\n<p>八、ESLint 代码规范检测工具</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lc2xpbnQuYm9vdGNzcy5jb20v\">https://eslint.bootcss.com/</span></p>\n<p>九、Prettier 代码格式化工具（VScode 有）</p>\n",
            "tags": [
                "计算机科学",
                "web",
                "代码规范",
                "前端"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/%E5%89%8D%E7%AB%AF%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/HTMLCSS%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/",
            "url": "https://entropywhite.com/computer-science/web/%E5%89%8D%E7%AB%AF%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/HTMLCSS%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/",
            "title": "文件命名规范",
            "date_published": "2022-08-15T03:48:00.000Z",
            "content_html": "<h1 id=\"文件命名规范\"><a class=\"anchor\" href=\"#文件命名规范\">#</a> 文件命名规范</h1>\n<p>ClassName 的命名应该尽量精短、明确，必须以字母开头命名，且全部字母为小写，单词之间统一使用下划线 “ <code>_</code> ” 连接</p>\n<h2 id=\"命名原则\"><a class=\"anchor\" href=\"#命名原则\">#</a> 命名原则</h2>\n<p>基于姓氏命名法（继承 + 外来），祖先模块不能出现下划线，除了是全站公用模块，如  <code>mod_</code>  系列的命名：</p>\n<p>推荐：</p>\n<pre><code>&lt;div class=&quot;modulename&quot;&gt;\n\t&lt;div class=&quot;modulename_info&quot;&gt;\n\t\t&lt;div class=&quot;modulename_son&quot;&gt;&lt;/div&gt;\n\t\t&lt;div class=&quot;modulename_son&quot;&gt;&lt;/div&gt;\n\t\t...\n\t&lt;/div&gt;\n&lt;/div&gt;\n\t\n&lt;!-- 这个是全站公用模块，祖先模块允许直接出现下划线 --&gt;\n&lt;div class=&quot;mod_info&quot;&gt;\n\t&lt;div class=&quot;mod_info_son&quot;&gt;&lt;/div&gt;\n\t&lt;div class=&quot;mod_info_son&quot;&gt;&lt;/div&gt;\n\t...\t\t\n&lt;/div&gt;\n</code></pre>\n<p>不推荐：</p>\n<pre><code>&lt;div class=&quot;modulename_info&quot;&gt;\n\t&lt;div class=&quot;modulename_info_son&quot;&gt;&lt;/div&gt;\n\t&lt;div class=&quot;modulename_info_son&quot;&gt;&lt;/div&gt;\n\t...\t\t\n&lt;/div&gt;\n</code></pre>\n<p>在子孙模块数量可预测的情况下，严格继承祖先模块的命名前缀</p>\n<pre><code>&lt;div class=&quot;modulename&quot;&gt;\n\t&lt;div class=&quot;modulename_cover&quot;&gt;&lt;/div&gt;\n\t&lt;div class=&quot;modulename_info&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>当子孙模块超过 4 级或以上的时候，可以考虑在祖先模块内具有识辨性的独立缩写作为新的子孙模块</p>\n<p>推荐：</p>\n<pre><code>&lt;div class=&quot;modulename&quot;&gt;\n\t&lt;div class=&quot;modulename_cover&quot;&gt;&lt;/div&gt;\n\t&lt;div class=&quot;modulename_info&quot;&gt;\n    \t&lt;div class=&quot;modulename_info_user&quot;&gt;\n    \t\t&lt;div class=&quot;modulename_info_user_img&quot;&gt;\n    \t\t\t&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;\n    \t\t\t&lt;!-- 这个时候 miui 为 modulename_info_user_img 首字母缩写--&gt;\n    \t\t\t&lt;div class=&quot;miui_tit&quot;&gt;&lt;/div&gt;\n    \t\t\t&lt;div class=&quot;miui_txt&quot;&gt;&lt;/div&gt;\n    \t\t\t...\n    \t\t&lt;/div&gt;\n    \t&lt;/div&gt;\n    \t&lt;div class=&quot;modulename_info_list&quot;&gt;&lt;/div&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>不推荐：</p>\n<pre><code>&lt;div class=&quot;modulename&quot;&gt;\n\t&lt;div class=&quot;modulename_cover&quot;&gt;&lt;/div&gt;\n\t&lt;div class=&quot;modulename_info&quot;&gt;\n    \t&lt;div class=&quot;modulename_info_user&quot;&gt;\n    \t\t&lt;div class=&quot;modulename_info_user_img&quot;&gt;\n    \t\t\t&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;\n    \t\t\t&lt;div class=&quot;modulename_info_user_img_tit&quot;&gt;&lt;/div&gt;\n    \t\t\t&lt;div class=&quot;modulename_info_user_img_txt&quot;&gt;&lt;/div&gt;\n    \t\t\t...\n    \t\t&lt;/div&gt;\n    \t&lt;/div&gt;\n    \t&lt;div class=&quot;modulename_info_list&quot;&gt;&lt;/div&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<h2 id=\"模块命名\"><a class=\"anchor\" href=\"#模块命名\">#</a> 模块命名</h2>\n<p>全站公共模块：以  <code>mod_</code>  开头</p>\n<pre><code>&lt;div class=&quot;mod_yours&quot;&gt;&lt;/div&gt;\n</code></pre>\n<p>业务公共模块：以 业务名 <code>_mod_</code>  开头</p>\n<pre><code>&lt;div class=&quot;paipai_mod_yours&quot;&gt;&lt;/div&gt;\n</code></pre>\n<h2 id=\"常用命名推荐\"><a class=\"anchor\" href=\"#常用命名推荐\">#</a> 常用命名推荐</h2>\n<p>注意： <code>ad</code> 、 <code>banner</code> 、 <code>gg</code> 、 <code>guanggao</code>  等有机会和广告挂勾的字眠不建议直接用来做 ClassName，因为有些浏览器插件（Chrome 的广告拦截插件等）会直接过滤这些类名，因此</p>\n<pre><code>&lt;div class=&quot;ad&quot;&gt;&lt;/div&gt;\n</code></pre>\n<p>这种广告的英文或拼音类名不应该出现</p>\n<p>另外，敏感不和谐字眼也不应该出现，如：</p>\n<pre><code>&lt;div class=&quot;fuck&quot;&gt;&lt;/div&gt;\n&lt;div class=&quot;jer&quot;&gt;&lt;/div&gt;\n&lt;div class=&quot;sm&quot;&gt;&lt;/div&gt;\n&lt;div class=&quot;gcd&quot;&gt;&lt;/div&gt; \n&lt;div class=&quot;ass&quot;&gt;&lt;/div&gt; \n&lt;div class=&quot;KMT&quot;&gt;&lt;/div&gt; \n...\n</code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">ClassName</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">about</td>\n<td style=\"text-align:left\">关于</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">account</td>\n<td style=\"text-align:left\">账户</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">arrow</td>\n<td style=\"text-align:left\">箭头图标</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">article</td>\n<td style=\"text-align:left\">文章</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aside</td>\n<td style=\"text-align:left\">边栏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">audio</td>\n<td style=\"text-align:left\">音频</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">avatar</td>\n<td style=\"text-align:left\">头像</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bg,background</td>\n<td style=\"text-align:left\">背景</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bar</td>\n<td style=\"text-align:left\">栏（工具类）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">branding</td>\n<td style=\"text-align:left\">品牌化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">crumb,breadcrumbs</td>\n<td style=\"text-align:left\">面包屑</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">btn,button</td>\n<td style=\"text-align:left\">按钮</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">caption</td>\n<td style=\"text-align:left\">标题，说明</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">category</td>\n<td style=\"text-align:left\">分类</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">chart</td>\n<td style=\"text-align:left\">图表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clearfix</td>\n<td style=\"text-align:left\">清除浮动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">close</td>\n<td style=\"text-align:left\">关闭</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">col,column</td>\n<td style=\"text-align:left\">列</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">comment</td>\n<td style=\"text-align:left\">评论</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">community</td>\n<td style=\"text-align:left\">社区</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">container</td>\n<td style=\"text-align:left\">容器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">content</td>\n<td style=\"text-align:left\">内容</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">copyright</td>\n<td style=\"text-align:left\">版权</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">current</td>\n<td style=\"text-align:left\">当前态，选中态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">default</td>\n<td style=\"text-align:left\">默认</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">description</td>\n<td style=\"text-align:left\">描述</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">details</td>\n<td style=\"text-align:left\">细节</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">disabled</td>\n<td style=\"text-align:left\">不可用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">entry</td>\n<td style=\"text-align:left\">文章，博文</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">error</td>\n<td style=\"text-align:left\">错误</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">even</td>\n<td style=\"text-align:left\">偶数，常用于多行列表或表格中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fail</td>\n<td style=\"text-align:left\">失败（提示）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">feature</td>\n<td style=\"text-align:left\">专题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fewer</td>\n<td style=\"text-align:left\">收起</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">field</td>\n<td style=\"text-align:left\">用于表单的输入区域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">figure</td>\n<td style=\"text-align:left\">图</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">filter</td>\n<td style=\"text-align:left\">筛选</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">first</td>\n<td style=\"text-align:left\">第一个，常用于列表中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">footer</td>\n<td style=\"text-align:left\">页脚</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">forum</td>\n<td style=\"text-align:left\">论坛</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gallery</td>\n<td style=\"text-align:left\">画廊</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">group</td>\n<td style=\"text-align:left\">模块，清除浮动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">header</td>\n<td style=\"text-align:left\">页头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">help</td>\n<td style=\"text-align:left\">帮助</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hide</td>\n<td style=\"text-align:left\">隐藏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hightlight</td>\n<td style=\"text-align:left\">高亮</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">home</td>\n<td style=\"text-align:left\">主页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">icon</td>\n<td style=\"text-align:left\">图标</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">info,information</td>\n<td style=\"text-align:left\">信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">last</td>\n<td style=\"text-align:left\">最后一个，常用于列表中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">links</td>\n<td style=\"text-align:left\">链接</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">login</td>\n<td style=\"text-align:left\">登录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">logout</td>\n<td style=\"text-align:left\">退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">logo</td>\n<td style=\"text-align:left\">标志</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">main</td>\n<td style=\"text-align:left\">主体</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">menu</td>\n<td style=\"text-align:left\">菜单</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">meta</td>\n<td style=\"text-align:left\">作者、更新时间等信息栏，一般位于标题之下</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">module</td>\n<td style=\"text-align:left\">模块</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">more</td>\n<td style=\"text-align:left\">更多（展开）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">msg,message</td>\n<td style=\"text-align:left\">消息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">nav,navigation</td>\n<td style=\"text-align:left\">导航</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">next</td>\n<td style=\"text-align:left\">下一页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">nub</td>\n<td style=\"text-align:left\">小块</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">odd</td>\n<td style=\"text-align:left\">奇数，常用于多行列表或表格中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">off</td>\n<td style=\"text-align:left\">鼠标离开</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">on</td>\n<td style=\"text-align:left\">鼠标移过</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">output</td>\n<td style=\"text-align:left\">输出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pagination</td>\n<td style=\"text-align:left\">分页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pop,popup</td>\n<td style=\"text-align:left\">弹窗</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">preview</td>\n<td style=\"text-align:left\">预览</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">previous</td>\n<td style=\"text-align:left\">上一页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">primary</td>\n<td style=\"text-align:left\">主要</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">progress</td>\n<td style=\"text-align:left\">进度条</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">promotion</td>\n<td style=\"text-align:left\">促销</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rcommd,recommendations</td>\n<td style=\"text-align:left\">推荐</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">reg,register</td>\n<td style=\"text-align:left\">注册</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">save</td>\n<td style=\"text-align:left\">保存</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">search</td>\n<td style=\"text-align:left\">搜索</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">secondary</td>\n<td style=\"text-align:left\">次要</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">section</td>\n<td style=\"text-align:left\">区块</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">selected</td>\n<td style=\"text-align:left\">已选</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">share</td>\n<td style=\"text-align:left\">分享</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">show</td>\n<td style=\"text-align:left\">显示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sidebar</td>\n<td style=\"text-align:left\">边栏，侧栏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">slide</td>\n<td style=\"text-align:left\">幻灯片，图片切换</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sort</td>\n<td style=\"text-align:left\">排序</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sub</td>\n<td style=\"text-align:left\">次级的，子级的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">submit</td>\n<td style=\"text-align:left\">提交</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">subscribe</td>\n<td style=\"text-align:left\">订阅</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">subtitle</td>\n<td style=\"text-align:left\">副标题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">success</td>\n<td style=\"text-align:left\">成功（提示）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">summary</td>\n<td style=\"text-align:left\">摘要</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">tab</td>\n<td style=\"text-align:left\">标签页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">table</td>\n<td style=\"text-align:left\">表格</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">txt,text</td>\n<td style=\"text-align:left\">文本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">thumbnail</td>\n<td style=\"text-align:left\">缩略图</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">time</td>\n<td style=\"text-align:left\">时间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">tips</td>\n<td style=\"text-align:left\">提示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">title</td>\n<td style=\"text-align:left\">标题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">video</td>\n<td style=\"text-align:left\">视频</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">wrap</td>\n<td style=\"text-align:left\">容器，包，一般用于最外层</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">wrapper</td>\n<td style=\"text-align:left\">容器，包，一般用于最外层</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "计算机科学",
                "web",
                "前端命名规范",
                "前端"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/%E5%89%8D%E7%AB%AF%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/%E5%89%8D%E7%AB%AF%E7%9B%AE%E5%BD%95%E5%91%BD%E5%90%8D/",
            "url": "https://entropywhite.com/computer-science/web/%E5%89%8D%E7%AB%AF%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/%E5%89%8D%E7%AB%AF%E7%9B%AE%E5%BD%95%E5%91%BD%E5%90%8D/",
            "title": "前端命名规范",
            "date_published": "2022-08-15T03:48:00.000Z",
            "content_html": "<h1 id=\"前端命名规范\"><a class=\"anchor\" href=\"#前端命名规范\">#</a> 前端命名规范</h1>\n<h2 id=\"前段目录命名规范\"><a class=\"anchor\" href=\"#前段目录命名规范\">#</a> 前段目录命名规范</h2>\n<p>由历史原因及个人习惯引起的 DOM 结构、命名不统一，导致不同成员在维护同一页面时，效率低下，迭代、维护成本极高</p>\n<h3 id=\"目录命名\"><a class=\"anchor\" href=\"#目录命名\">#</a> 目录命名</h3>\n<ul>\n<li>项目文件夹：projectname</li>\n<li>样式文件夹：css</li>\n<li>脚本文件夹：js</li>\n<li>样式类图片文件夹：img</li>\n</ul>\n<h2 id=\"前段图片命名规范\"><a class=\"anchor\" href=\"#前段图片命名规范\">#</a> 前段图片命名规范</h2>\n<h3 id=\"命名顺序\"><a class=\"anchor\" href=\"#命名顺序\">#</a> 命名顺序</h3>\n<p>图片命名建议以以下顺序命名：</p>\n<p><strong>图片业务（可选） +（mod_）图片功能类别（必选）+ 图片模块名称（可选） + 图片精度（可选）</strong></p>\n<ul>\n<li>\n<p>图片业务：</p>\n<ul>\n<li>pp_：拍拍</li>\n<li>wx_：微信</li>\n<li>sq_：手 Q</li>\n<li>jd_：京东商城</li>\n<li>…</li>\n</ul>\n</li>\n<li>\n<p>图片功能类别：</p>\n<ul>\n<li>mod_：是否公共，可选</li>\n<li>icon：模块类固化的图标</li>\n<li>logo：LOGO 类</li>\n<li>spr：单页面各种元素合并集合</li>\n<li>btn：按钮</li>\n<li>bg：可平铺或者大背景</li>\n<li>…</li>\n</ul>\n</li>\n<li>\n<p>图片模块名称：</p>\n<ul>\n<li>goodslist：商品列表</li>\n<li>goodsinfo：商品信息</li>\n<li>userava tar：用户头像</li>\n<li>…</li>\n</ul>\n</li>\n<li>\n<p>图片精度：</p>\n<ul>\n<li>普清：@1x</li>\n<li>Retina：@2x | @3x</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<p>如下面例子：</p>\n<pre><code>公共模块：\nwx_mod_btn_goodlist@2x.png\nwx_mod_btn_goodlist.png\nmod_btn_goodlist.png \n\n非公共模块：\nwx_btn_goodlist@2x.png\nwx_btn_goodlist.png\nbtn_goodlist.png\n</code></pre>\n<h3 id=\"交叉业务协作\"><a class=\"anchor\" href=\"#交叉业务协作\">#</a> 交叉业务协作</h3>\n<p>业务交叉协作的时候，为了避免图片命名冲突，建议图片名加上业务和模块前辍，如拍拍侧和手 Q 侧的业务交叉合作时，侧栏导航 icon 雪碧图命名：</p>\n<pre><code>推荐：\npp_icon_mod_sidenav.png\n\n不推荐：\nicon_mod_sidenav.png\n</code></pre>\n<p>处理高清图片的时候，命名应该加上图片相应的精度说明</p>\n<pre><code>推荐：\njdc_logo@1x.png\njdc_logo@2x.png\n\n不推荐：\njdc_logo.png\njdc_logo_retina.png\n</code></pre>\n<h2 id=\"htmlcss-文件命名规范\"><a class=\"anchor\" href=\"#htmlcss-文件命名规范\">#</a> HTML/CSS 文件命名规范</h2>\n<p>确保文件命名总是以字母开头而不是数字，且字母一律小写，以下划线连接且不带其他标点符号，如：</p>\n<pre><code>&lt;!-- HTML --&gt;\njdc.html\njdc_list.html\njdc_detail.html\n\n&lt;!-- SASS --&gt;\njdc.scss\njdc_list.scss\njdc_detail.scss\n</code></pre>\n",
            "tags": [
                "计算机科学",
                "web",
                "前端命名规范",
                "前端"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/git/git%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/",
            "url": "https://entropywhite.com/computer-science/web/git/git%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/",
            "title": "git基本用法",
            "date_published": "2022-08-15T03:42:00.000Z",
            "content_html": "<h2 id=\"git工作流程\"><a class=\"anchor\" href=\"#git工作流程\">#</a> Git 工作流程</h2>\n<p>克隆 git 资源作为工作目录</p>\n<p>在克隆资源上添加或修改文件</p>\n<p>其他人修改了，你可以更新资源</p>\n<p>在提交前查看修改</p>\n<p>提交修改</p>\n<p>修改完成后，如果发现错误，可以撤回提交并再次修改并提交</p>\n<p><img data-src=\"%E5%9B%BE/git-process.png\" alt></p>\n<p>Git 工作区、暂存区和版本库</p>\n<p>工作区：电脑看到的目录</p>\n<p>暂存区：叫 stage 或 index。一般存放在.git 目录下 index 文件 (.git/index) 中，所以我们把暂存区有时也叫作索引 (index)</p>\n<p>版本库：工作区有一个隐藏目录，是 git 版本库</p>\n<p><img data-src=\"%E5%9B%BE/2.jpg\" alt></p>\n<p>图中左侧为工作区，右侧为版本库。在版本库中标记为 &quot;index&quot; 的区域是暂存区（stage/index），标记为 &quot;master&quot; 的是 master 分支所代表的目录树。</p>\n<p>图中我们可以看出此时 &quot;HEAD&quot; 实际是指向 master 分支的一个 &quot;游标&quot;。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</p>\n<p>图中的 objects 标识的区域为 Git 的对象库，实际位于 &quot;.git/objects&quot; 目录下，里面包含了创建的各种对象及内容。</p>\n<p>对工作区修改（或新增）的文件执行 <strong>git add</strong> 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的 ID 被记录在暂存区的文件索引中。</p>\n<p>执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>\n<p>执行 <strong>git reset HEAD</strong> 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p>\n<p>执行 <strong>git rm --cached &lt;file&gt;</strong> 命令时，会直接从暂存区删除文件，工作区则不做出改变。</p>\n<p>执行 <strong>git checkout .</strong> 或者 <strong>git checkout -- &lt;file&gt;</strong> 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区中的改动。</p>\n<p>执行 <strong>git checkout HEAD .</strong> 或者 <strong>git checkout HEAD &lt;file&gt;</strong> 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</p>\n<h2 id=\"git创建仓库\"><a class=\"anchor\" href=\"#git创建仓库\">#</a> Git 创建仓库</h2>\n<p>Git 使用 <strong>git init</strong> 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，在执行完成 <strong>git init</strong> 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。</p>\n<h3 id=\"使用方法\"><a class=\"anchor\" href=\"#使用方法\">#</a> 使用方法</h3>\n<p>使用当前目录作为 Git 仓库，我们只需使它初始化。</p>\n<pre><code>git init\n</code></pre>\n<p>该命令执行完后会在当前目录生成一个 .git 目录。</p>\n<p>使用我们指定目录作为 Git 仓库。</p>\n<pre><code>git init newrepo\n</code></pre>\n<p>初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。</p>\n<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p>\n<pre><code>$ git add *.c\n$ git add README\n$ git commit -m '内容文字'\n</code></pre>\n<p>以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。</p>\n<blockquote>\n<p><strong>注：</strong> 在 Linux 系统中，commit 信息使用单引号 <strong>'</strong>，Windows 系统，commit 信息使用双引号 <strong>&quot;</strong>。</p>\n<p>所以在 git bash 中 <strong>git commit -m ' 提交说明'</strong> 这样是可以的，在 Windows 命令行中就要使用双引号 <strong>git commit -m &quot;提交说明&quot;</strong>。</p>\n</blockquote>\n<hr>\n<h2 id=\"git-clone\"><a class=\"anchor\" href=\"#git-clone\">#</a> git clone</h2>\n<p>我们使用 <strong>git clone</strong> 从现有 Git 仓库中拷贝项目（类似 <strong>svn checkout</strong>）。</p>\n<p>克隆仓库的命令格式为：</p>\n<pre><code>git clone &lt;repo&gt;\n</code></pre>\n<p>如果我们需要克隆到指定的目录，可以使用以下命令格式：</p>\n<pre><code>git clone &lt;repo&gt; &lt;directory&gt;\n</code></pre>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>**repo:**Git 仓库。</li>\n<li>**directory:** 本地目录。</li>\n</ul>\n<p>比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</p>\n<pre><code>$ git clone git://github.com/schacon/grit.git\n</code></pre>\n<p>执行该命令后，会在当前目录下创建一个名为 grit 的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。</p>\n<p>如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</p>\n<pre><code>$ git clone git://github.com/schacon/grit.git mygrit\n</code></pre>\n<h2 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h2>\n<p>git 的设置使用 <strong>git config</strong> 命令。</p>\n<p>显示当前的 git 配置信息：</p>\n<pre><code>$ git config --list\ncredential.helper=osxkeychain\ncore.repositoryformatversion=0\ncore.filemode=true\ncore.bare=false\ncore.logallrefupdates=true\ncore.ignorecase=true\ncore.precomposeunicode=true\n</code></pre>\n<p>编辑 git 配置文件:</p>\n<pre><code>$ git config -e    # 针对当前仓库 \n</code></pre>\n<p>或者：</p>\n<pre><code>$ git config -e --global   # 针对系统上所有仓库\n</code></pre>\n<p>设置提交代码时的用户信息：</p>\n<pre><code>$ git config --global user.name &quot;runoob&quot;\n$ git config --global user.email test@runoob.com\n</code></pre>\n<p>如果去掉 <strong>--global</strong> 参数只对当前仓库有效。</p>\n<h2 id=\"git基本操作\"><a class=\"anchor\" href=\"#git基本操作\">#</a> Git 基本操作</h2>\n<p>Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。</p>\n<p>Git 常用的是以下 6 个命令：<strong>git clone</strong>、<strong>git push</strong>、<strong>git add</strong> 、<strong>git commit</strong>、<strong>git checkout</strong>、<strong>git pull</strong>，后面我们会详细介绍。</p>\n<p><img data-src=\"%E5%9B%BE/3.jpg\" alt></p>\n<p><strong>说明：</strong></p>\n<ul>\n<li>workspace：工作区</li>\n<li>staging area：暂存区 / 缓存区</li>\n<li>local repository：版本库或本地仓库</li>\n<li>remote repository：远程仓库</li>\n</ul>\n<h3 id=\"创建仓库\"><a class=\"anchor\" href=\"#创建仓库\">#</a> 创建仓库</h3>\n<p>下表列出了 git 创建仓库的命令：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>git init</code></td>\n<td style=\"text-align:left\">初始化仓库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git clone</code></td>\n<td style=\"text-align:left\">拷贝一份远程仓库，也就是下载一个项目。</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"提交与修改\"><a class=\"anchor\" href=\"#提交与修改\">#</a> 提交与修改</h2>\n<p>Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。</p>\n<p>下表列出了有关创建与提交你的项目的快照的命令：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>git add</code></td>\n<td style=\"text-align:left\">添加文件到暂存区</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git status</code></td>\n<td style=\"text-align:left\">查看仓库当前的状态，显示有变更的文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git diff</code></td>\n<td style=\"text-align:left\">比较文件的不同，即暂存区和工作区的差异</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git commit</code></td>\n<td style=\"text-align:left\">提交暂存区到本地仓库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git reset --hard</code></td>\n<td style=\"text-align:left\">回退版本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git rm</code></td>\n<td style=\"text-align:left\">删除工作区文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git mv</code></td>\n<td style=\"text-align:left\">移动或重命名工作区文件</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"提交日志\"><a class=\"anchor\" href=\"#提交日志\">#</a> 提交日志</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>git log</code></td>\n<td style=\"text-align:left\">查看历史提交记录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git reflog</code></td>\n<td style=\"text-align:left\">查看历史操作版本号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git blame &lt;file&gt;</code></td>\n<td style=\"text-align:left\">以列表形式查看指定文件的历史修改记录</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"远程操作\"><a class=\"anchor\" href=\"#远程操作\">#</a> 远程操作</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>git remote</code></td>\n<td style=\"text-align:left\">远程仓库操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git fetch</code></td>\n<td style=\"text-align:left\">从远程获取代码库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git pull</code></td>\n<td style=\"text-align:left\">下载远程代码并合并</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>git push</code></td>\n<td style=\"text-align:left\">上传远程代码并合并</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"git分支管理\"><a class=\"anchor\" href=\"#git分支管理\">#</a> Git 分支管理</h2>\n<p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p>\n<p>创建分支命令：</p>\n<pre><code>git branch (branchname)\n</code></pre>\n<p>切换分支命令:</p>\n<pre><code>git checkout (branchname)\n</code></pre>\n<p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p>\n<p>合并分支命令:</p>\n<pre><code>git merge \n</code></pre>\n<p>你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。</p>\n<p>开始前我们先创建一个测试目录：</p>\n<pre><code>$ mkdir gitdemo\n$ cd gitdemo/\n$ git init\nInitialized empty Git repository...\n$ touch README\n$ git add README\n$ git commit -m '第一次版本提交'\n[master (root-commit) 3b58100] 第一次版本提交\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 README\n</code></pre>\n<h3 id=\"列出分支\"><a class=\"anchor\" href=\"#列出分支\">#</a> 列出分支</h3>\n<p>列出分支基本命令：</p>\n<pre><code>git branch\n</code></pre>\n<p>没有参数时，<strong>git branch</strong> 会列出你在本地的分支。</p>\n<pre><code>$ git branch\n* master\n</code></pre>\n<p>此例的意思就是，我们有一个叫做 <strong>master</strong> 的分支，并且该分支是当前分支。</p>\n<p>当你执行 <strong>git init</strong> 的时候，默认情况下 Git 就会为你创建 <strong>master</strong> 分支。</p>\n<p>如果我们要手动创建一个分支。执行 <strong>git branch (branchname)</strong> 即可。</p>\n<pre><code>$ git branch testing\n$ git branch\n* master\n  testing\n</code></pre>\n<p>现在我们可以看到，有了一个新分支 <strong>testing</strong>。</p>\n<p>当你以此方式在上次提交更新之后创建了新分支，如果后来又有更新提交， 然后又切换到了 <strong>testing</strong> 分支，Git 将还原你的工作目录到你创建分支时候的样子。</p>\n<p>接下来我们将演示如何切换分支，我们用 git checkout (branch) 切换到我们要修改的分支。</p>\n<pre><code>$ ls\nREADME\n$ echo 'runoob.com' &gt; test.txt\n$ git add .\n$ git commit -m 'add test.txt'\n[master 3e92c19] add test.txt\n 1 file changed, 1 insertion(+)\n create mode 100644 test.txt\n$ ls\nREADME        test.txt\n$ git checkout testing\nSwitched to branch 'testing'\n$ ls\nREADME\n</code></pre>\n<p>当我们切换到 <strong>testing</strong> 分支的时候，我们添加的新文件 test.txt 被移除了。切换回 <strong>master</strong> 分支的时候，它们又重新出现了。</p>\n<pre><code>$ git checkout master\nSwitched to branch 'master'\n$ ls\nREADME        test.txt\n</code></pre>\n<p>我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。</p>\n<pre><code>$ git checkout -b newtest\nSwitched to a new branch 'newtest'\n$ git rm test.txt \nrm 'test.txt'\n$ ls\nREADME\n$ touch runoob.php\n$ git add .\n$ git commit -am 'removed test.txt、add runoob.php'\n[newtest c1501a2] removed test.txt、add runoob.php\n 2 files changed, 1 deletion(-)\n create mode 100644 runoob.php\n delete mode 100644 test.txt\n$ ls\nREADME        runoob.php\n$ git checkout master\nSwitched to branch 'master'\n$ ls\nREADME        test.txt\n</code></pre>\n<p>如你所见，我们创建了一个分支，在该分支上移除了一些文件 test.txt，并添加了 runoob.php 文件，然后切换回我们的主分支，删除的 test.txt 文件又回来了，且新增加的 runoob.php 不存在主分支中。</p>\n<p>使用分支将工作切分开来，从而让我们能够在不同开发环境中做事，并来回切换。</p>\n<h3 id=\"删除分支\"><a class=\"anchor\" href=\"#删除分支\">#</a> 删除分支</h3>\n<p>删除分支命令：</p>\n<pre><code>git branch -d (branchname)\n</code></pre>\n<p>例如我们要删除 testing 分支：</p>\n<pre><code>$ git branch\n* master\n  testing\n$ git branch -d testing\nDeleted branch testing (was 85fc7e7).\n$ git branch\n* master\n</code></pre>\n<h3 id=\"分支合并\"><a class=\"anchor\" href=\"#分支合并\">#</a> 分支合并</h3>\n<p>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：</p>\n<pre><code>$ git branch\n* master\n  newtest\n$ ls\nREADME        test.txt\n$ git merge newtest\nUpdating 3e92c19..c1501a2\nFast-forward\n runoob.php | 0\n test.txt   | 1 -\n 2 files changed, 1 deletion(-)\n create mode 100644 runoob.php\n delete mode 100644 test.txt\n$ ls\nREADME        runoob.php\n</code></pre>\n<p>以上实例中我们将 newtest 分支合并到主分支去，test.txt 文件被删除。</p>\n<p>合并完后就可以删除分支:</p>\n<pre><code>$ git branch -d newtest\nDeleted branch newtest (was c1501a2).\n</code></pre>\n<p>删除后， 就只剩下 master 分支了：</p>\n<pre><code>$ git branch\n* master\n</code></pre>\n<h3 id=\"合并冲突\"><a class=\"anchor\" href=\"#合并冲突\">#</a> 合并冲突</h3>\n<p>合并并不仅仅是简单的文件添加、移除的操作，Git 也会合并修改。</p>\n<pre><code>$ git branch\n* master\n$ cat runoob.php\n</code></pre>\n<p>首先，我们创建一个叫做 change_site 的分支，切换过去，我们将 runoob.php 内容改为:</p>\n<pre><code>&lt;?php\necho 'runoob';\n?&gt;\n</code></pre>\n<p>创建 change_site 分支：</p>\n<pre><code>$ git checkout -b change_site\nSwitched to a new branch 'change_site'\n$ vim runoob.php\n$ head -3 runoob.php\n&lt;?php\necho 'runoob';\n?&gt;\n$ git commit -am 'changed the runoob.php'\n[change_site 7774248] changed the runoob.php\n 1 file changed, 3 insertions(+)\n \n</code></pre>\n<p>将修改的内容提交到 change_site 分支中。 现在，假如切换回 master 分支我们可以看内容恢复到我们修改前的 (空文件，没有代码)，我们再次修改 runoob.php 文件。</p>\n<pre><code>$ git checkout master\nSwitched to branch 'master'\n$ cat runoob.php\n$ vim runoob.php    # 修改内容如下\n$ cat runoob.php\n&lt;?php\necho 1;\n?&gt;\n$ git diff\ndiff --git a/runoob.php b/runoob.php\nindex e69de29..ac60739 100644\n--- a/runoob.php\n+++ b/runoob.php\n@@ -0,0 +1,3 @@\n+&lt;?php\n+echo 1;\n+?&gt;\n$ git commit -am '修改代码'\n[master c68142b] 修改代码\n 1 file changed, 3 insertions(+)\n</code></pre>\n<p>现在这些改变已经记录到我的 &quot;master&quot; 分支了。接下来我们将 &quot;change_site&quot; 分支合并过来。</p>\n<pre><code>$ git merge change_site\nAuto-merging runoob.php\nCONFLICT (content): Merge conflict in runoob.php\nAutomatic merge failed; fix conflicts and then commit the result.\n\n$ cat runoob.php     # 打开文件，看到冲突内容\n&lt;?php\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\necho 1;\n=======\necho 'runoob';\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; change_site\n?&gt;\n</code></pre>\n<p>我们将前一个分支合并到 master 分支，一个合并冲突就出现了，接下来我们需要手动去修改它。</p>\n<pre><code>$ vim runoob.php \n$ cat runoob.php\n&lt;?php\necho 1;\necho 'runoob';\n?&gt;\n$ git diff\ndiff --cc runoob.php\nindex ac60739,b63d7d7..0000000\n--- a/runoob.php\n+++ b/runoob.php\n@@@ -1,3 -1,3 +1,4 @@@\n  &lt;?php\n +echo 1;\n+ echo 'runoob';\n  ?&gt;\n</code></pre>\n<p>在 Git 中，我们可以用 git add 要告诉 Git 文件冲突已经解决</p>\n<pre><code>$ git status -s\nUU runoob.php\n$ git add runoob.php\n$ git status -s\nM  runoob.php\n$ git commit\n[master 88afe0e] Merge branch 'change_site'\n</code></pre>\n<p>现在我们成功解决了合并中的冲突，并提交了结果。</p>\n<h2 id=\"git查看提交历史\"><a class=\"anchor\" href=\"#git查看提交历史\">#</a> Git 查看提交历史</h2>\n<p>Git 提交历史一般常用两个命令：</p>\n<ul>\n<li>\n<p><strong>git log</strong> - 查看历史提交记录。</p>\n</li>\n<li>\n<p><strong>git blame &lt;file&gt;</strong> - 以列表形式查看指定文件的历史修改记录。</p>\n</li>\n<li>\n<h3 id=\"git-log\"><a class=\"anchor\" href=\"#git-log\">#</a> git log</h3>\n</li>\n<li>\n<p>在使用 Git 提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用 <strong>git log</strong> 命令查看。</p>\n</li>\n<li>\n<p>针对我们前一章节的操作，使用 <strong>git log</strong> 命令列出历史提交记录如下：</p>\n</li>\n<li>\n<pre><code> $ git log\n commit d5e9fc2c811e0ca2b2d28506ef7dc14171a207d9 (HEAD -&gt; master)\n Merge: c68142b 7774248\n Author: runoob &lt;test@runoob.com&gt;\n Date:   Fri May 3 15:55:58 2019 +0800\n \n     Merge branch 'change_site'\n \n commit c68142b562c260c3071754623b08e2657b4c6d5b\n Author: runoob &lt;test@runoob.com&gt;\n Date:   Fri May 3 15:52:12 2019 +0800\n \n     修改代码\n \n commit 777424832e714cf65d3be79b50a4717aea51ab69 (change_site)\n Author: runoob &lt;test@runoob.com&gt;\n Date:   Fri May 3 15:49:26 2019 +0800\n \n     changed the runoob.php\n \n commit c1501a244676ff55e7cccac1ecac0e18cbf6cb00\n Author: runoob &lt;test@runoob.com&gt;\n Date:   Fri May 3 15:35:32 2019 +0800\n</code></pre>\n</li>\n<li>\n<p>我们可以用 --oneline 选项来查看历史记录的简洁的版本。</p>\n</li>\n<li>\n<pre><code> $ git log --oneline\n $ git log --oneline\n d5e9fc2 (HEAD -&gt; master) Merge branch 'change_site'\n c68142b 修改代码\n 7774248 (change_site) changed the runoob.php\n c1501a2 removed test.txt、add runoob.php\n 3e92c19 add test.txt\n 3b58100 第一次版本提交\n</code></pre>\n</li>\n<li>\n<p>这告诉我们的是，此项目的开发历史。</p>\n</li>\n<li>\n<p>我们还可以用 --graph 选项，查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：</p>\n</li>\n<li>\n<pre><code> *   d5e9fc2 (HEAD -&gt; master) Merge branch 'change_site'\n |\\  \n | * 7774248 (change_site) changed the runoob.php\n * | c68142b 修改代码\n |/  \n * c1501a2 removed test.txt、add runoob.php\n * 3e92c19 add test.txt\n * 3b58100 第一次版本提交\n</code></pre>\n</li>\n<li>\n<p>现在我们可以更清楚明了地看到何时工作分叉、又何时归并。</p>\n</li>\n<li>\n<p>你也可以用 <strong>--reverse</strong> 参数来逆向显示所有日志。</p>\n</li>\n<li>\n<pre><code> $ git log --reverse --oneline\n 3b58100 第一次版本提交\n 3e92c19 add test.txt\n c1501a2 removed test.txt、add runoob.php\n 7774248 (change_site) changed the runoob.php\n c68142b 修改代码\n d5e9fc2 (HEAD -&gt; master) Merge branch 'change_site'\n</code></pre>\n</li>\n<li>\n<p>如果只想查找指定用户的提交日志可以使用命令：git log --author , 例如，比方说我们要找 Git 源码中 Linus 提交的部分：</p>\n</li>\n<li>\n<pre><code> $ git log --author=Linus --oneline -5\n 81b50f3 Move 'builtin-*' into a 'builtin/' subdirectory\n 3bb7256 make &quot;index-pack&quot; a built-in\n 377d027 make &quot;git pack-redundant&quot; a built-in\n b532581 make &quot;git unpack-file&quot; a built-in\n 112dd51 make &quot;mktag&quot; a built-in\n</code></pre>\n</li>\n<li>\n<p>如果你要指定日期，可以执行几个选项：--since 和 --before，但是你也可以用 --until 和 --after。</p>\n</li>\n<li>\n<p>例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 --no-merges 选项以隐藏合并提交）：</p>\n</li>\n<li>\n<pre><code> $ git log --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges\n 5469e2d Git 1.7.1-rc2\n d43427d Documentation/remote-helpers: Fix typos and improve language\n 272a36b Fixup: Second argument may be any arbitrary string\n b6c8d2d Documentation/remote-helpers: Add invocation section\n 5ce4f4e Documentation/urls: Rewrite to accomodate transport::address\n 00b84e9 Documentation/remote-helpers: Rewrite description\n 03aa87e Documentation: Describe other situations where -z affects git diff\n 77bc694 rebase-interactive: silence warning when no commits rewritten\n 636db2c t3301: add tests to use --format=&quot;%N&quot;\n</code></pre>\n</li>\n<li>\n<p>更多 git log 命令可查看：<span class=\"exturl\" data-url=\"aHR0cDovL2dpdC1zY20uY29tL2RvY3MvZ2l0LWxvZw==\">http://git-scm.com/docs/git-log</span></p>\n</li>\n<li>\n<h3 id=\"git-blame\"><a class=\"anchor\" href=\"#git-blame\">#</a> git blame</h3>\n</li>\n<li>\n<p>如果要查看指定文件的修改记录可以使用 git blame 命令，格式如下：</p>\n</li>\n<li>\n<pre><code> git blame &lt;file&gt;\n</code></pre>\n</li>\n<li>\n<p>git blame 命令是以列表形式显示修改记录，如下实例：</p>\n</li>\n<li>\n<pre><code> $ git blame README \n ^d2097aa (tianqixin 2020-08-25 14:59:25 +0800 1) # Runoob Git 测试\n db9315b0 (runoob    2020-08-25 16:00:23 +0800 2) # 菜鸟教程 \n</code></pre>\n</li>\n</ul>\n<h2 id=\"git标签\"><a class=\"anchor\" href=\"#git标签\">#</a> Git 标签</h2>\n<p>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。</p>\n<p>比如说，我们想为我们的 runoob 项目发布一个 &quot;1.0&quot; 版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）&quot;v1.0&quot; 的标签。</p>\n<p>-a 选项意为 &quot;创建一个带注解的标签&quot;。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。</p>\n<pre><code>$ git tag -a v1.0 \n</code></pre>\n<p>当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。</p>\n<p>现在，注意当我们执行 git log --decorate 时，我们可以看到我们的标签了：</p>\n<pre><code>*   d5e9fc2 (HEAD -&gt; master) Merge branch 'change_site'\n|\\  \n| * 7774248 (change_site) changed the runoob.php\n* | c68142b 修改代码\n|/  \n* c1501a2 removed test.txt、add runoob.php\n* 3e92c19 add test.txt\n* 3b58100 第一次版本提交\n</code></pre>\n<p>如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。</p>\n<p>例如，假设我们发布了提交 85fc7e7 (上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：</p>\n<pre><code>$ git tag -a v0.9 85fc7e7\n$ git log --oneline --decorate --graph\n*   d5e9fc2 (HEAD -&gt; master) Merge branch 'change_site'\n|\\  \n| * 7774248 (change_site) changed the runoob.php\n* | c68142b 修改代码\n|/  \n* c1501a2 removed test.txt、add runoob.php\n* 3e92c19 add test.txt\n* 3b58100 (tag: v0.9) 第一次版本提交\n</code></pre>\n<p>如果我们要查看所有标签可以使用以下命令：</p>\n<pre><code>$ git tag\nv0.9\nv1.0\n</code></pre>\n<p>指定标签信息命令：</p>\n<pre><code>git tag -a &lt;tagname&gt; -m &quot;runoob.com标签&quot;\n</code></pre>\n<p>PGP 签名标签命令：</p>\n<pre><code>git tag -s &lt;tagname&gt; -m &quot;runoob.com标签&quot;\n</code></pre>\n<p>删除标签:</p>\n<pre><code>git tag -d v1.0\n</code></pre>\n<p>查看此版本所修改的内容:</p>\n<pre><code>git show v1.0\n</code></pre>\n",
            "tags": [
                "计算机科学",
                "web",
                "git",
                "git"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/css/CSS%E9%9D%A2%E8%AF%95/CSS%E7%B3%BB%E5%88%97/",
            "url": "https://entropywhite.com/computer-science/web/css/CSS%E9%9D%A2%E8%AF%95/CSS%E7%B3%BB%E5%88%97/",
            "title": "CSS面试",
            "date_published": "2022-08-14T09:12:00.000Z",
            "content_html": "<h1 id=\"1对盒子模型的理解\"><a class=\"anchor\" href=\"#1对盒子模型的理解\">#</a> 1. 对盒子模型的理解</h1>\n<p>对一个文档进行布局（layout）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）</p>\n<p>盒子从内到外分为四部分</p>\n<p>content：内容，显示文本图像等</p>\n<p>padding：内边框，清除内容周围区域元素，内边距是透明的，取值也不能为负，受盒子的背景影响</p>\n<p>border：边框，围绕内容的内边距的一条线或多条线，由线条大小、线条样式和线条颜色决定</p>\n<p>margin：外边框，在元素外创建额外的空白，空白通常不能放其他元素的区域</p>\n<p>这只是二维的部分，还有三维的部分，三维在二维的基础上，在内边框和外边框之间增加了背景图片和背景颜色</p>\n<p>在 CSS 里盒子模型分为两种：<strong>W3C 标准盒子模型</strong>和<strong> IE 怪异盒子模型</strong>，W3C 为默认模型</p>\n<h2 id=\"标准盒子模型\"><a class=\"anchor\" href=\"#标准盒子模型\">#</a> 标准盒子模型</h2>\n<p>标准盒子模型的总宽度是：宽 + 内边距 + 边框 + 外边框</p>\n<p>总高度是：高 + 内边距 + 边框 + 外边框</p>\n<p>高与宽没有包含内边距和边框</p>\n<h2 id=\"怪异盒子模型\"><a class=\"anchor\" href=\"#怪异盒子模型\">#</a> 怪异盒子模型</h2>\n<p>怪异盒子模型的总宽度和总高度只有 宽 + 外边框 高 + 外边框</p>\n<p>高与宽包含了内边距和边框</p>\n<h2 id=\"指定盒子模型\"><a class=\"anchor\" href=\"#指定盒子模型\">#</a> 指定盒子模型</h2>\n<p>CSS 中的 <code>box-sizing</code>  定义了引擎应该如何计算元素总高度和总宽度（指定盒子模型）</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> content-box|border-box</pre></td></tr></table></figure><p>content-box 就是指定为标准盒子模型</p>\n<p>border-box 就是指定为怪异盒子模型</p>\n<h1 id=\"2css选择器有哪些优先级哪些属性可以继承\"><a class=\"anchor\" href=\"#2css选择器有哪些优先级哪些属性可以继承\">#</a> 2.CSS 选择器有哪些？优先级？哪些属性可以继承？</h1>\n<h2 id=\"选择器\"><a class=\"anchor\" href=\"#选择器\">#</a> 选择器</h2>\n<p>CSS 选择器是 CSS 规则的第一部分</p>\n<p>它是元素和其他部分组合起来告诉浏览器哪个 HTML 元素应当是被选为应用规则中的 CSS 属性值的方式</p>\n<p>选择器所选择的元素，叫做 “选择器的对象”</p>\n<p>那么常用的选择器有 id 选择器 类选择器 标签选择器 后代选择器 子选择器 相邻兄弟选择器和群组选择器</p>\n<p>不常用的选择器有 伪类选择器 伪元素选择器 属性选择器</p>\n<p>CSS3 中新增的 层次选择器</p>\n<h2 id=\"优先级\"><a class=\"anchor\" href=\"#优先级\">#</a> 优先级</h2>\n<p>内敛 &gt; ID 选择器 &gt; 类选择器 &gt; 标签选择器</p>\n<p>至于如何计算 分为 ABCD 的值决定</p>\n<p>如果有内敛 则 A=1 否则 = 0，B 值是 ID 选择器出现次数，C 和 D 也如此对应</p>\n<p>知道了如何计算，那么就需要比较大小判断优先级</p>\n<p>从左往右依次比较，较大者优先</p>\n<p>如果相等，则向右一位进行比较</p>\n<p>如果 4 位全部相同，则后面覆盖前面的</p>\n<p>如果外部样式要强制覆盖内敛的话，需要使用 <code>!important</code></p>\n<h2 id=\"继承属性\"><a class=\"anchor\" href=\"#继承属性\">#</a> 继承属性</h2>\n<p>继承是指父元素一些属性，后代元素会自动拥有</p>\n<p>继承属性分成：字体属性、文本属性、元素可见性、表格布局属性、列表属性、引用和光标属性</p>\n<p>比较特殊的是，a 链接的字体颜色不能被继承 h1-h6 的字体大小也不能被继承</p>\n<h1 id=\"3说说empxremvhvw的区别\"><a class=\"anchor\" href=\"#3说说empxremvhvw的区别\">#</a> 3. 说说 em/px/rem/vh/vw 的区别</h1>\n<h2 id=\"em\"><a class=\"anchor\" href=\"#em\">#</a> em</h2>\n<p>em 是相对长度单位，相对于当前对象内文本的字体尺寸，如果没有设置文本内的字体尺寸，则默认为浏览器的字体尺寸（1em=16px）</p>\n<p>为了简化  <code>font-size</code>  的换算，我们需要在 <code>css</code>  中的  <code>body</code>  选择器中声明 <code>font-size</code> =  <code>62.5%</code> ，这就使 em 值变为  <code>16px*62.5% = 10px</code></p>\n<p>这样  <code>12px = 1.2em</code> ,  <code>10px = 1em</code> , 也就是说只需要将你的原来的 <code>px</code>  数值除以 10，然后换上  <code>em</code>  作为单位就行了</p>\n<p>特点：</p>\n<ul>\n<li>em 的值并不是固定的</li>\n<li>em 会继承父级元素的字体大小</li>\n<li>任意浏览器的默认字体高都是 16px</li>\n</ul>\n<h2 id=\"px\"><a class=\"anchor\" href=\"#px\">#</a> px</h2>\n<p>px 表示为像素，像素就是呈现在我们显示器上的一个个小点，每个像素点都是大小等同的，所以像素为计量单位被分在了绝对长度单位中</p>\n<p>有人会把 <code>px</code>  认为是相对长度，原因在于在移动端中存在设备像素比， <code>px</code>  实际显示的大小是不确定的</p>\n<p>这里之所以认为 <code>px</code>  为绝对单位，在于 <code>px</code>  的大小和元素的其他属性无关</p>\n<h2 id=\"rem\"><a class=\"anchor\" href=\"#rem\">#</a> rem</h2>\n<p>rem 是相对长度单位，相对的只是 HTML 根元素 <code>font-size</code>  的值</p>\n<p>同样可以设置 <code>font-size</code> = <code>62.5%</code>  简化换算，这样 1rem=10px</p>\n<p>特点：</p>\n<ul>\n<li>rem 单位可谓集相对大小和绝对大小的优点于一身</li>\n<li>和 em 不同的是 rem 总是相对于根元素，而不像 em 一样使用级联的方式来计算尺寸</li>\n</ul>\n<h2 id=\"vh-vw\"><a class=\"anchor\" href=\"#vh-vw\">#</a> vh、vw</h2>\n<p>vh 和 vw，实际上就是根据窗口的高度或宽度，分成 100 等份，100vw 就代表满宽，50vw 代表半宽</p>\n<p>窗口分为桌面端（浏览器的可视区域）和移动端（布局视口）</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><strong>px</strong>：绝对单位，页面按精确像素展示</p>\n<p><strong>em</strong>：相对单位，基准点为父节点字体的大小，如果自身定义了 <code>font-size</code>  按自身来计算，整个页面内 <code>1em</code>  不是一个固定的值</p>\n<p><strong>rem</strong>：相对单位，可理解为 <code>root em</code> , 相对根节点 <code>html</code>  的字体大小来计算</p>\n<p><strong>vh、vw</strong>：主要用于页面视口大小布局，在页面布局上更加方便简单</p>\n<h1 id=\"4说说设备像素-css像素-设备独立像素-dpr-ppi-之间的区别\"><a class=\"anchor\" href=\"#4说说设备像素-css像素-设备独立像素-dpr-ppi-之间的区别\">#</a> 4. 说说设备像素、css 像素、设备独立像素、dpr、ppi 之间的区别？</h1>\n<h2 id=\"设备像素\"><a class=\"anchor\" href=\"#设备像素\">#</a> 设备像素</h2>\n<p>设备像素（device pixels），又称为物理像素</p>\n<p>指设备能控制显示的最小物理单位，不一定是一个小正方形区块，也没有标准的宽高，只是用于显示丰富色彩的一个 “点” 而已</p>\n<p>可以参考公园里的景观变色彩灯，一个彩灯 (物理像素) 由红、蓝、绿小灯组成，三盏小灯不同的亮度混合出各种色彩</p>\n<p>从屏幕在工厂生产出的那天起，它上面设备像素点就固定不变了，单位为 <code>pt</code></p>\n<h2 id=\"css像素\"><a class=\"anchor\" href=\"#css像素\">#</a> css 像素</h2>\n<p>CSS 像素（css pixel, px）: 适用于 web 编程，在 CSS 中以 px 为后缀，是一个长度单位</p>\n<p>在 CSS 规范中，长度单位可以分为两类，绝对单位以及相对单位</p>\n<p>px 是一个相对单位，相对的是设备像素（device pixel）</p>\n<p>一般情况，页面缩放比为 1，1 个 CSS 像素等于 1 个设备独立像素</p>\n<p><code>CSS</code>  像素又具有两个方面的相对性：</p>\n<ul>\n<li>在同一个设备上，每 1 个 CSS 像素所代表的设备像素是可以变化的（比如调整屏幕的分辨率）</li>\n<li>在不同的设备之间，每 1 个 CSS 像素所代表的设备像素是可以变化的（比如两个不同型号的手机）</li>\n</ul>\n<p>在页面进行缩放操作也会 引起 <code>css</code>  中 <code>px</code>  的变化，假设页面放大一倍，原来的 1px 的东西变成 2px，在实际宽度不变的情况下 1px 变得跟原来的 2px 的长度（长宽）一样了（元素会占据更多的设备像素）</p>\n<p>假设原来需要 320px 才能填满的宽度现在只需要 160px</p>\n<p>px 会受到下面的因素的影响而变化：</p>\n<ul>\n<li>每英寸像素（PPI）</li>\n<li>设备像素比（DPR）</li>\n</ul>\n<h2 id=\"设备独立像素\"><a class=\"anchor\" href=\"#设备独立像素\">#</a> 设备独立像素</h2>\n<p>设备独立像素（Device Independent Pixel）：与设备无关的逻辑像素，代表可以通过程序控制使用的虚拟像素，是一个总体概念，包括了 CSS 像素</p>\n<p>在 <code>javaScript</code>  中可以通过 <code>window.screen.width/ window.screen.height</code>  查看</p>\n<p>比如说电脑屏幕的分辨率（非严谨说法）指的就是设备独立像素</p>\n<p>一个设备独立像素里可能包含 1 个或者多个物理像素点，包含的越多则屏幕看起来越清晰</p>\n<p>至于为什么出现设备独立像素这种虚拟像素单位概念，下面举个例子：</p>\n<p>iPhone 3GS 和 iPhone 4/4s 的尺寸都是 3.5 寸，但 iPhone 3GS 的分辨率是 320x480，iPhone 4/4s 的分辨率是 640x960</p>\n<p>这意味着，iPhone 3GS 有 320 个物理像素，iPhone 4/4s 有 640 个物理像素</p>\n<p>如果我们按照真实的物理像素进行布局，比如说我们按照 320 物理像素进行布局，到了 640 物理像素的手机上就会有一半的空白，为了避免这种问题，就产生了虚拟像素单位</p>\n<p>我们统一 iPhone 3GS 和 iPhone 4/4s 都是 320 个虚拟像素，只是在 iPhone 3GS 上，最终 1 个虚拟像素换算成 1 个物理像素，在 iphone 4s 中，1 个虚拟像素最终换算成 2 个物理像素</p>\n<p>至于 1 个虚拟像素被换算成几个物理像素，这个数值我们称之为设备像素比，也就是 <code>dpr</code></p>\n<h2 id=\"dpr\"><a class=\"anchor\" href=\"#dpr\">#</a> dpr</h2>\n<p>dpr（device pixel ratio），设备像素比，代表设备独立像素到设备像素的转换关系，在 <code>JavaScript</code>  中可以通过  <code>window.devicePixelRatio</code>  获取</p>\n<p>dpr = 设备像素 / 设备独立像素</p>\n<p>当设备像素比为 1:1 时，使用 1（1×1）个设备像素显示 1 个 CSS 像素</p>\n<p>当设备像素比为 2:1 时，使用 4（2×2）个设备像素显示 1 个 CSS 像素</p>\n<p>当设备像素比为 3:1 时，使用 9（3×3）个设备像素显示 1 个 CSS 像素</p>\n<p>当 <code>dpr</code>  为 x ，那么 <code>1px</code>  的 <code>CSS</code>  像素宽度对应 <code>x px</code>  的物理像素的宽度，1px 的 <code>CSS</code>  像素高度对应 <code>x px</code>  的物理像素高度</p>\n<h2 id=\"ppi\"><a class=\"anchor\" href=\"#ppi\">#</a> ppi</h2>\n<p>ppi （pixel per inch），每英寸像素，表示每英寸所包含的像素点数目，更确切的说法应该是像素密度。数值越高，说明屏幕能以更高密度显示图像</p>\n<p>计算方法：</p>\n<p><img data-src=\"https://static.vue-js.com/f734adf0-91f2-11eb-ab90-d9ae814b240d.png\" alt></p>\n<h2 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h2>\n<p>无缩放情况下，1 个 CSS 像素等于 1 个设备独立像素</p>\n<p>设备像素由屏幕生产之后就不发生改变，而设备独立像素是一个虚拟单位会发生改变</p>\n<p>PC 端中，1 个设备独立像素 = 1 个设备像素 （在 100%，未缩放的情况下）</p>\n<p>在移动端中，标准屏幕（160ppi）下 1 个设备独立像素 = 1 个设备像素</p>\n<p>设备像素比（dpr） = 设备像素 / 设备独立像素</p>\n<p>每英寸像素（ppi），值越大，图像越清晰</p>\n<h1 id=\"5css中有哪些方式可以隐藏页面元素区别\"><a class=\"anchor\" href=\"#5css中有哪些方式可以隐藏页面元素区别\">#</a> 5.css 中，有哪些方式可以隐藏页面元素？区别？</h1>\n<p>通过 css 实现隐藏页面元素有如下：</p>\n<h2 id=\"displaynone\"><a class=\"anchor\" href=\"#displaynone\">#</a> display:none</h2>\n<p>这是最常用的一种方式，元素会彻底消失，其占有的空间会被其他元素占有，会触发重排和重绘</p>\n<p>特点：元素不可见，不占据空间，无法响应点击事件</p>\n<h2 id=\"visibilityhidden\"><a class=\"anchor\" href=\"#visibilityhidden\">#</a> visibility:hidden</h2>\n<p>这也是常用的一种方式，但与上一个不同，虽然看上去是消失了，但空间依然占据着，会触发重绘但不触发重排</p>\n<p>特点：元素不可见，占据页面空间，无法响应点击事件</p>\n<h2 id=\"opacity0\"><a class=\"anchor\" href=\"#opacity0\">#</a> opacity:0</h2>\n<p>设置透明度为 0，仅仅只是隐藏了而已，可以被触发事件，依然占据空间，会触发重排，一般情况下只会触发重绘（如果利用动画，对透明度做变化，会触发 GPU 加速，不触发重绘）</p>\n<p>其子元素不能设置 opacity 来达到显示的效果</p>\n<p>特点：改变元素透明度，元素不可见，占据页面空间，可以响应点击事件</p>\n<h2 id=\"设置height-width模型属性为0\"><a class=\"anchor\" href=\"#设置height-width模型属性为0\">#</a> 设置 height、width 模型属性为 0</h2>\n<p>将所有影响盒子模型的属性全部设置为 0，隐藏的元素内有子元素或内容，可以使用溢出隐藏来隐藏子元素或内容</p>\n<p>特点：元素不可见，不占据页面空间，无法响应点击事件</p>\n<h2 id=\"positionabsolute\"><a class=\"anchor\" href=\"#positionabsolute\">#</a> position:absolute</h2>\n<p>将元素移出可视区域，需要搭配上下左右使用</p>\n<p>特点：元素不可见，不影响页面布局</p>\n<h2 id=\"clip-path\"><a class=\"anchor\" href=\"#clip-path\">#</a> clip-path</h2>\n<p>通过裁剪的形式将元素去除</p>\n<p>特点：元素不可见，占据页面空间，无法响应点击事件</p>\n<h2 id=\"总结-3\"><a class=\"anchor\" href=\"#总结-3\">#</a> 总结</h2>\n<p>最常用的还是 <code>display:none</code>  和 <code>visibility:hidden</code> ，其他的方式只能认为是奇招，它们的真正用途并不是用于隐藏元素，所以并不推荐使用它们</p>\n<h2 id=\"关于display-none-visibility-hidden-opacity-0的区别\"><a class=\"anchor\" href=\"#关于display-none-visibility-hidden-opacity-0的区别\">#</a> 关于 <code>display: none</code> 、 <code>visibility: hidden</code> 、 <code>opacity: 0</code>  的区别</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\">display: none</th>\n<th>visibility: hidden</th>\n<th>opacity: 0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">页面中</td>\n<td style=\"text-align:left\">不存在</td>\n<td>存在</td>\n<td>存在</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">重排</td>\n<td style=\"text-align:left\">会</td>\n<td>不会</td>\n<td>不会</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">重绘</td>\n<td style=\"text-align:left\">会</td>\n<td>会</td>\n<td>不一定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">自身绑定事件</td>\n<td style=\"text-align:left\">不触发</td>\n<td>不触发</td>\n<td>可触发</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">transition</td>\n<td style=\"text-align:left\">不支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">子元素可复原</td>\n<td style=\"text-align:left\">不能</td>\n<td>能</td>\n<td>不能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">被遮挡的元素可触发事件</td>\n<td style=\"text-align:left\">能</td>\n<td>能</td>\n<td>不能</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"6谈谈你对bfc的理解\"><a class=\"anchor\" href=\"#6谈谈你对bfc的理解\">#</a> 6. 谈谈你对 BFC 的理解</h1>\n<p>在 css 基础下的 css 有讲</p>\n<h1 id=\"7元素水平垂直居中的方法有哪些如果元素不定宽高呢\"><a class=\"anchor\" href=\"#7元素水平垂直居中的方法有哪些如果元素不定宽高呢\">#</a> 7. 元素水平垂直居中的方法有哪些？如果元素不定宽高呢？</h1>\n<p>根据元素标签的性质，可以分为：</p>\n<ul>\n<li>内联元素居中布局</li>\n<li>块级元素居中布局</li>\n</ul>\n<h3 id=\"内联元素居中布局\"><a class=\"anchor\" href=\"#内联元素居中布局\">#</a> 内联元素居中布局</h3>\n<p>水平居中</p>\n<ul>\n<li>行内元素可设置：text-align: center</li>\n<li>flex 布局设置父元素：display: flex; justify-content: center</li>\n</ul>\n<p>垂直居中</p>\n<ul>\n<li>单行文本父元素确认高度：height === line-height</li>\n<li>多行文本父元素确认高度：display: table-cell; vertical-align: middle</li>\n</ul>\n<h3 id=\"块级元素居中布局\"><a class=\"anchor\" href=\"#块级元素居中布局\">#</a> 块级元素居中布局</h3>\n<p>水平居中</p>\n<ul>\n<li>定宽: margin: 0 auto</li>\n<li>绝对定位 + left:50%+margin: 负自身一半</li>\n</ul>\n<p>垂直居中</p>\n<ul>\n<li>position: absolute 设置 left、top、margin-left、margin-top (定高)</li>\n<li>display: table-cell</li>\n<li>transform: translate(x, y)</li>\n<li>flex (不定高，不定宽)</li>\n<li>grid (不定高，不定宽)，兼容性相对比较差</li>\n</ul>\n<p>不知道元素宽高大小仍能实现水平垂直居中的方法有</p>\n<p>利用定位 + margin:auto、利用定位 + transform、flex 布局、grid 布局</p>\n<p>table 布局和利用定位 + margin: 负值需要知道元素宽高大小</p>\n<h1 id=\"8如何实现两栏布局右侧自适应三栏布局中间自适应呢\"><a class=\"anchor\" href=\"#8如何实现两栏布局右侧自适应三栏布局中间自适应呢\">#</a> 8. 如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？</h1>\n<h3 id=\"两栏布局\"><a class=\"anchor\" href=\"#两栏布局\">#</a> 两栏布局</h3>\n<p>两栏布局实现效果就是将页面分割成左右宽度不等的两列，宽度较小的列设置为固定宽度，剩余宽度由另一列撑满</p>\n<p>比如设置了侧边栏的 Edge 浏览器</p>\n<p>实现思路也非常的简单：</p>\n<ul>\n<li>使用 float 左浮左边栏</li>\n<li>右边模块使用 margin-left 撑出内容块做内容展示</li>\n<li>为父级元素添加 BFC，防止下方元素飞到上方内容</li>\n</ul>\n<p>直接简单粗暴就使用 flex 布局</p>\n<h3 id=\"三栏布局\"><a class=\"anchor\" href=\"#三栏布局\">#</a> 三栏布局</h3>\n<p>三栏布局按照左中右的顺序进行排列，通常中间列最宽，左右两列次之</p>\n<p>常见的为 github</p>\n<p>实现三栏布局中间自适应的布局方式有：</p>\n<ul>\n<li>两边使用 float，中间使用 margin</li>\n<li>两边使用 absolute，中间使用 margin</li>\n<li>两边使用 float 和负 margin</li>\n<li>display: table 实现</li>\n<li>flex 实现</li>\n<li>grid 网格布局</li>\n</ul>\n<h1 id=\"9说说flexbox弹性盒布局模型以及适用场景\"><a class=\"anchor\" href=\"#9说说flexbox弹性盒布局模型以及适用场景\">#</a> 9. 说说 flexbox（弹性盒布局模型）, 以及适用场景？</h1>\n<p>在 css 基础下的 css 有讲</p>\n<h1 id=\"10\"><a class=\"anchor\" href=\"#10\">#</a> 10.</h1>\n",
            "tags": [
                "计算机科学",
                "web",
                "css",
                "CSS 面试题"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/JavaScript/js%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C%E7%9F%A5%E8%AF%86/%E8%A7%A3%E5%86%B3js%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/",
            "url": "https://entropywhite.com/computer-science/web/JavaScript/js%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C%E7%9F%A5%E8%AF%86/%E8%A7%A3%E5%86%B3js%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/",
            "title": "",
            "date_published": "2022-08-03T09:57:28.613Z",
            "content_html": "<h1 id=\"解决文档已完成加载后执行-documentwrite整个-html-页面将被覆盖的问题\"><a class=\"anchor\" href=\"#解决文档已完成加载后执行-documentwrite整个-html-页面将被覆盖的问题\">#</a> 解决文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖的问题</h1>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;button onclick=\"winTest()\">按钮&lt;/button></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>function winTest()</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    var txt1 = \"This is a new window.\";</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    var txt2 = \"This is a test.\";</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    document.open(\"text/html\",\"replace\");//加上</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    document.writeln(txt1);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    document.write(txt2);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    document.close();//加上</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>&#125;</pre></td></tr></table></figure><p>该方法将关闭 open () 方法打开的文档流，并强制地显示出所有缓存的输出内容。如果您使用 write () 方法动态地输出一个文档，必须记住当你这么做的时候要调用 close () 方法，以确保所有文档内容都能显示。document.write () 不会隐式调用 document.close () 方法的，否则例 2 中将不会有 <strong>This is a new window.</strong> 内容了</p>\n<p>一旦调用了 close ()，就不应该再次调用 write ()，因为这会隐式地调用 open () 来擦除当前文档并开始一个新的文档</p>\n<p>在载入页面后，浏览器输出流自动关闭。在此之后，比如延迟脚本 [setTimeout ()] 或是 onload 执行的方法，任何一个对当前页面进行操作的 document.write () 方法将打开 — 个新的输出流，它将清除当前页面内容 (包括源文档的任何变量或值)</p>\n",
            "tags": []
        },
        {
            "id": "https://entropywhite.com/computer-science/web/html/html%E9%9D%A2%E8%AF%95/",
            "url": "https://entropywhite.com/computer-science/web/html/html%E9%9D%A2%E8%AF%95/",
            "title": "html面试题搜集",
            "date_published": "2022-07-31T09:04:00.000Z",
            "content_html": "<h1 id=\"从输入url到页面展示发生了什么\"><a class=\"anchor\" href=\"#从输入url到页面展示发生了什么\">#</a> 从输入 url 到页面展示发生了什么</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODU4NTUxNjQwMjIwNzI5MzUxI2hlYWRpbmctMA==\">经典面试题！从输入 URL 到页面展示你还不赶紧学起来？ - 掘金 (juejin.cn)</span></p>\n<h2 id=\"浏览器的多进程架构\"><a class=\"anchor\" href=\"#浏览器的多进程架构\">#</a> <strong>浏览器的多进程架构</strong></h2>\n<p>从浏览器输入 URL 到页面渲染的整个过程都是由 浏览器架构中的各个进程之间的配合完成。</p>\n<ol>\n<li>浏览器主进程：管理子进程、提供服务功能</li>\n<li>渲染进程：将 HTML、CSS、JS 渲染成界面，js 引擎 v8 和排版引擎 Blink 就在上面，他会为每一个 tab 页面创建一个渲染进程</li>\n<li>GPU 进程：本来是负责处理 3Dcss 的，后来慢慢的 UI 界面也交给 GPU 来绘制</li>\n<li>网络进程：就是负责网络请求，网络资源加载的进程</li>\n<li>插件进程：负责插件的运行的，因为插件很容易崩溃，把它放到独立的进程里不要让它影响别人</li>\n</ol>\n<p>过程大致可以描述为：</p>\n<ol>\n<li>用户输入 url, 处理输入信息，主进程开始导航，交给网络进程干活</li>\n<li>网络进程发起网络请求，其中有可能会发生重定向</li>\n<li>服务器响应 URL 之后，主进程就要通知渲染进程，你要开始干活了</li>\n<li>渲染进程准备好了，要想渲染进程提交数据，这个时间叫做提交文档</li>\n<li>渲染进程接受到数据，完成页面渲染。</li>\n</ol>\n<p><strong>具体过程</strong></p>\n<p><strong>1. 输入 url</strong></p>\n<p>用户输入 url，处理输入信息</p>\n<p>如果为非 url 结构的字符串，交给浏览器默认引擎去搜索改字符串</p>\n<p>若为 url 结构的字符串，浏览器主进程会交给 网络进程，开始干活</p>\n<p><strong>2.1 查找浏览器缓存</strong></p>\n<p>网络进程会先看看是否存在本地缓存，如果有就直接返回资源给浏览器进程，无则下一步 DNS-&gt; IP -&gt; TCP</p>\n<p><strong>2.2DNS 解析</strong></p>\n<p>网络进程拿到 url 后，先会进行 DNS 域名解析得到 IP 地址。如果请求协议是 HTTPS，那么还需要建立 TLS 连接</p>\n<p><strong>2.3 建立 TCP 连接，三次握手</strong></p>\n<p>利用 IP 地址和服务器建立 TCP 连接。连接建立之后，向服务器发送请求</p>\n<p><strong>3. 服务器响应</strong></p>\n<p>服务器收到请求信息后，会根据请求信息生成响应行、响应头、响应体，并发给网络进程。网络进程接受了响应信息之后，就开始解析响应头的内容</p>\n<p><strong>网络进程解析响应行和响应头信息的过程：</strong></p>\n<p><strong>3.1 重定向</strong></p>\n<p>如果响应行状态码为 301（永久重定向）和 302（临时），那么说明需要重定向到其他 url。这时候网络进程会从响应头中的 Location 字段里读取重定向的地址，并重新发起网络请求</p>\n<p><strong>3.2 响应数据处理</strong></p>\n<p>导航会通过请求头的 Content-type 字段判断响应体数据的类型。浏览器通过这个来决定如何显示响应体的内容。比如：若为 application/octet-stream，则会按照下载类型来处理这个请求，导航结束。若为 text/html，这就告诉浏览器服务器返回的是 html 格式，浏览器会通知渲染进程，你要干活了</p>\n<p><strong>4. 准备渲染进程</strong></p>\n<p>默认情况，每个页面一个渲染进程。但若处于同一站点（同根域名 + 协议），那么渲染进程就会复用</p>\n<p><strong>5. 提交文档</strong></p>\n<ul>\n<li>渲染进程准备好后，浏览器进程发出 “提交文档的消息”，渲染进程接受了消息之后，会跟网络进程简历传输数据的管道</li>\n<li>等数据传输完成了，渲染进程会告诉浏览器进程，确认文档提交，这时候浏览器会更新页面，安全状态，url，前进后退的历史</li>\n<li>到这里导航结束，进入渲染阶段</li>\n</ul>\n<p>当浏览器刚开始加载一个地址之后，标签页上的图标便进入了加载状态。但此时图中页面显示的依然是之前打开的页面内容，并没立即替换为百度首页的页面。因为需要等待提交文档阶段，页面内容才会被替换</p>\n<h1 id=\"iframe有哪些优缺点\"><a class=\"anchor\" href=\"#iframe有哪些优缺点\">#</a>  <code>iframe</code>  有哪些优缺点？</h1>\n<p><code>iframe</code>  是一种框架，也是一种很常见的网页嵌入方式</p>\n<h2 id=\"iframe的优点\"><a class=\"anchor\" href=\"#iframe的优点\">#</a>  <code>iframe</code>  的优点</h2>\n<ul>\n<li><code>iframe</code>  能够原封不动的把嵌入的网页展现出来</li>\n<li>如果有多个网页引用 <code>iframe</code> ，那么你只需要修改 <code>iframe</code>  的内容，就可以实现调用的每一个页面内容的更改，方便快捷</li>\n<li>网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用 <code>iframe</code>  来嵌套，可以增加代码的可重用</li>\n<li>如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由 <code>iframe</code>  来解决</li>\n</ul>\n<h2 id=\"iframe的缺点\"><a class=\"anchor\" href=\"#iframe的缺点\">#</a>  <code>iframe</code>  的缺点</h2>\n<ul>\n<li>会产生很多页面，不容易管理</li>\n<li><code>iframe</code>  框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差</li>\n<li>代码复杂，无法被一些搜索引擎索引到，这一点很关键，现在的搜索引擎爬虫还不能很好的处理 <code>iframe</code>  中的内容，所以使用 <code>iframe</code>  会不利于搜索引擎优化</li>\n<li>很多的移动设备（PDA 手机）无法完全显示框架，设备兼容性差</li>\n<li><code>iframe</code>  框架页面会增加服务器的 http 请求，对于大型网站是不可取的</li>\n<li>现在基本上都是用 Ajax 来代替 <code>iframe</code> ，所以 <code>iframe</code>  已经渐渐的退出了前端开发</li>\n</ul>\n<h1 id=\"label的作用是什么是怎么用的\"><a class=\"anchor\" href=\"#label的作用是什么是怎么用的\">#</a> label 的作用是什么？是怎么用的？</h1>\n<p>例子 1: 点击 &quot;用户名:&quot; 就可以定位光标到输入框</p>\n<pre><code>&lt;form&gt;\n&lt;label for=&quot;myid&quot;&gt;用户名:&lt;/label&gt;\n&lt;input type=&quot;text&quot; id=&quot;myid&quot; /&gt;\n&lt;/form&gt;  \n</code></pre>\n<p>例子 2: 点击 &quot;用户名:&quot; 或按键 alt+1, 都可以定位光标到输入框</p>\n<pre><code>&lt;form&gt;\n    &lt;label for=&quot;myid&quot; accesskey=&quot;1&quot;&gt;用户名:&lt;/label&gt;\n    &lt;input type=&quot;text&quot; id=&quot;myid&quot; tabindex=&quot;1&quot; /&gt;\n&lt;/form&gt;  \n</code></pre>\n<p><code>for</code>  属性功能：表示 Label 标签要绑定的 HTML 元素，你点击这个标签的时候，所绑定的元素将获取焦点</p>\n<p><code>acesskey</code>  属性<br>\n功能：表示访问 Label 标签所绑定的元素的热键，当您按下热键，所绑定的元素将获取焦点<br>\n局限性： <code>accessKey</code>  属性所设置的快捷键不能与浏览器的快捷键冲突，否则将优先激活浏览器的快捷键</p>\n<h1 id=\"html5的form如何关闭自动完成功能\"><a class=\"anchor\" href=\"#html5的form如何关闭自动完成功能\">#</a> HTML5 的 form 如何关闭自动完成功能？</h1>\n<p>HTML 的输入框可以拥有自动完成的功能，当你往输入框输入内容的时候，浏览器会从你以前的同名输入框的历史记录中查找出类似的内容并列在输入框下面，这样就不用全部输入进去了，直接选择列表中的项目就可以了<br>\n但有时候我们希望关闭输入框的自动完成功能，例如当用户输入内容的时候，我们希望使用 AJAX 技术从数据库搜索并列举而不是在用户的历史记录中搜索</p>\n<p><strong>关闭输入框的自动完成功能有 3 种方法</strong></p>\n<ol>\n<li>在 IE 的 Internet 选项菜单里的内容 -- 自动完成里面设置</li>\n<li>设置 form 的 autocomplete 为 &quot;on&quot; 或者 &quot;off&quot; 来开启或者关闭自动完成功能</li>\n<li>设置输入框的 autocomplete 为 &quot;on&quot; 或者 &quot;off&quot; 来开启或者关闭该输入框的自动完成功能</li>\n</ol>\n<h1 id=\"将-html5-看作成开放的网络平台\"><a class=\"anchor\" href=\"#将-html5-看作成开放的网络平台\">#</a> 将 HTML5 看作成开放的网络平台</h1>\n<p><strong>什么是 HTML5 的基本构件（building block）</strong></p>\n<ol>\n<li>语义 - 提供更准确地描述内容</li>\n<li>连接 - 提供新的方式与服务器通信</li>\n<li>离线和存储 - 允许网页在本地存储数据并有效地离线运行</li>\n<li>多媒体 - 在 Open Web 中，视频和音频被视为一等公民（first-class citizens）</li>\n<li>2D/3D 图形和特效 - 提供更多种演示选项</li>\n<li>性能和集成 - 提供更快的访问速度和性能更好的计算机硬件</li>\n<li>设备访问 - 允许使用各种输入、输出设备</li>\n<li>外观 - 可以开发丰富的主题</li>\n</ol>\n<h1 id=\"浏览器是怎么对html5的离线储存资源进行管理和加载的呢\"><a class=\"anchor\" href=\"#浏览器是怎么对html5的离线储存资源进行管理和加载的呢\">#</a> 浏览器是怎么对 HTML5 的离线储存资源进行管理和加载的呢</h1>\n<p>在浏览器的 html 头部加上 manifest 属性，如果是第一次访问浏览器会根据 manifest 的内容进行下载存储离线内容，如果已经访问过则从离线存储中进行加载，然后在比对服务器如果有新内容在更新离线存储<br>\n离线的情况下，浏览器就直接使用离线存储的资源</p>\n<h1 id=\"浏览器的渲染过程\"><a class=\"anchor\" href=\"#浏览器的渲染过程\">#</a> 浏览器的渲染过程</h1>\n<p>1、将获取的 html 解析成 dom 树<br>\n 2、处理 css，构成层叠样式表模型 CSSOM<br>\n3、将 dom 树和 CSSOM 合并为渲染树<br>\n 4、根据 CSSOM 将渲染树的节点布局计算<br>\n 5、将渲染树节点样式绘制到页面上</p>\n<p>在渲染的过程中是自上而下渲染，js 会阻塞页面的渲染，优先等 js 执行完成，如果在渲染的过程中改变了样式，会造成回流需要重新渲染</p>\n<h1 id=\"link和import的区别\"><a class=\"anchor\" href=\"#link和import的区别\">#</a> link 和 @import 的区别</h1>\n<p>1、从属关系区别<br>\n link 属于 html 标签，而 @import 是 css 提供的<br>\n 2、加载顺序区别<br>\n页面被加载时，link 会同时被加载，而 @import 引用的 css 会等到页面被加载完再加载<br>\n 3、兼容性区别<br>\n import 只在 IE5 以上才能识别，而 link 是 html 标签，无兼容问题<br>\n 4、dom 可操作性区别<br>\n可以通过 JS 操作 DOM ，插入 link 标签来改变样式；由于 DOM 方法是基于文档的，无法使用 @import 的方式插入样式<br>\n 5、权重区别<br>\n如果已经存在相同样式，@import 引入的这个样式将被该 CSS 文件本身的样式层叠掉，表现出 link 方式的样式权重高于 @import 的权重这样的直观效果<br>\n（简而言之，link 和 @import，谁写在后面，谁的样式就被应用，后面的样式覆盖前面的样式。）</p>\n<h1 id=\"src-和-href-的区别\"><a class=\"anchor\" href=\"#src-和-href-的区别\">#</a>  <code>src</code>  和  <code>href</code>  的区别</h1>\n<p>一句话概括:   <code>src</code>  是引入资源的  <code>href</code>  是跳转  <code>url</code>  的</p>\n<ol>\n<li><code>src</code>  用于替换当前元素， <code>href</code>  用于在当前文档和引用资源之间确立联系</li>\n<li><code>src</code>  是 source 的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求 <code>src</code>  资源时会将其指向的资源下载并应用到文档内，例如 <code>js</code>  脚本， <code>img</code>  图片和 <code>frame</code>  等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将 <code>js</code>  脚本放在底部而不是头部</li>\n<li><code>href</code>  是 Hypertext Reference 的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接。如果我们在文档中添加那么浏览器会识别该文档为 <code>css</code>  文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用 link 方式来加载 <code>css</code> ，而不是使用 @import 方式</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "web",
                "html",
                "HTML"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/css/css%E5%9F%BA%E7%A1%80/CSS/",
            "url": "https://entropywhite.com/computer-science/web/css/css%E5%9F%BA%E7%A1%80/CSS/",
            "title": "CSS注释规范",
            "date_published": "2022-07-18T09:15:00.000Z",
            "content_html": "<h1 id=\"css规则样式\"><a class=\"anchor\" href=\"#css规则样式\">#</a> CSS 规则样式</h1>\n<p>这是一段  <code>css</code>  语句</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">h1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>20px</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中，h1 是你所需对其 html 元素设置样式的元素，统称选择器，大括号内的内容会为其提供样式</p>\n<p><code>color:red</code>  是一个键值对，属性：值，每个键值对以分号隔开</p>\n<p>为了让你的代码可读性更高，也方便观看，建议将每个键值对独占一行</p>\n<h1 id=\"css三大特性\"><a class=\"anchor\" href=\"#css三大特性\">#</a> CSS 三大特性</h1>\n<h2 id=\"css层叠性\"><a class=\"anchor\" href=\"#css层叠性\">#</a> CSS 层叠性</h2>\n<p>所谓层叠就是多次 CSS 样式叠加</p>\n<p>浏览器处理冲突时的一个能力，如果一个属性通过两个相同选择器设置到同一个元素上，那么属性会被层叠掉，如先给某个标签指定了内部文字颜色为红色，接着又指定为颜色，此时打开 F12，检查，会发现有一个属性被划掉了，这就是样式冲突</p>\n<p>出现冲突情况下，CSS 会以最后样式为准</p>\n<h2 id=\"css继承性\"><a class=\"anchor\" href=\"#css继承性\">#</a> CSS 继承性</h2>\n<p>所谓继承就是 CSS 的子标签会继承父标签的某些样式，如文本类</p>\n<p>在制作网页时，打开 F12，在元素 - 样式里，会发现有属性来自 <code>继承xxxx</code></p>\n<p>恰当的使用继承可以简化代码，降低 CSS 样式的复杂性</p>\n<h2 id=\"css优先级\"><a class=\"anchor\" href=\"#css优先级\">#</a> CSS 优先级</h2>\n<p>定义 CSS 样式时，会发现有两个或更多规则应用同一元素上，这时就会出现属性优先级问题</p>\n<p>不过，需要注意的是</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>继承样式的权重为0。在嵌套解构中，不管父元素样式权重多大，子元素继承时，都会为0，子元素定义的样式会覆盖继承的样式。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>行内样式优先高，应用style属性时，其权重非常高，比选择器还大的优先级</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>权重相同时，css遵循就近原则。越靠近元素的样式优先级越高，换种说法，排最后的样式优先级最大</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>css定义了一个!important命令，该命令被赋予最大优先级</pre></td></tr></table></figure><h2 id=\"css特殊性specificity\"><a class=\"anchor\" href=\"#css特殊性specificity\">#</a> CSS 特殊性 (Specificity)</h2>\n<p>关于 CSS 权重，需要有一套公式去计算，就是 CSS Specificity，又称 CSS 特性或非凡性，它是一个衡量 CSS 值优先级的一个标准</p>\n<p>Specificity 用一个四位的数字串 (CSS2 是三位) 表示，值从左到右，左最大，一位比一位大，数位之间没有进制，级别之间不可逾越</p>\n<p>权重是可以叠加的</p>\n<table>\n<thead>\n<tr>\n<th>继承或 * 的贡献</th>\n<th>0,0,0,0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>每个元素（标签）贡献值</td>\n<td>0,0,0,1</td>\n</tr>\n<tr>\n<td>每个类，伪类贡献值</td>\n<td>0,0,1,0</td>\n</tr>\n<tr>\n<td>每个 ID 贡献值</td>\n<td>0,1,0,0</td>\n</tr>\n<tr>\n<td>每个行内样式贡献值</td>\n<td>1,0,0,0</td>\n</tr>\n<tr>\n<td>值每个！important 贡献</td>\n<td>无穷大</td>\n</tr>\n</tbody>\n</table>\n<p>举点栗子</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>div ul li\t0,0,0,3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.nav ul li\t0,0,1,2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a:hover\t\t0,0,1,1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.nav a\t\t0,0,1,1</pre></td></tr></table></figure><h2 id=\"需要注意的是\"><a class=\"anchor\" href=\"#需要注意的是\">#</a> 需要注意的是</h2>\n<p>数位之间没有进制，指的是 0.0.0.5 + 0.0.0.5 = 0.0.0.10 而不是 0.0.1.0</p>\n<p>权重是优先级的算法，层叠是优先级的表现</p>\n<h2 id=\"总结优先级\"><a class=\"anchor\" href=\"#总结优先级\">#</a> 总结优先级</h2>\n<p>1. 使用！important 声明的规则</p>\n<p>2. 内嵌在 html 的 style 样式</p>\n<p>3. 使用 ID 选择器</p>\n<p>4. 使用类、属性、伪元素和伪类选择器</p>\n<p>5. 使用元素选择器</p>\n<p>6. 只包含一个通用选择器</p>\n<p>7. 同一类选择器遵循就近原则</p>\n<h1 id=\"css样式表\"><a class=\"anchor\" href=\"#css样式表\">#</a> CSS 样式表</h1>\n<p>有三种样式表</p>\n<h2 id=\"行内样式\"><a class=\"anchor\" href=\"#行内样式\">#</a> 行内样式</h2>\n<p>又称内联样式，通过在 <code>html</code>  标签内部直接写入</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>标签名</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\">键值对</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>标签名</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"内部样式表\"><a class=\"anchor\" href=\"#内部样式表\">#</a> 内部样式表</h2>\n<p>写在头部 <code>title</code>  标签下方，用 <code>style</code>  标签包裹样式，在 html5 中不需要写 <code>type=&quot;text/css&quot;</code></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tcss样式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"外部样式表\"><a class=\"anchor\" href=\"#外部样式表\">#</a> 外部样式表</h2>\n<p>又称链接样式表，在 <code>html</code>  头部标签 <code>head</code>  里写入</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>htad</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>css文件路径<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>htad</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>link</code>  是单标签， <code>href</code>  定义 <code>css</code>  文件存放地址， <code>type</code>  定义文件类型， <code>rel</code>  定义文档之间的关系，上述中表示一个样式表文件</p>\n<h2 id=\"三种表总结\"><a class=\"anchor\" href=\"#三种表总结\">#</a> 三种表总结</h2>\n<p>行内样式表书写方便，权重高，但没有实现样式和解构分离，只控制一个标签，使用也较少</p>\n<p>内部样式表实现了部分样式和解构分离，但还是没完全分离，控制一整个页面，使用率一般</p>\n<p>外部样式表则完全实现了样式和解构分离，控制多个网页的样式，使用最多</p>\n<h1 id=\"css选择器\"><a class=\"anchor\" href=\"#css选择器\">#</a> CSS 选择器</h1>\n<h2 id=\"标签选择器\"><a class=\"anchor\" href=\"#标签选择器\">#</a> 标签选择器</h2>\n<p>这是一段标签选择器</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">p</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&lt;p>所有P标签都适用css&lt;/p></pre></td></tr></table></figure><p>标签选择器会将所有该标签相同名字的 html 标签应用其样式，优点是可以为该所有标签应用样式，缺点就是没法单独设置样式</p>\n<p>标签选择器通常用来重置某些标签的样式，标签选择器的效率也不是很高，但要好过通配选择器</p>\n<h2 id=\"id选择器\"><a class=\"anchor\" href=\"#id选择器\">#</a> id 选择器</h2>\n<p>这是一段 id 选择器 css 语句</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">#ming</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&lt;p id=<span class=\"token string\">\"ming\"</span>>此内容应用&lt;/p></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&lt;p>此内容不应用&lt;/p></pre></td></tr></table></figure><p>id 选择器以 # 开头，在 html 标签中以 id 属性设置样式，给某个指定的标签添加指定的样式</p>\n<p>id 选择器只能对一个元素生效，同一个页面里不允许出现两个 id 相同的元素</p>\n<p>理论上 id 选择器是效率最高的选择器。但是由于它只能选一个元素，特异性太高，实际开发中也很少在 CSS 里使用 id 选择器，也正是因为 id 选择器特异性高，所以在 js 里使用 id 选择器的比较常见</p>\n<h2 id=\"类选择器\"><a class=\"anchor\" href=\"#类选择器\">#</a> 类选择器</h2>\n<p>这是一段类选择器 css 语句</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.ming</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&lt;p class=<span class=\"token string\">\"ming\"</span>>此内容应用&lt;/p></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&lt;p>此内容不应用&lt;/p></pre></td></tr></table></figure><p>类选择器统称 class 选择器，以。开头，给不同的标签添加相同的样式，在 html 标签中以 class 属性设置样式，在 css 中可以设置同名的 class 选择器（尽管一般不会这样）</p>\n<p>类选择器应该是样式开发中应用最多的选择器</p>\n<h2 id=\"多类名选择器\"><a class=\"anchor\" href=\"#多类名选择器\">#</a> 多类名选择器</h2>\n<p>这是一段多类名选择器  <code>css</code>  语句</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.ming</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">.ren</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 18px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&lt;p class=<span class=\"token string\">\"ming\"</span>>此内容只应用.ming的css语句&lt;/p></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>&lt;p class=<span class=\"token string\">\"ming ren\"</span>>此内容全部应用了&lt;/p></pre></td></tr></table></figure><p>多类名选择器和类选择器差不多，只是在基础上多添加不同类选择器  <code>css</code>  属性，多类名在复杂的布局中还是挺实用的</p>\n<h2 id=\"通配符选择器\"><a class=\"anchor\" href=\"#通配符选择器\">#</a> 通配符选择器</h2>\n<p>这是一段通配符选择器  <code>css</code>  语句</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">*</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/* 清除边框 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通配符选择器也叫全部选择器，将所有标签都应用其样式</p>\n<p>在实际开发中一般不建议使用通配选择器</p>\n<h2 id=\"属性选择器\"><a class=\"anchor\" href=\"#属性选择器\">#</a> 属性选择器</h2>\n<p>属性选择器比较好理解，就是通过 DOM 的属性来选择该 DOM 节点。属性选择器是用中括号 “[]” 包裹</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">a[href]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这条选择器就可以让所有带 href 属性的 a 标签字体都变成红色</p>\n<p>属性选择器有以下几种形式</p>\n<p>[href]，用来选择带有括号内属性的元素，如上述的 a [href]</p>\n<p>[href=xxx]，用来选择有 href 属性且属性值等于 xxx 的元素，如选择所有文本类型的输入框</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">&lt;input type=\"text\" value=\"\"/></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// CSS：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>input[type=text]<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>[href~=xxx]，用来选择 href 属性中包含 xxx 的元素</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">&lt;input class=\"input text\" type=\"text\" value=\"\"/></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// CSS：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>input[class~=input]<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>[href|=xxx]，用来选择属性值为 xxx 或 xxx- 开头的元素</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">&lt;div class=\"article\">我会生效&lt;/div></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;div class=\"article-title\">我会生效&lt;/div></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;div class=\"article-content\">我会生效&lt;/div></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;div class=\"article_footer\">我不会生效&lt;/div></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>// CSS：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>div[class|=article]<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>[href^=xxx]，用来选择以 xxx 开头的元素，用正则去找复合的属性值</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">&lt;div class=\"article\">我会生效&lt;/div></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;div class=\"article-title\">我会生效&lt;/div></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;div class=\"article-content\">我会生效&lt;/div></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;div class=\"article_footer\">我会生效&lt;/div></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>// CSS：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>div[class^=article]<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>[href$=xxx]，用来选择属性值以 xxx 结尾的元素，用正则去找复合的属性值</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">&lt;button class=\"btn btn-disabled\">我会生效&lt;/button></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;select class=\"select select-disabled city-select\">我不会生效&lt;/select></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;input class=\"input input-disabled\" value=\"我会生效\"/></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>// CSS：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>[class$=disabled]<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>[href*=xxx]，用来选择属性中包含 xxx 字符的所有元素，用正则去找复合的属性值</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">&lt;button class=\"btn btn-disabled\">我会生效&lt;/button></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;select class=\"select select-disabled city-select\">我会生效&lt;/select></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;input class=\"input input-disabled\" value=\"我会生效\"/></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>// CSS：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>[class$=disabled]<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>属性选择器要做文本的匹配，所以效率也不会高<br>\n在使用属性选择器时，尽量要给它设置上生效的范围，如果只用了个 [href] 相当于要在所有元素里找带 href 的元素，效率会很低。如果用 a [href] 会好的多，如果用 .link [href] 就更好了<br>\n属性选择器很灵活，如果能使用 CSS 代替 JS 解决一些需求，可以不用太纠结性能的问题，用 JS 实现也一样要耗费资源的</p>\n<h2 id=\"组合选择器\"><a class=\"anchor\" href=\"#组合选择器\">#</a> 组合选择器</h2>\n<p>组合选择器是将多个基本选择器通过一定规则连接起来的一个复杂选择器</p>\n<h3 id=\"后代选择器\"><a class=\"anchor\" href=\"#后代选择器\">#</a> 后代选择器</h3>\n<p>后代选择器表示选择器 1 容器下面的所有满足选择器 2 要求的页面元素，选择器 1 和选择器 2 之间需要空格，例子中就是 paragraph 里的所有 div 标签</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token selector\">.paragraph div</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>CSS选择器<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    我是container容器下的文本。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>paragraph<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        我是container容器下，第一个paragraph容器中的文本。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>paragraph<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        我是container容器下，第二个paragraph容器中的文本。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            我是container容器下，第二个paragraph容器下div中的文本。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                我是container容器下，第二个paragraph容器下div容器下test容器下的文本。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            我是contianer容器下，p容器中的文本。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                我是container容器下，p容器下div容器中的文本。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>后代选择器通常用来限制选择器生效的范围，防止因为选择器使用不当或者对元素命名出现重复造成的样式冲突</p>\n<h3 id=\"子代选择器\"><a class=\"anchor\" href=\"#子代选择器\">#</a> 子代选择器</h3>\n<p>子代选择器表示选择选择器 1 下直接包含的选择器 2，而不包含间接包含的选择器 2，选择器 1 和选择器 2 之间通过＞号连接</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token selector\">.container > strong</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>CSS选择器<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    我是container容器下的文本。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>container容器下的加强<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>div容器下的加强<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>子元素选择器的作用和后代选择器相似，也是用来限制选择器生效的范围</p>\n<p>它和后代选择器不同的是：<br>\n1. 子元素选择器只匹配子元素，不会匹配后代元素。在有确定的父子关系时，尽量使用子元素选择器，效率会比后代选择器高。<br>\n2. 使用子元素选择器还可以避免对非直接后代的样式影响，在只想给子元素设置样式时会比后代选择器安全。</p>\n<h3 id=\"兄弟选择器\"><a class=\"anchor\" href=\"#兄弟选择器\">#</a> 兄弟选择器</h3>\n<p>兄弟选择器表示选中与选择器 1 同级的且在选择器 1 后面的所有的选择器 2（不包括自身），选择器 1 和选择器 2 之间通过～符号连接</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token selector\">.selected ~ li</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>CSS选择器<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>第一项<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selected<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>第二项<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>第三项<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>第四项<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>第五项<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>兄弟选择器（包括相邻兄弟选择器）中都是只能向后选择，如果需要向前选择，就只能给前面的元素指定上 class，再用类选择器来实现了</p>\n<h3 id=\"相邻兄弟选择器\"><a class=\"anchor\" href=\"#相邻兄弟选择器\">#</a> 相邻兄弟选择器</h3>\n<p>相邻兄弟选择器表示与选择器 1 同级的下一个相邻的选择器 2（同样不包括自身），选择器 1 和选择器 2 之间通过 + 号连接</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token selector\">.selected + li</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>CSS选择器<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>第一项<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selected<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>第二项<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>第三项<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>第四项<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>第五项<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>相邻兄弟选择器通常有两类用处：<br>\n1. 用于自动调整占位，比如后面在布局的时候，有 header 和没 header 情况下内容区的高度会不同，就可以使用相邻兄弟选择器来控制内容区的高度<br>\n 2. 相邻兄弟选择器的第二种用法是用来控制相同元素中间的间隔，比如在 List 组件开发时，每个 li 元素之间要加上分割线的需求就会通过相邻兄弟选择器来实现</p>\n<h3 id=\"复合选择器\"><a class=\"anchor\" href=\"#复合选择器\">#</a> 复合选择器</h3>\n<p>复合选择器表示选择同时满足选择器 1 和选择器 2 的元素，选择器 1 和选择器 2 之间没有任何符号连接，这种选择器一般用在类选择器与基础选择器的复合中</p>\n<p>这个选择器用的比较少</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token selector\">.selected</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token selector\">.bigger</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> large<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token selector\">.selected.bigger</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> larger<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>CSS选择器<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>第一项<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selected<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>第二项<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bigger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>第三项<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bigger selected<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>第四项<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>第五项<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>只有同时满足两个选择器要求的元素才会被选中</p>\n<h3 id=\"并集选择器\"><a class=\"anchor\" href=\"#并集选择器\">#</a> 并集选择器</h3>\n<p>并集选择器是为了合并类似的样式，可以把选择器不同但样式相同的 CSS 语法块做合并。并集选择器用逗号分割多个选择器，表示该样式对选择器 A 和选择器 B 所选择的元素都生效</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 写得多 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">h1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">h2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token selector\">h3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/* 不仅写得少还方便观看 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token selector\">h1,h2,h3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"伪类选择器\"><a class=\"anchor\" href=\"#伪类选择器\">#</a> 伪类选择器</h2>\n<p>这是个特殊的选择器，用于标记一些特殊状态和具有筛选功能</p>\n<h3 id=\"标记状态的伪类\"><a class=\"anchor\" href=\"#标记状态的伪类\">#</a> 标记状态的伪类</h3>\n<ul>\n<li><strong>:link</strong>，选取未访问过的超链接元素。如果我们注意过搜索引擎的结果的话，它里面的链接只要点过的就会变色，从而标记哪个链接是访问过的</li>\n<li><strong>:visited</strong>，选取访问过的超链接元素。和第一条相反，:visited 是用来标记哪个链接是已经访问过的，防止重复点击</li>\n<li><strong>:hover</strong>，选取鼠标悬停的元素。这个伪类经常用在 PC 端，当鼠标放在一个元素上时，可以用 :hover 来控制鼠标悬停的样式。这个伪类必须放在前两位后面。因为在移动端里没有鼠标的概念，所以移动端里很少用这个伪类</li>\n<li><strong>:active</strong>，选取点中的元素。这个伪类的作用在刚才提到过了，当我们希望按钮有操作反馈的时候，可以用它来标记操作反馈的样式。这个伪类必须放在 :hover 伪类后面。当然这个伪类也是可以通用的，并不是只能用在按钮上</li>\n<li><strong>:focus</strong>，选取获得焦点的元素。这个伪类用来标识获得焦点的元素，如搜索框在聚焦的时候有个比较明显的边框，方便用户知道当前在可输入的状态</li>\n<li><strong>:target</strong>，选取可用于活动的 target 元素的样式，如页内跳转（锚点链接）时，可以将被跳转的内容改变</li>\n</ul>\n<h3 id=\"筛选功能的伪类\"><a class=\"anchor\" href=\"#筛选功能的伪类\">#</a> 筛选功能的伪类</h3>\n<ul>\n<li><strong>:empty</strong>，选取没有子元素的元素。比如选择空的 span，就可以用 span:empty 选择器来选择。这里要注意元素内有空格的话也不能算空，不会被这个伪类选中</li>\n<li><strong>:checked</strong>，选取勾选状态的 input 元素， 只对 radio 和 checkbox 生效</li>\n<li><strong>:disabled</strong>，选取禁用的表单元素</li>\n<li><strong>:first-child</strong>，选取当前选择器下第一个元素</li>\n<li><strong>:last-child</strong>，和 first-child 相反，选取当前选择器下最后一个元素</li>\n<li><strong>:nth-child(odd/even)</strong>，选择奇数 / 偶数的元素</li>\n<li><strong>:nth-child(n/an+b)</strong>，选取指定位置的元素。这个伪类是有参数的，参数可以支持 an+b 的形式，这里 a 和 b 都是可变的，a 是 n 的倍数，b 是在 a 的倍数基础上加几，n 从 0 起。使用这个伪类可以做到选择第几个，或者选择序号符合 an+b 的所有元素。比如使用 li:nth-child (2n+1)，就可以选中 li 元素中序号是 2 的整数倍加 1 的所有元素，也就是第 1、3、5、7、9、2n+1 个 li 元素，支持奇数 / 偶数</li>\n<li><strong>:nth-last-child(n/an+b)</strong>，这个伪类和 nth-child 相似，只不过在计数的时候，这个伪类是从后往前计数。支持奇数 / 偶数</li>\n<li><strong>:only-child</strong>，选取唯一子元素。如果一个元素的父元素只有它一个子元素，这个伪类就会生效。如果一个元素还有兄弟元素，这个伪类就不会对它生效</li>\n<li><strong>:only-of-type</strong>，选取唯一的某个类型的元素。如果一个元素的父元素里只有它一个当前类型的元素，这个伪类就会生效。这个伪类允许父元素里有其他元素，只要不和自己一样就可以</li>\n</ul>\n<h2 id=\"伪元素选择器\"><a class=\"anchor\" href=\"#伪元素选择器\">#</a> 伪元素选择器</h2>\n<p>这也是个特殊的选择器，伪元素选择器是用于向某些元素设置特殊效果。伪元素选择器选中的并不是真实的 DOM 元素</p>\n<p>之所以称为伪元素，是因为他们不是真正的页面元素，html 没有对应的元素，但其用法和表现行为与真正的页面元素一样，可以对其使用诸如页面元素一样的  <code>css</code>  样式，表面看上去貌似是页面的某些元素来展示，实际上是  <code>css</code>  样式展现的行为</p>\n<ul>\n<li><strong>::first-line</strong>，为某个元素的第一行文字使用样式</li>\n<li><strong>::first-letter</strong>，为某个元素中的文字的首字母或第一个字使用样式</li>\n<li><strong>::before</strong>，在某个元素之前插入一些内容</li>\n<li><strong>::after</strong>，在某个元素之后插入一些内容</li>\n<li><strong>::selection</strong>，对光标选中的元素添加样式</li>\n</ul>\n<p>伪元素选择器构造的元素是虚拟的，所以不能用 JS 去操作它<br>\n如果同时使用了 before 和 first-letter 两个伪类，第一个字是要从 before 里的内容开始算起的，如果 before 里面的内容是一个非文本元素，那 first-letter 也会作用在这个非文本元素上，但是不一定能生效<br>\n first-line 和 first-letter 不适用于内联元素，在内联元素中这两个选择器都会失效<br>\n在 CSS3 中，规定了伪类用一个冒号（:）表示，伪元素用两个冒号表示（::）。但除了 selection，其余四个伪元素选择器已经在 CSS2 中存在且和伪类用的是一样的单冒号表示的。为了向下兼容，现在的浏览器中伪元素选择器用单冒号和双冒号都可以。在没有兼容问题的情况下，还是建议大家按着新的 CSS3 标准来开发</p>\n<h2 id=\"选择器的一些提示\"><a class=\"anchor\" href=\"#选择器的一些提示\">#</a> 选择器的一些提示</h2>\n<p>多类名选择器的类名之间用空格隔开</p>\n<p>长名称或词组可以用中横线来命名</p>\n<p>不建议使用下划线 _ 来命名</p>\n<p>尽量使用英文来命名</p>\n<h1 id=\"css尺寸\"><a class=\"anchor\" href=\"#css尺寸\">#</a> CSS 尺寸</h1>\n<p>宽与高的设置</p>\n<p>设置 <code>px</code>  等尺寸为固定长度</p>\n<p>当设置为百分比时候，会变成宽高自适应</p>\n<p>设置最大和最小值可以定义元素缩放最大最小值</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 所有 max 和 min 属性不包括填充、边框和页边距 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0px/50%</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">max-height</span><span class=\"token punctuation\">:</span> 0px</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">min-height</span><span class=\"token punctuation\">:</span> 0px</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0px</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 0px</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 0px</pre></td></tr></table></figure><h1 id=\"css字体样式\"><a class=\"anchor\" href=\"#css字体样式\">#</a> CSS 字体样式</h1>\n<h2 id=\"font-size\"><a class=\"anchor\" href=\"#font-size\">#</a> font-size</h2>\n<p>用于设置字体大小，具有四种属性值</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">absolute-size</span><span class=\"token punctuation\">:</span>绝对大小</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>medium<span class=\"token punctuation\">;</span>\t//默认</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>large<span class=\"token punctuation\">;</span>\t//大号</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>x-large<span class=\"token punctuation\">;</span>\t//更大号</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>xx-large<span class=\"token punctuation\">;</span>\t//特大号</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>small<span class=\"token punctuation\">;</span>\t//小号</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>x-small<span class=\"token punctuation\">;</span>\t//更小号</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>xx-small<span class=\"token punctuation\">;</span>\t//特小号</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token property\">relative-size</span><span class=\"token punctuation\">:</span>相对大小</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>largeer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>smaller<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token property\">length</span><span class=\"token punctuation\">:</span>相对长度</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>12px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>1em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>1rem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token property\">length</span><span class=\"token punctuation\">:</span>绝对长度</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>1in<span class=\"token punctuation\">;</span>\t//英寸</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>1cm<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>1mm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>1pt<span class=\"token punctuation\">;</span>\t//点</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token property\">percentage</span><span class=\"token punctuation\">:</span>百分比</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>50%<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>绝对大小中的 x 可以理解为衣服尺码 X XL XXL，多一个 x 尺寸大一圈，而且我发现了个有趣的地方，在浏览器中的 F12 里设置绝对大小时，会出现 ``xxx-large`，但编辑器里并没有显示这个值，当然，输入这个值是奏效的，或许是用不上那么大的字号把</p>\n<p>长度值有很多种单位，最常用的莫过于 <code>px</code>  和 <code>em</code> ，这两个都是相对长度单位，像素 <code>px</code>  是基于显示器屏幕分辨率而言的， <code>em</code>  则相对于当前对象内文本的字体尺寸。rem 是 CSS3 中新增的相对长度单位，rem 设定字体大小时仍任是相对大小，但相对的是 HTML 根元素，这单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应，同时这单位适用于适配分辨率相差较大的设备</p>\n<p>任意浏览器的默认字体高都是 16px。所有未经调整的浏览器都符合: 1em=16px。那么 12px=0.75em，10px=0.625em。为了简化 font-size 的换算，需要在 <code>css</code>  中的 body 选择器中声明 Font-size=62.5%，这就使 <code>em</code>  值变为 16px*62.5%=10px，这样 12px=1.2em，10px=1em，也就是说只需要将你的原来的 <code>px</code>  数值除以 10，然后换上 <code>em</code>  作为单位就行了</p>\n<h2 id=\"font-family\"><a class=\"anchor\" href=\"#font-family\">#</a> font-family</h2>\n<p>用于设置字体，常用的字体有宋体、微软雅黑、黑体等，字体可参考 word 文档里的字体</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"微软雅黑\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 CSS 中设置字体名称时，直接写中文是没问题的，但在文件编码不匹配时会产生乱码，同时也可能不会生效，这时候需要使用英文来代替或者使用 Unicode 编码（太麻烦）</p>\n<table>\n<thead>\n<tr>\n<th>字体一览表</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>宋体</td>\n<td><code>SimSun</code></td>\n</tr>\n<tr>\n<td>黑体</td>\n<td><code>SimHei</code></td>\n</tr>\n<tr>\n<td>微软雅黑</td>\n<td><code>Microsoft Yahei</code></td>\n</tr>\n<tr>\n<td>微软正黑体</td>\n<td><code>Microsoft JhengHei</code></td>\n</tr>\n<tr>\n<td>楷体</td>\n<td><code>KaiTi</code></td>\n</tr>\n<tr>\n<td>新宋体</td>\n<td><code>NSimSun</code></td>\n</tr>\n<tr>\n<td>仿宋</td>\n<td><code>FangSong</code></td>\n</tr>\n<tr>\n<td>华文黑体</td>\n<td><code>STHeiti</code></td>\n</tr>\n<tr>\n<td>华文细黑</td>\n<td><code>STXihei</code></td>\n</tr>\n<tr>\n<td>华文楷体</td>\n<td><code>STKaiti</code></td>\n</tr>\n<tr>\n<td>华文宋体</td>\n<td><code>STSong</code></td>\n</tr>\n<tr>\n<td>华文仿宋</td>\n<td><code>STFangsong</code></td>\n</tr>\n<tr>\n<td>华文中宋</td>\n<td><code>STZhongsong</code></td>\n</tr>\n<tr>\n<td>华文彩云</td>\n<td><code>STCaiyun</code></td>\n</tr>\n<tr>\n<td>华文琥珀</td>\n<td><code>STHupo</code></td>\n</tr>\n<tr>\n<td>华文新魏</td>\n<td><code>STXinwei</code></td>\n</tr>\n<tr>\n<td>华文隶书</td>\n<td><code>STLiti</code></td>\n</tr>\n<tr>\n<td>华文行楷</td>\n<td><code>STXingkai</code></td>\n</tr>\n<tr>\n<td>方正舒体</td>\n<td><code>FZShuTi</code></td>\n</tr>\n<tr>\n<td>方正姚体</td>\n<td><code>FZYaoti</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"font-weight\"><a class=\"anchor\" href=\"#font-weight\">#</a> font-weight</h2>\n<p>用于设置字体粗细</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> bold/bolder/lighter/100（整数倍）</pre></td></tr></table></figure><h2 id=\"font-style\"><a class=\"anchor\" href=\"#font-style\">#</a> font-style</h2>\n<p>用于设置字体样式</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">font-style</span><span class=\"token punctuation\">:</span> italic/oblique</pre></td></tr></table></figure><p>两个都是设置字体倾斜</p>\n<h2 id=\"font\"><a class=\"anchor\" href=\"#font\">#</a> font</h2>\n<p>这个是一次性设置上述四个属性的</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">font</span><span class=\"token punctuation\">:</span> font-style font-weight font-size/line-height font-family</pre></td></tr></table></figure><p>顺序固定死，如果更改顺序会导致属性不适用，前两个可以不要，但后两个一定需要</p>\n<h1 id=\"css文本属性\"><a class=\"anchor\" href=\"#css文本属性\">#</a> CSS 文本属性</h1>\n<h2 id=\"color文本颜色\"><a class=\"anchor\" href=\"#color文本颜色\">#</a> color: 文本颜色</h2>\n<p>用于设置文本的颜色，取值方式有三种</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1.预定义的颜色</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>2.十六进制</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #ff6600</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>3.RGB代码 两种形式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>100%<span class=\"token punctuation\">,</span>0%<span class=\"token punctuation\">,</span>0%<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0.5<span class=\"token punctuation\">)</span> <span class=\"token comment\">/* a 其实就是透明度 alpha，0 到 1 透明到不透明 */</span></pre></td></tr></table></figure><p>十六进制颜色具体可查<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzLWNvbG9yc2Z1bGwuaHRtbA==\"> CSS 颜色十六进制值 | 菜鸟教程 (runoob.com)</span></p>\n<p>rgb 颜色具体可查<span class=\"exturl\" data-url=\"aHR0cDovL3pob25nZ3Vvc2UuY29tLyN5dWhvbmc=\">玉红 - 中国色 - 中国传统颜色 (zhongguose.com)</span></p>\n<h2 id=\"direction文本方向\"><a class=\"anchor\" href=\"#direction文本方向\">#</a> direction: 文本方向</h2>\n<p>用于设置文本的方向</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">direction</span><span class=\"token punctuation\">:</span> ltr/rtl <span class=\"token comment\">/* 其实就是左到右 / 右到左的缩写 */</span></pre></td></tr></table></figure><p>你会发现，文字跑右边了，可我想要文字倒着写呢？还真有</p>\n<p>搭配此属性使用的属性： <code>unicode-bidl</code></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 简单的右对齐 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;div style=<span class=\"token string\">\"direction:rtl;text-align: initial;\"</span>>this is a test&lt;/div></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 倒着写 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&lt;div style=<span class=\"token string\">\"direction:rtl;unicode-bidi:bidi-override;text-align: initial;\"</span>></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tthis is a test</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&lt;/div></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/* 被加了 embed 的正常写 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>&lt;div style=<span class=\"token string\">\"direction:rtl;unicode-bidi:bidi-override;text-align: initial;\"</span>></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tthis &lt;span style=<span class=\"token string\">\"unicode-bidi:embed;\"</span>>is a&lt;/span> test</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&lt;/div></pre></td></tr></table></figure><p>浏览器通常根据 <code>lang</code>  属性或者特殊的 <code>font-family</code>  决定书写方向，但是如果一句话中同时包括两种方向的文案的时候就需要用到  <code>unicode-bidi</code>  属性了</p>\n<p>你会发现，单纯的设置 direction 属性的英文只有文字左还是右，不会倒着写，只有设置了 <code>unicode-bidl</code>  才能倒着写。其实这和语言有关，对于阿拉伯语和希伯来语自动就好使了，单个数字、字母浏览器不能判断语言就用 <code>rtl</code>  默认设置了，英语等还是使用默认的左到右的方式，只能用 <code>unicode-bidi</code>  重写，也就是说你把 <code>lang</code>  声明为阿拉伯语（ <code>ar</code> ）的话，就不需要 <code>unicode-bidl</code></p>\n<h2 id=\"overflow文本溢出\"><a class=\"anchor\" href=\"#overflow文本溢出\">#</a> overflow: 文本溢出</h2>\n<p>用于设置文本溢出处理</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> visible/hiddle/scroll/auto <span class=\"token comment\">/* 默认溢出 / 溢出内容不可见 / 溢出内容以滚动条显示 / 如果有溢出则以滚动条显示 */</span></pre></td></tr></table></figure><h2 id=\"letter-spacing字符间距\"><a class=\"anchor\" href=\"#letter-spacing字符间距\">#</a> letter-spacing: 字符间距</h2>\n<p>用于设置字符间距，就是字与字之间的距离（同 word 的字符缩进）</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">letter-spacing</span><span class=\"token punctuation\">:</span> 2px <span class=\"token comment\">/* 可设负数 */</span></pre></td></tr></table></figure><h2 id=\"word-spacing字段间距\"><a class=\"anchor\" href=\"#word-spacing字段间距\">#</a> word-spacing: 字段间距</h2>\n<p>用于设置每段字之间的距离（空格隔开算一段字）</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">word-spacing</span><span class=\"token punctuation\">:</span> 2px <span class=\"token comment\">/* 可设负数 */</span></pre></td></tr></table></figure><h2 id=\"word-wrap强制换行css3\"><a class=\"anchor\" href=\"#word-wrap强制换行css3\">#</a> word-wrap: 强制换行 (css3)</h2>\n<p>用于设置一段字超过规定长度后进行换行</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">word-wrap</span><span class=\"token punctuation\">:</span> break-word</pre></td></tr></table></figure><h2 id=\"word-break非中日韩文本的换行规则css3\"><a class=\"anchor\" href=\"#word-break非中日韩文本的换行规则css3\">#</a> word-break: 非中日韩文本的换行规则 (css3)</h2>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">word-break</span><span class=\"token punctuation\">:</span> keep-all/break-all <span class=\"token comment\">/* 单词换行 / 类似自动换行 */</span></pre></td></tr></table></figure><h2 id=\"line-height行间距\"><a class=\"anchor\" href=\"#line-height行间距\">#</a> line-height: 行间距</h2>\n<p>用于设置行间距，就是行与行之间距离（同 word 的行距），称为行高，取值有两种</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 100%</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 10px <span class=\"token comment\">/* 与 font-size 的绝对长度一样取值 */</span></pre></td></tr></table></figure><h2 id=\"text-aligh水平对齐\"><a class=\"anchor\" href=\"#text-aligh水平对齐\">#</a> text-aligh: 水平对齐</h2>\n<p>用于设置文本水平对齐方式（同 word 的对齐方式）</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">text-aligh</span><span class=\"token punctuation\">:</span> left/center/right/justify <span class=\"token comment\">/* 左 / 中 / 右 / 两端对齐 */</span></pre></td></tr></table></figure><p>你会发现此属性和 <code>direction</code>  属性差不多，多了个居中</p>\n<h2 id=\"vertical-align垂直对齐\"><a class=\"anchor\" href=\"#vertical-align垂直对齐\">#</a> vertical-align: 垂直对齐</h2>\n<p>用于设置文本垂直对齐方式</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span> sub/super <span class=\"token comment\">/* 对齐文本的下 / 上标 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span> top/text-top <span class=\"token comment\">/* 对齐行中最高元素 / 父元素字体的顶端 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span> middle <span class=\"token comment\">/* 垂直居中 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span> bottom/text-bottom <span class=\"token comment\">/* 对齐行中最高元素 / 父元素字体的底端 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span> length/% <span class=\"token comment\">/* 长度和百分比长度 可负值 */</span></pre></td></tr></table></figure><p>有个特性需要大家知道，图片或表单等行内块元素，它的底线会和父盒子基线对齐，会造成图片底侧有一个空白间隙</p>\n<p>解决方法有两种</p>\n<p>一是给图片添加垂直居中或对齐行中最高元素，让图片不和基线对齐</p>\n<p>二是给图片转换为块元素（后面会讲）</p>\n<h2 id=\"text-decoration文本修饰\"><a class=\"anchor\" href=\"#text-decoration文本修饰\">#</a> text-decoration: 文本修饰</h2>\n<p>用于设置文本修饰（各种线）</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> underline/overline/line-through/blink/none/underline overline</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 下划线 / 删除线 / 上划线 / 闪烁效果（浏览器一般不显示）/ 上下划线 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> underline dotted red <span class=\"token comment\">/* 红色虚线样式的下划线 可设置上 / 下 / 上下划线 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> underline wavy red <span class=\"token comment\">/* 红色波浪线线样式的下划线 可设置上 / 下 / 上下划线 */</span></pre></td></tr></table></figure><h2 id=\"text-indent首行缩进\"><a class=\"anchor\" href=\"#text-indent首行缩进\">#</a> text-indent: 首行缩进</h2>\n<p>用于设置文本首行缩进</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">text-indent</span><span class=\"token punctuation\">:</span> 10px <span class=\"token comment\">/* 与 font-size 的绝对长度一样取值 */</span></pre></td></tr></table></figure><h2 id=\"text-shadow文本阴影css3\"><a class=\"anchor\" href=\"#text-shadow文本阴影css3\">#</a> text-shadow: 文本阴影 (css3)</h2>\n<p>用于设置文本阴影</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 2px 2px 2px #ff0000 <span class=\"token comment\">/* 水平阴影位置 垂直阴影位置 模糊距离 阴影颜色 */</span></pre></td></tr></table></figure><h2 id=\"text-transform英文转换\"><a class=\"anchor\" href=\"#text-transform英文转换\">#</a> text-transform: 英文转换</h2>\n<p>用于设置英文文本转换</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">text-transform</span><span class=\"token punctuation\">:</span> capitalize/uppercase/lowercase <span class=\"token comment\">/* 首字母大写 / 全大写 / 全小写 */</span></pre></td></tr></table></figure><h2 id=\"text-overflow溢出处理css3\"><a class=\"anchor\" href=\"#text-overflow溢出处理css3\">#</a> text-overflow: 溢出处理 (css3)</h2>\n<p>用于设置文本超过显示范围时的处理</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 该属性需要搭配另外两个属性使用 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> nowrap</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span> clip/ellipsis/string <span class=\"token comment\">/* 单纯的剪切文本 / 以省略号省略超出的文本 / 以自定义字符省略超出的文本 (仅火狐有效) */</span></pre></td></tr></table></figure><p>可以设置 hover 来显示处理掉的文本</p>\n<h2 id=\"white-space空白处理\"><a class=\"anchor\" href=\"#white-space空白处理\">#</a> white-space: 空白处理</h2>\n<p>用于设置文本换行</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> pre/nowrap <span class=\"token comment\">/* 保留空格 / 文本不会换行 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> pre-warp/pre-line <span class=\"token comment\">/* 保留空格，正常换行 / 不保留空格，保留换行符 */</span></pre></td></tr></table></figure><h1 id=\"标签显示模式display\"><a class=\"anchor\" href=\"#标签显示模式display\">#</a> 标签显示模式 (display)</h1>\n<p>标签的类型 (显示模式)</p>\n<p><code>html</code>  标签一般分为块标签和行内标签两种，它们也称为块元素和行内元素</p>\n<h2 id=\"块元素block-level\"><a class=\"anchor\" href=\"#块元素block-level\">#</a> 块元素 (block-level)</h2>\n<p>每个块元素都会占一整行或多整行，可对其设置属性</p>\n<p>常见的块元素有 <code>&lt;h1&gt;-&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;li&gt;</code>  等</p>\n<p>块元素的特点：总是从新行开始、高，行高，内外边距都可以控制、宽度默认容器百分百、可收纳内行元素和其他块元素</p>\n<h2 id=\"行内元素inline-level\"><a class=\"anchor\" href=\"#行内元素inline-level\">#</a> 行内元素 (inline-level)</h2>\n<p>行内元素也称内联元素，不占有独立区域，仅靠自身字体大小和图像尺寸来控制大小，通常不对其设置属性</p>\n<p>常见的行内元素有 <code>&lt;a&gt;、&lt;span&gt;</code>  等</p>\n<p>行内元素的特点：和相邻行内元素处于同一行、高宽无效，但水平方向的 <code>margin</code>  和 <code>padding</code>  可以设置，垂直方向则不行、默认宽度就是内容本身、行内元素只能容纳文本或其他行内元素（ <code>a</code>  除外）</p>\n<h2 id=\"行内块元素inline-block\"><a class=\"anchor\" href=\"#行内块元素inline-block\">#</a> 行内块元素 (inline-block)</h2>\n<p>有几个特殊的标签，如 <code>&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;</code> ，可以对其设置属性，会被称为行内块元素</p>\n<p>行内块元素的特点：和相邻行内元素 (行内块) 在同一行上，但之间有空白间隙、默认宽度就是自己本身内容宽度、高，行高，内外边距都可以控制</p>\n<h2 id=\"注意的点\"><a class=\"anchor\" href=\"#注意的点\">#</a> 注意的点</h2>\n<p>只有文字才能组成段落， <code>p</code>  标签内不能放块元素，同理还有 <code>&lt;h1&gt;-&lt;h6&gt;</code> ，这些都是文字类块元素，里面不能放其他块元素</p>\n<p>链接不可套娃</p>\n<h2 id=\"三种模式转换\"><a class=\"anchor\" href=\"#三种模式转换\">#</a> 三种模式转换</h2>\n<p>三种模式之间可以使用 <code>display</code>  属性来进行转换</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline/block/inline-block <span class=\"token comment\">/* 块转行 / 行转块 / 块和行转行内块 */</span></pre></td></tr></table></figure><h1 id=\"css背景\"><a class=\"anchor\" href=\"#css背景\">#</a> CSS 背景</h1>\n<p>CSS 可以添加背景颜色和背景图片以及进行图片设置</p>\n<h2 id=\"定义背景效果有五种基础属性\"><a class=\"anchor\" href=\"#定义背景效果有五种基础属性\">#</a> 定义背景效果有五种基础属性</h2>\n<h3 id=\"background-color背景颜色\"><a class=\"anchor\" href=\"#background-color背景颜色\">#</a> background-color: 背景颜色</h3>\n<p>颜色取值同字体颜色一致</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red</pre></td></tr></table></figure><h3 id=\"background-image背景图片\"><a class=\"anchor\" href=\"#background-image背景图片\">#</a> background-image: 背景图片</h3>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>/*图片路径*/<span class=\"token punctuation\">)</span></span></pre></td></tr></table></figure><h3 id=\"background-repeat背景重复\"><a class=\"anchor\" href=\"#background-repeat背景重复\">#</a> background-repeat: 背景重复</h3>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-repeat</span><span class=\"token punctuation\">:</span> repeat/repeat-x/repeat-y/no-repeat <span class=\"token comment\">/* 重复 / 水平重复 / 垂直重复 / 不重复 */</span></pre></td></tr></table></figure><h3 id=\"background-position背景位置\"><a class=\"anchor\" href=\"#background-position背景位置\">#</a> background-position: 背景位置</h3>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> 位置/x% y%/0px 0px/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 8 种方位，下方列出 / 后面两种值，第一个值是水平位置，第二个是垂直，两种可以混合使用 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>left top/left center/left bottom/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>center top/center center/center bottom/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>right top/right center/right bottom/</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* 如果只设置一个属性，另一个默认 center */</span></pre></td></tr></table></figure><h3 id=\"background-attachment背景滚动\"><a class=\"anchor\" href=\"#background-attachment背景滚动\">#</a> background-attachment: 背景滚动</h3>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-attachment</span><span class=\"token punctuation\">:</span> scroll/fixed/local/initial</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 背景图片随页面滚动 / 背景图片不会滚动 / 背景图片随元素内容滚动 / 不会被其他效果影响 */</span></pre></td></tr></table></figure><h2 id=\"背景简写\"><a class=\"anchor\" href=\"#背景简写\">#</a> 背景简写</h2>\n<p>背景也可以像 <code>font</code>  一样连写属性，不过顺序并没有强制，但建议还是按以下写</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">/* 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置 */</span></pre></td></tr></table></figure><h2 id=\"而在-css3-中新增了四种属性\"><a class=\"anchor\" href=\"#而在-css3-中新增了四种属性\">#</a> 而在 CSS3 中，新增了四种属性</h2>\n<h3 id=\"背景透明css3\"><a class=\"anchor\" href=\"#背景透明css3\">#</a> 背景透明 (css3)</h3>\n<p>CSS3 支持背景半透明</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0.5<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 CSS3 中，背景图片可以多张叠放，类似于 PS 的图层</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>，<span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">background-repeat</span><span class=\"token punctuation\">:</span> no-repeat，repeat</pre></td></tr></table></figure><p>可以给不同的图片设置不同的属性</p>\n<h3 id=\"background-size背景大小css3\"><a class=\"anchor\" href=\"#background-size背景大小css3\">#</a> background-size: 背景大小 (css3)</h3>\n<p>CSS1 中，背景图片大小只能用图片本身大小，而在 CSS3 中，可以进行修改了</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> contain/cover/0px 0px/50% 50% </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 自动缩放比例，保证图片始终完整显示在背景 / 自动缩放比例，保证图片始终填满背景，如有溢出则隐藏 / 长和宽 */</span></pre></td></tr></table></figure><h3 id=\"background-origin定位图片css3\"><a class=\"anchor\" href=\"#background-origin定位图片css3\">#</a> background-origin: 定位图片 (css3)</h3>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-origin</span><span class=\"token punctuation\">:</span> padding-box/border-box/content-box</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 靠近边框 / 紧贴边框 / 紧贴内容 */</span></pre></td></tr></table></figure><h3 id=\"background-clip背景裁剪css3\"><a class=\"anchor\" href=\"#background-clip背景裁剪css3\">#</a> background-clip: 背景裁剪 (css3)</h3>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-clip</span><span class=\"token punctuation\">:</span> padding-box/border-box/content-box</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 背景外 / 背景内 / 剪成内容大小 */</span></pre></td></tr></table></figure><h2 id=\"css渐变css3\"><a class=\"anchor\" href=\"#css渐变css3\">#</a> CSS 渐变 (css3)</h2>\n<p>渐变可以让你在两个或多个指定的颜色之间显示平稳的过渡</p>\n<p>渐变有两种类型</p>\n<h3 id=\"线性渐变\"><a class=\"anchor\" href=\"#线性渐变\">#</a> 线性渐变</h3>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>颜色1，颜色2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 默认从上到下 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to right，颜色1，颜色2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 从左到右 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to bottom right，颜色1，颜色2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 从左上到右下 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>90deg，颜色1，颜色2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 指定角度 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to bottom right，<span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">)</span>，<span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* 带透明度的渐变 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeating-linear-gradient</span><span class=\"token punctuation\">(</span>45deg，yellow 10%，red 20%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 重复渐变 */</span></pre></td></tr></table></figure><h3 id=\"径向渐变\"><a class=\"anchor\" href=\"#径向渐变\">#</a> 径向渐变</h3>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">radial-gradient</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 颜色分布均匀 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">radial-gradient</span><span class=\"token punctuation\">(</span>red 5%<span class=\"token punctuation\">,</span> yellow 15%<span class=\"token punctuation\">,</span> green 60%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 颜色分布不均匀 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">radial-gradient</span><span class=\"token punctuation\">(</span>circle/ellipse<span class=\"token punctuation\">,</span> red<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 带形状的渐变，C 表示圆形，e 表示椭圆，默认椭圆 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">radial-gradient</span><span class=\"token punctuation\">(</span>closest-side at 60% 55%<span class=\"token punctuation\">,</span> red<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">,</span> black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* 不同尺寸的形状 值有 closest-side，farthest-side，closest-corner，farthest-corner */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeating-radial-gradient</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">,</span> yellow 10%<span class=\"token punctuation\">,</span> green 15%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 重复渐变 */</span></pre></td></tr></table></figure><h1 id=\"css盒子模型重点\"><a class=\"anchor\" href=\"#css盒子模型重点\">#</a> CSS 盒子模型 (重点)</h1>\n<p>所有 HTML 元素可以看作盒子，CSS 盒模型本质上是一个盒子，也是一个盛装内容的容器，封装周围的 HTML 元素，它包括：边距，边框，填充，和实际内容，盒模型允许我们在其它元素和周围元素边框之间的空间放置元素</p>\n<h2 id=\"盒子模型的四部分\"><a class=\"anchor\" href=\"#盒子模型的四部分\">#</a> 盒子模型的四部分</h2>\n<h3 id=\"盒子边框border\"><a class=\"anchor\" href=\"#盒子边框border\">#</a> 盒子边框（border）</h3>\n<p>盒子边框就是一层水果皮，苹果皮，橙子皮，有三种样式</p>\n<h4 id=\"边框样式用于定义边框风格\"><a class=\"anchor\" href=\"#边框样式用于定义边框风格\">#</a> 边框样式，用于定义边框风格</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">border-style</span><span class=\"token punctuation\">:</span> none/dotted/dashed/solid/double/hidden </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 无边框 / 点线 / 虚线 / 实线 / 双实线 / 隐藏边框 这类是常用标签 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>groove/ridge/inset/outset <span class=\"token comment\">/* 凹槽边框 / 垄状边框 / 嵌入边框 / 外凸边框 这是不常用的标签 */</span></pre></td></tr></table></figure><p>不常用的标签名词解释是不是很难懂，我来翻译成容易理解的话</p>\n<p>凹槽边框，就是定义 <strong>左边，上边的外边框和右边，下边的内边框</strong></p>\n<p>垄状边框，就是定义 <strong>左边，上边的内边框和右边，下边的外边框</strong></p>\n<p>嵌入边框，就是定义 <strong>左边，上边的整个边框</strong></p>\n<p>外凸边框，就是定义 <strong>右边，下边的整个边框</strong></p>\n<h4 id=\"边框宽度用于定义边框大小\"><a class=\"anchor\" href=\"#边框宽度用于定义边框大小\">#</a> 边框宽度，用于定义边框大小</h4>\n<p>此属性需要配合边框样式使用</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">border-width</span><span class=\"token punctuation\">:</span> 0px/thick/medium/thin <span class=\"token comment\">/* 任意单位 / 三种关键字，关键字可自定义宽度 */</span></pre></td></tr></table></figure><h4 id=\"边框颜色用于定义边框颜色\"><a class=\"anchor\" href=\"#边框颜色用于定义边框颜色\">#</a> 边框颜色，用于定义边框颜色</h4>\n<p>此属性需要配合边框样式使用</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">border-color</span><span class=\"token punctuation\">:</span> red/transparent <span class=\"token comment\">/* 颜色，十六进制，RGB 值都可用 / 透明颜色 */</span></pre></td></tr></table></figure><h4 id=\"单独设置不同方向的边框\"><a class=\"anchor\" href=\"#单独设置不同方向的边框\">#</a> 单独设置不同方向的边框</h4>\n<p>除了 <code>style</code> ，其余两个也可以单独设置</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">border-top-style</span><span class=\"token punctuation\">:</span> solid</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">border-top-color</span><span class=\"token punctuation\">:</span> red</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">border-top-width</span><span class=\"token punctuation\">:</span> 5px</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">border-right-style</span><span class=\"token punctuation\">:</span> dotted</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">border-bottom-style</span><span class=\"token punctuation\">:</span> double</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token property\">border-left-style</span><span class=\"token punctuation\">:</span> dashed</pre></td></tr></table></figure><p>如果你觉得一个个设置很麻烦，也可以简写一下</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">border-style</span><span class=\"token punctuation\">:</span> dotted solid double dashed <span class=\"token comment\">/* 四个边框自定义 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">border-style</span><span class=\"token punctuation\">:</span> dotted solid double <span class=\"token comment\">/* 上 左右 下 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">border-style</span><span class=\"token punctuation\">:</span> dotted solid <span class=\"token comment\">/* 上下 左右 */</span></pre></td></tr></table></figure><h4 id=\"边框简写属性\"><a class=\"anchor\" href=\"#边框简写属性\">#</a> 边框简写属性</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 5px solid red <span class=\"token comment\">/* 大小 / 线型 / 颜色 */</span></pre></td></tr></table></figure><h4 id=\"表格细线边框\"><a class=\"anchor\" href=\"#表格细线边框\">#</a> 表格细线边框</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">table</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">border-collapse</span><span class=\"token punctuation\">:</span> collapse<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 合并边框 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"圆角边框css3\"><a class=\"anchor\" href=\"#圆角边框css3\">#</a> 圆角边框 (css3)</h4>\n<p>桌子有矩形桌子，也有防撞角的圆角桌子，盒子也同理，具有圆角边框</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 5px 5px 5px 5px <span class=\"token comment\">/* 值的写法与上方同理 */</span></pre></td></tr></table></figure><h3 id=\"外边距margin\"><a class=\"anchor\" href=\"#外边距margin\">#</a> 外边距（margin）</h3>\n<p>外边距指的是 <strong>边框与其他边框的距离</strong></p>\n<p>设置外边距会在元素之间创建空白，这段空白通常不能放置其他内容</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 25px 25px <span class=\"token comment\">/* 简写属性，同盒子边框 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 25px <span class=\"token comment\">/* 上外边距 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 25px <span class=\"token comment\">/* 右外边距 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 25px <span class=\"token comment\">/* 下外边距 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 25px <span class=\"token comment\">/* 左外边距 */</span></pre></td></tr></table></figure><h4 id=\"盒子水平居中\"><a class=\"anchor\" href=\"#盒子水平居中\">#</a> 盒子水平居中</h4>\n<p>外边距可以让一个盒子水平居中</p>\n<p>首先要满足是块元素，其次盒子指定了宽度</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.hezi</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 上下为 0，左右自动 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"清除默认内外边框\"><a class=\"anchor\" href=\"#清除默认内外边框\">#</a> 清除默认内外边框</h4>\n<p>行内元素是只有内外边距，没有上下内外边距，内边距在 ie6 等超低版本浏览器会出问题（但现在最低都是 ie8 把）</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">*</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"外边距合并\"><a class=\"anchor\" href=\"#外边距合并\">#</a> 外边距合并</h4>\n<p>在使用 <code>margin</code>  定义块元素的垂直外边距时，可能会出现外边距合并的问题</p>\n<h5 id=\"相邻块元素垂直外边距合并\"><a class=\"anchor\" href=\"#相邻块元素垂直外边距合并\">#</a> 相邻块元素垂直外边距合并</h5>\n<p>上下相邻的两个块元素相遇，此时如果上方的块元素有设置下外边距，下方的块元素有设置上外边距，则他们之间的垂直距离不是两个外边距相加之和，而是之中最大者。这种情况称为外边距塌陷</p>\n<p>要解决这种方法除了避免同时设置上下外边距之外，还可以使用 <code>BFC</code>  解决</p>\n<h5 id=\"嵌套块元素垂直外边距合并\"><a class=\"anchor\" href=\"#嵌套块元素垂直外边距合并\">#</a> 嵌套块元素垂直外边距合并</h5>\n<p>两个有嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的最大者，即使父元素的上外边距为 0</p>\n<p>解决方法有两种</p>\n<p>一是给父元素添加 1 像素的上边框或上内边距 (padding)</p>\n<p>二是给父元素添加 <code>overflow:hidden</code> ，溢出消除</p>\n<h3 id=\"bfcblock-formatting-context\"><a class=\"anchor\" href=\"#bfcblock-formatting-context\">#</a> BFC（Block Formatting Context）</h3>\n<p>即块级格式化上下文，官方文档是这样介绍的：一个 <code>BFC</code>  区域包含创建该上下文元素的所有子元素，但不包括创建了新的 <code>BFC</code>  的子元素的内部元素，它是页面中一块独立的渲染区域，并且有一套属于自己的渲染规则</p>\n<ul>\n<li>内部的盒子会在垂直方向上一个接一个的放置</li>\n<li>对于同一个 BFC 的俩个相邻的盒子的 margin 会发生重叠，与方向无关。</li>\n<li>每个元素的左外边距与包含块的左边界相接触（从左到右），即使浮动元素也是如此</li>\n<li>BFC 的区域不会与 float 的元素区域重叠</li>\n<li>计算 BFC 的高度时，浮动子元素也参与计算</li>\n<li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然</li>\n</ul>\n<p>可能你看了上面一脸懵逼，下面代码解释</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>假设 box1 和 box4 是两个 BFC 区域，那么按照上面说法就是，box1 这个 BFC 区域包含了子元素 box2、box3 和 box4，但不包含 box5，而 box4 这个 BFC 区域包含了子元素 box5</p>\n<p>每一个 BFC 区域只包括其子元素，不包括子元素的子元素</p>\n<p>每一个 BFC 区域都是独立的，互相不影响</p>\n<p>触发 <code>BFC</code>  的条件包括不限于：</p>\n<ul>\n<li>根元素，即 HTML 元素</li>\n<li>浮动元素，float 值为 left、right</li>\n<li>overflow 值不为 visible，为 auto、scroll、hidden</li>\n<li>display 的值为 inline-block、inltable-cell、table-caption、table、inline-table、flex、inline-flex、grid、inline-grid</li>\n<li>position 的值为 absolute 或 fixed</li>\n<li>弹性布局 flex</li>\n<li>表格单元格，table-cell</li>\n</ul>\n<h4 id=\"bfc能解决的问题\"><a class=\"anchor\" href=\"#bfc能解决的问题\">#</a> BFC 能解决的问题</h4>\n<h5 id=\"1解决外边距塌陷\"><a class=\"anchor\" href=\"#1解决外边距塌陷\">#</a> 1. 解决外边距塌陷</h5>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>你会发现，上述两个盒子之前应该是相距 200px，但你发现之间只有 100px 间距，这就是上述的相邻块元素垂直外边距合并问题</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token selector\">.box_f</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span>hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box_f<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box_f<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>给两个盒子添加父元素，并为父元素触发 <code>BFC</code> ，间距也变成 200px，目的是使两个盒子之间独立</p>\n<h5 id=\"2包含塌陷\"><a class=\"anchor\" href=\"#2包含塌陷\">#</a> 2. 包含塌陷</h5>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token selector\">.father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \t<span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t<span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span>hidden<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 加上我 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token selector\">.son</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    \t<span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    \t<span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    \t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    \t<span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>son<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>上述代码你可能会想子元素距离父元素 50px，但你会发现父元素距离浏览器 50px，除了用 padding 可以解决，用 <code>BFC</code>  也可以，只需要给父元素加上一行代码</p>\n<h5 id=\"3清除浮动\"><a class=\"anchor\" href=\"#3清除浮动\">#</a> 3. 清除浮动</h5>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token selector\">.par</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 5px solid #fcc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 加上我 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token selector\">.child</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 5px solid #f66<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>par<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>child<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>child<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>BFC</code>  在计算高度时，浮动元素也会参与，我们可以使父元素生成 <code>BFC</code> ，其内部浮动元素计算高度时候也会计算</p>\n<h5 id=\"4自适应多栏布局\"><a class=\"anchor\" href=\"#4自适应多栏布局\">#</a> 4. 自适应多栏布局</h5>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token selector\">.aside</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #f66<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token selector\">.main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #fcc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 加上我 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>aside<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>每个元素的左外边距与包含块的左边界相接触，虽然给 <code>aside</code>  元素添加了浮动，但是 <code>main</code>  的左边依然会与包含块的左边相接触</p>\n<p>通过给 <code>main</code>  元素变为 <code>BFC</code> ，会变成适应两栏的布局</p>\n<p>这时候，新的 <code>BFC</code>  不会与浮动的 <code>.aside</code>  元素重叠。因此会根据包含块的宽度，和 <code>.aside</code>  的宽度，自动变窄缩放</p>\n<h3 id=\"内边距padding\"><a class=\"anchor\" href=\"#内边距padding\">#</a> 内边距（padding）</h3>\n<p>内边距指的是 <strong>边框与内容之间的距离</strong></p>\n<p>设置内边框会在边框与内容之间创建空白，这段空白会被背景填充</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 25px 25px <span class=\"token comment\">/* 简写属性。同盒子边框 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 25px <span class=\"token comment\">/* 上内边距 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">padding-right</span><span class=\"token punctuation\">:</span> 25px <span class=\"token comment\">/* 右内边距 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> 25px <span class=\"token comment\">/* 下内边距 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 25px <span class=\"token comment\">/* 左内边距 */</span></pre></td></tr></table></figure><h3 id=\"盒子内容content\"><a class=\"anchor\" href=\"#盒子内容content\">#</a> 盒子内容（Content）</h3>\n<p>单纯的只是盒子里的内容，如文本，图像</p>\n<h3 id=\"轮廓outline\"><a class=\"anchor\" href=\"#轮廓outline\">#</a> 轮廓 (outline)</h3>\n<p>轮廓位于边框外围，主要是突出元素作用</p>\n<p>轮廓的属性同边框一致</p>\n<p>一般都是取消轮廓的</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> outline-color outline-style outline-width/0 <span class=\"token comment\">/* 颜色 样式 宽度 / 去掉轮廓 */</span></pre></td></tr></table></figure><p>轮廓是不占空间的，既不会增加额外的 width 或者 height（这样不会导致浏览器渲染时出现 reflow 或是 repaint）</p>\n<p>轮廓有可能是非矩形的（火狐浏览器下）</p>\n<h2 id=\"content宽度和高度\"><a class=\"anchor\" href=\"#content宽度和高度\">#</a> content 宽度和高度</h2>\n<p>使用宽度和高度属性可以对盒子大小进行控制</p>\n<p>大多数浏览器都采用了 W3C 规范，符合 CSS 规范的盒子模型和总宽度和总高度的计算是</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>外盒尺寸计算（元素空间尺寸）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Element空间高度/宽度 = content height/width + padding + border + margin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>内盒尺寸计算（元素大小）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Element内容高度/宽度 = content height/width + padding + border</pre></td></tr></table></figure><p>宽度属性和高度属性仅适用块元素，对行内元素无效（img 和 input 除外）</p>\n<p>计算盒子模型的总高度时，还要考虑上下两个盒子的外边距塌陷问题</p>\n<p>如果一个盒子没有给宽 / 高度或继承父元素的宽 / 高度，则 <code>padding</code>  不会影响本盒子大小</p>\n<h2 id=\"盒子模型布局稳定性\"><a class=\"anchor\" href=\"#盒子模型布局稳定性\">#</a> 盒子模型布局稳定性</h2>\n<p>根据稳定性来分优先程度</p>\n<p>优先使用 <strong>宽度</strong> 其次使用 <strong>内边距</strong> 再次 <strong>外边距</strong></p>\n<p>为什么这样排？</p>\n<p>外边距会有外边距合并问题、内边距会影响盒子大小，需要进行计算</p>\n<p>这样来看宽度就会好用很多</p>\n<h2 id=\"盒模型box-sizing\"><a class=\"anchor\" href=\"#盒模型box-sizing\">#</a> 盒模型 box-sizing</h2>\n<p>在 CSS3 中可以通过 <code>box-sizing</code>  指定盒模型</p>\n<p>分为两种情况</p>\n<p>1. <code>border-box</code> ，默认值，盒子大小为 <code>width+padding+border</code> ，让元素维持 W3C 的标准 Box Mode</p>\n<p>2. <code>border-box</code> ，这个值会将盒子大小固定为宽度的值， <code>padding</code>  和 <code>border</code>  包含在宽度里</p>\n<h2 id=\"盒子阴影css3\"><a class=\"anchor\" href=\"#盒子阴影css3\">#</a> 盒子阴影 (css3)</h2>\n<p>用于设置 div 元素框的阴影</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 10px 10px 5px 5px #888888 inset </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 水平阴影位置 垂直阴影位置 模糊距离 阴影大小 阴影颜色 最后一个直接打，作用是阴影从框内部开始 */</span></pre></td></tr></table></figure><h1 id=\"浮动\"><a class=\"anchor\" href=\"#浮动\">#</a> 浮动</h1>\n<p>浮动就是 <code>float</code>  属性，属于 CSS 中的定位机制，而 CSS 中有三种定位机制</p>\n<h2 id=\"普通流标准流\"><a class=\"anchor\" href=\"#普通流标准流\">#</a> 普通流（标准流）</h2>\n<p>在 <code>html</code>  中另外的一个重要概念 — 标准流，又称普通流或文档流</p>\n<p>普通流实际上就是一个网页内标签元素正常由上到下，从左到右排列布局</p>\n<p>如块元素会占一行，行内元素会按顺序依次前后排列，按照这种大前提的布局下绝对不会出现例外的情况叫做普通流布局</p>\n<h2 id=\"浮动-2\"><a class=\"anchor\" href=\"#浮动-2\">#</a> 浮动</h2>\n<p>浮动指设置了浮动属性的元素会脱离普通流的控制，移动到其父元素中指定位置</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left/right <span class=\"token comment\">/* 左浮动 / 右浮动 */</span></pre></td></tr></table></figure><p>浮动会脱离标准流，不占位置，会影响标准流，且浮动只有左右浮动</p>\n<p>浮动首先创建包含块的慨念（包裹），浮动的元素总是找理它最近的父元素对齐，但不会超出内边距范围</p>\n<p>浮动的元素排列位置，跟上一个块元素有关。如果上一个元素有浮动，则 A 元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则 A 元素的顶部会和上一个元素的底部对齐</p>\n<p>一个父盒子里的子盒子，如果其中一个子级有浮动的话，其他子级都需要浮动，才能在同一行</p>\n<p>元素添加了浮动后，会具有行内块元素特性。元素大小取决于定义的大小或其内容多少</p>\n<p>浮动根据元素书写的位置来显示相应的浮动</p>\n<h3 id=\"清除浮动\"><a class=\"anchor\" href=\"#清除浮动\">#</a> 清除浮动</h3>\n<p>由于浮动元素不再占用原文档流位置，所以会对后面的元素排版产生影响，于是，清除浮动就显得重要</p>\n<p>准确来说，是清除浮动后造成的影响</p>\n<p>清除浮动主要是为了解决父元素因为子级浮动引起内部高度为 0 的问题</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> left/right/both <span class=\"token comment\">/* 清除左浮动 / 右浮动 / 左右都清除 */</span></pre></td></tr></table></figure><p>清除浮动有四种方法</p>\n<h4 id=\"额外标签\"><a class=\"anchor\" href=\"#额外标签\">#</a> 额外标签</h4>\n<p>在浮动元素的下方添加一个空的标签（是标签就行），如 <code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;（三种样式表都可以用）</code> ，这样写确实方便，但一般不推荐这样写</p>\n<h4 id=\"父级添加属性\"><a class=\"anchor\" href=\"#父级添加属性\">#</a> 父级添加属性</h4>\n<p>给浮动元素的父级添加 <code>overflow</code> （什么值都行）</p>\n<p>这样写代码可读性高，但内容多的时候容易造成不会自动换行导致内容被隐藏</p>\n<h4 id=\"after伪元素\"><a class=\"anchor\" href=\"#after伪元素\">#</a> after 伪元素</h4>\n<p><code>:after</code>  为额外标签升级版，自然不需要单独添加标签</p>\n<p>符合闭合浮动思路，解构语义化也正确，就是不支持 IE6 和 7</p>\n<p>百度、淘宝等均使用这种方法</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.clearbox:after</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\".\"</span> <span class=\"token comment\">/* 内容不限 */</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 变为块元素 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 清除高度 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 清除浮动 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 隐藏盒子 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/* IE6、7 专用 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token selector\">.clearbox</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    *<span class=\"token property\">zoom</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* * 号为 ie6 7 识别的特殊符号 zoom 是 ie6 7 清除浮动方法 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"双伪元素\"><a class=\"anchor\" href=\"#双伪元素\">#</a> 双伪元素</h4>\n<p>小米、腾讯等均使用这种方法</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.clearbox:before,clearbox:after</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> table<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 触发 BFC */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">.clearbox:after</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token selector\">.clearbox</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t*<span class=\"token property\">zoom</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"定位\"><a class=\"anchor\" href=\"#定位\">#</a> 定位</h2>\n<p>元素的定位主要包括定位模式和边偏移</p>\n<h3 id=\"边偏移\"><a class=\"anchor\" href=\"#边偏移\">#</a> 边偏移</h3>\n<p>这个和 <code>margin``padding</code>  差不多</p>\n<p>上下左右偏移量，相对于父元素上下左右边线距离</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0px</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0px</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0px</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0px</pre></td></tr></table></figure><h3 id=\"static静态定位\"><a class=\"anchor\" href=\"#static静态定位\">#</a> static: 静态定位</h3>\n<p>一句话：网页中所有元素都默认是静态定位，就是标准流的特性</p>\n<p>在此定位下，无法通过边偏移改变元素位置</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">position</span><span class=\"token punctuation\">:</span> static</pre></td></tr></table></figure><h3 id=\"relative相对定位\"><a class=\"anchor\" href=\"#relative相对定位\">#</a> relative: 相对定位</h3>\n<p>此定位可以将元素定位于相对位置，可以被边偏移改变元素位置，但是在文档流的位置依然不变（身体变了灵魂没变）</p>\n<p>每次移动都是根据元素左上角基点移动</p>\n<p>浮动的主要目的是让多个块元素一行显示，那么定位就是移动位置，让盒子到我们想要的位置上去</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative</pre></td></tr></table></figure><h3 id=\"fixed固定定位\"><a class=\"anchor\" href=\"#fixed固定定位\">#</a> fixed: 固定定位</h3>\n<p>这是一个特殊的定位模式，类似于正方形是一个特殊的矩形</p>\n<p>此定位以浏览器窗口作为参照物来定义网页元素</p>\n<p>对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置，不管浏览器滚动也不管浏览器窗口变化，始终显示在固定位置</p>\n<p>此定位跟父元素没有任何关系，只认浏览器</p>\n<p>此定位会将元素改为行内块模式</p>\n<p>(网页常见的广告就是这样定位的)</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed</pre></td></tr></table></figure><h3 id=\"absolute绝对定位\"><a class=\"anchor\" href=\"#absolute绝对定位\">#</a> absolute: 绝对定位</h3>\n<p>此定位可以将元素定位于绝对位置，可以被边偏移改变元素位置，在文档流的位置会改变（身心都跑了）</p>\n<p>如果文档可以滚动，此定位会随着它滚动，因为元素最终会相对于正常流的某一部分定位</p>\n<p>此定位会将元素改为行内块模式</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute</pre></td></tr></table></figure><p>如果父级没有定位，元素则会以浏览器为准对齐</p>\n<p>如果父级有定位，元素会依据最近的已经定位的父元素进行定位</p>\n<p>子元素是绝对定位的话，父元素就要用相对定位</p>\n<p>绝对定位下的如何盒子水平 / 垂直居中，有一个算法可以做到</p>\n<p>首先将子盒子设置父盒子宽度的一半，然后减去自己子盒子的宽度一半</p>\n<p>当然熟悉的直接写结果，不需要写两个值</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token selector\">.son</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 350px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 最终计算是 350px 是由父元素宽度一半 400px 减去自身宽度一半 50 得到的 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"sticky粘性定位\"><a class=\"anchor\" href=\"#sticky粘性定位\">#</a> sticky: 粘性定位</h3>\n<p>此定位基于用户的滚动位置来定位</p>\n<p>简单说，它会随着你的浏览器滚动而滚动位置，一旦超出了它的滚动范围，它就是固定在哪里</p>\n<p>在相对定位和固定定位之间切换</p>\n<p>比如一些网站的导航栏就是使用这种定位</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">position</span><span class=\"token punctuation\">:</span> sticky</pre></td></tr></table></figure><h3 id=\"重叠元素\"><a class=\"anchor\" href=\"#重叠元素\">#</a> 重叠元素</h3>\n<p>在使用定位时，你会发现元素重叠，而有些时候你需要一些在上一些在下，这时候需要重叠元素了</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 取值可以正负 */</span></pre></td></tr></table></figure><p>默认值为 0，值越大，元素层叠越上</p>\n<p>如果取值相同，则根据书写顺序后来居上</p>\n<p>相对定位、绝对定位和固定定位可设置此属性，其余不可</p>\n<h1 id=\"元素的显示与隐藏\"><a class=\"anchor\" href=\"#元素的显示与隐藏\">#</a> 元素的显示与隐藏</h1>\n<p>CSS 中有三个显示和隐藏的属性</p>\n<h2 id=\"display显示\"><a class=\"anchor\" href=\"#display显示\">#</a> display: 显示</h2>\n<p>设置或检索对象是否显示及如何显示</p>\n<p>被隐藏的对象不会占用空间</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none/block <span class=\"token comment\">/* 隐藏对象 / 显示对象并转换为块元素 */</span></pre></td></tr></table></figure><h2 id=\"visibility可见性\"><a class=\"anchor\" href=\"#visibility可见性\">#</a> visibility: 可见性</h2>\n<p>设置或检索是否显示对象</p>\n<p>被隐藏的对象会继续占用空间</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> hidden/collapse <span class=\"token comment\">/* 隐藏元素 / 删除表格一行或一列 */</span></pre></td></tr></table></figure><h2 id=\"overflow溢出\"><a class=\"anchor\" href=\"#overflow溢出\">#</a> overflow: 溢出</h2>\n<p>设置或检索当对象的内容超过其指定高度及宽度时如何管理内容</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> auto/hidden/scroll </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 超出内容自动显示滚动条，不超则不显示 / 隐藏超出的内容 / 总是显示滚动条 */</span></pre></td></tr></table></figure><h1 id=\"css用户界面样式\"><a class=\"anchor\" href=\"#css用户界面样式\">#</a> CSS 用户界面样式</h1>\n<p>界面样式就是改变一些用户操作样式</p>\n<h2 id=\"鼠标样式cursor\"><a class=\"anchor\" href=\"#鼠标样式cursor\">#</a> 鼠标样式:cursor</h2>\n<p>更改移动到对象上的鼠标指针样式</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> crosshair 光标呈现为十字线</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pointer \t此光标指示链接的指针（一只手）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>move\t\t此光标指示某对象可被移动</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>e-resize\t此光标指示矩形框的边缘可被向右（东）移动</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ne-resize\t此光标指示矩形框的边缘可被向上及向右移动（北/东）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>nw-resize\t此光标指示矩形框的边缘可被向上及向左移动（北/西）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>n-resize\t此光标指示矩形框的边缘可被向上（北）移动</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>se-resize\t此光标指示矩形框的边缘可被向下及向右移动（南/东）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sw-resize\t此光标指示矩形框的边缘可被向下及向左移动（南/西）</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>s-resize\t此光标指示矩形框的边缘可被向下移动（南）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>w-resize\t此光标指示矩形框的边缘可被向左移动（西）</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>text\t\t此光标指示文本</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>wait\t\t此光标指示程序正忙（通常是一只表或沙漏）</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>help\t\t此光标指示可用的帮助（通常是一个问号或一个气球）</pre></td></tr></table></figure><h2 id=\"防止拖拽文本域resizecss3\"><a class=\"anchor\" href=\"#防止拖拽文本域resizecss3\">#</a> 防止拖拽文本域:resize (css3)</h2>\n<p>可以设置用户能否拖动文本域</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">resize</span><span class=\"token punctuation\">:</span> none/both/horizontai/vertical <span class=\"token comment\">/* 禁止拖放 / 可调整高宽 / 可调整宽度 / 可调整高度 */</span></pre></td></tr></table></figure><h1 id=\"css过渡css3\"><a class=\"anchor\" href=\"#css过渡css3\">#</a> CSS 过渡 (css3)</h1>\n<p>CSS3 中，我们为了添加某种效果可以从一种样式转变到另一个的时候，无需使用 Flash 动画或 JavaScript</p>\n<p>在一些个人博客中的加载页面就是这样做成的</p>\n<p>CSS3 过渡是元素从一种样式逐渐改变为另一种的效果</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> 需要过渡的CSS名称 过渡时间 过渡速度 过渡几时开始 <span class=\"token comment\">/* 简写属性 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">transition-property</span><span class=\"token punctuation\">:</span> all/property <span class=\"token comment\">/* 所有属性过渡 / 指定属性过渡 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">transition-duration</span><span class=\"token punctuation\">:</span> 5s <span class=\"token comment\">/* 完成过渡效果时间，以秒和毫秒计算 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">transition-timing-function</span><span class=\"token punctuation\">:</span> linear/ease/ease-in/ease-out/ease-in-out/<span class=\"token function\">cubic-bezier</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 正常速度 / 由慢变快 / 慢速开始 / 慢速结束 / 慢速开始和结束 / 自定义 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token property\">transition-delay</span><span class=\"token punctuation\">:</span> 2s <span class=\"token comment\">/* 延时开始时间，以秒和毫秒计算 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* Safari 浏览器专用 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token property\">-webkit-transition-property</span><span class=\"token punctuation\">:</span>width<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token property\">-webkit-transition-duration</span><span class=\"token punctuation\">:</span>1s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token property\">-webkit-transition-timing-function</span><span class=\"token punctuation\">:</span>linear<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token property\">-webkit-transition-delay</span><span class=\"token punctuation\">:</span>2s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"2d变形css3\"><a class=\"anchor\" href=\"#2d变形css3\">#</a> 2D 变形 (css3)</h1>\n<p>2D 变形可以实现元素的位移、旋转、倾斜、缩放等方式</p>\n<p><code>translate</code>  方法，根据左 (X 轴) 和顶部 (Y 轴) 位置给定的参数，从当前元素位置移动</p>\n<p>可单独设置 x 轴和 y 轴，均可负值</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>50px，100px<span class=\"token punctuation\">)</span> <span class=\"token comment\">/* 从左边元素移动 50 个像素，并从顶部移动 100 像素 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-ms-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>50px<span class=\"token punctuation\">,</span>100px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* IE 9 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>50px<span class=\"token punctuation\">,</span>100px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari and Chrome */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>50%<span class=\"token punctuation\">)</span> <span class=\"token comment\">/* 走自己宽度的一半 */</span></pre></td></tr></table></figure><p><code>transform-origin</code>  方法是上一个方法中的附加，设置旋转元素的基点（旋转点）</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> 20% 40%<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 改变元素原点到 x 轴百分之 20，y 轴百分之 40 位置 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-ms-transform-origin</span><span class=\"token punctuation\">:</span> 20% 40%<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* IE 9 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">-webkit-transform-origin</span><span class=\"token punctuation\">:</span> 20% 40%<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari and Chrome */</span></pre></td></tr></table></figure><p><code>transform-style</code>  方式是让嵌套元素是怎样在三维空间中呈现</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">transform-style</span><span class=\"token punctuation\">:</span> flat/preserve-3d <span class=\"token comment\">/* 2D 展示 / 3D 展示 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-webkit-transform-style</span><span class=\"token punctuation\">:</span> preserve-3d<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari and Chrome */</span></pre></td></tr></table></figure><p><code>rotate</code>  方法，在一个给定度数顺时针旋转的元素。负值是允许的，这样是元素逆时针旋转</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 顺时针旋转 30 度 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-ms-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* IE 9 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari and Chrome */</span></pre></td></tr></table></figure><p><code>scale</code>  方法，该元素增加或减少的大小，取决于宽度（X 轴）和高度（Y 轴）的参数</p>\n<p>可单独设置 x 轴和 y 轴，均可负值</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-ms-transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">,</span>3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* IE 9 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">,</span>3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">,</span>3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 转变宽度为原来的大小的 2 倍，和其原始大小 3 倍的高度 */</span></pre></td></tr></table></figure><p><code>skew</code>  方法，根据 X 轴和 Y 轴位置给定的参数，使元素倾斜</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">skew</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">,</span>20deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 元素在 X 轴和 Y 轴上倾斜 20 度 30 度 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-ms-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">skew</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">,</span>20deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* IE 9 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">skew</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">,</span>20deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari and Chrome */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">skewX</span><span class=\"token punctuation\">(</span>&lt;angle><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* 表示只在 X 轴 (水平方向) 倾斜 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">skewY</span><span class=\"token punctuation\">(</span>&lt;angle><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* 表示只在 Y 轴 (垂直方向) 倾斜 */</span></pre></td></tr></table></figure><p><code>matrix</code>  方法和 2D 变换方法合并成一个</p>\n<p>有六个参数，包含旋转，缩放，移动（平移）和倾斜功能</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">matrix</span><span class=\"token punctuation\">(</span>0.866<span class=\"token punctuation\">,</span>0.5<span class=\"token punctuation\">,</span>-0.5<span class=\"token punctuation\">,</span>0.866<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 旋转 30 度 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-ms-transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">matrix</span><span class=\"token punctuation\">(</span>0.866<span class=\"token punctuation\">,</span>0.5<span class=\"token punctuation\">,</span>-0.5<span class=\"token punctuation\">,</span>0.866<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* IE 9 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">matrix</span><span class=\"token punctuation\">(</span>0.866<span class=\"token punctuation\">,</span>0.5<span class=\"token punctuation\">,</span>-0.5<span class=\"token punctuation\">,</span>0.866<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari and Chrome */</span></pre></td></tr></table></figure><h1 id=\"3d变形css3\"><a class=\"anchor\" href=\"#3d变形css3\">#</a> 3D 变形 (css3)</h1>\n<p><code>rotateX</code>  方法，沿着 X 立体旋转</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateX</span><span class=\"token punctuation\">(</span>120deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateX</span><span class=\"token punctuation\">(</span>120deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari 与 Chrome */</span></pre></td></tr></table></figure><p><code>rotateY</code>  方法，沿着 Y 立体旋转</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span>130deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span>130deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari 与 Chrome */</span></pre></td></tr></table></figure><p><code>rotateZ</code>  方法，沿着 Z 立体旋转</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateZ</span><span class=\"token punctuation\">(</span>140deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateZ</span><span class=\"token punctuation\">(</span>140deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari 与 Chrome */</span></pre></td></tr></table></figure><p><code>rotate3d</code>  是上面三种的缩写</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rotate3d</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>translate3d</code>  是 2D 变形的升级，多了 Z 轴</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">translate3d</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>scale3d</code>  也是 2D 变形的升级，多了 Z 轴</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">scale3d</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>prespective</code>  方法，透视元素</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">perspective</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-webkit-perspective</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari and Chrome */</span></pre></td></tr></table></figure><p><code>prespective-origin</code>  方法，改变 3D 元素底部位置</p>\n<p>需搭配上一个方法使用</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">perspective-origin</span><span class=\"token punctuation\">:</span> 10% 10%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-webkit-perspective-origin</span><span class=\"token punctuation\">:</span> 10% 10%<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari and Chrome */</span></pre></td></tr></table></figure><p><code>backface-visibility</code>  方法，定义元素在不面对屏幕时是否可见</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">backface-visibility</span><span class=\"token punctuation\">:</span> visible/hidden<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 可见 / 不可见 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-webkit-backface-visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Chrome 、Safari */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">-moz-backface-visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Firefox */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">-ms-backface-visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Internet Explorer */</span></pre></td></tr></table></figure><h1 id=\"css3动画\"><a class=\"anchor\" href=\"#css3动画\">#</a> CSS3 动画</h1>\n<p>CSS3 可以创建动画，通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果</p>\n<p><code>@keyframes</code>  属性是创建动画</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@keyframes mymove <span class=\"token comment\">/* 此处的 mymove 是动画名称，由 animation 创造 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token selector\">0%</span>   <span class=\"token punctuation\">&#123;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\t\t<span class=\"token comment\">/* 动画持续过程 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token selector\">25%</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span>200px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">50%</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token selector\">75%</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span>200px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token selector\">100%</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>@-webkit-keyframes mymove <span class=\"token comment\">/* Safari and Chrome */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token selector\">0%</span>   <span class=\"token punctuation\">&#123;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token selector\">25%</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span>200px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token selector\">50%</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token selector\">75%</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span>200px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token selector\">100%</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> animation-name animation-duration animation-timing-function animation-fill-mode animation-delay animation-iteration-count animation-direction<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>animation-name</code>  规定 @keyframes 动画名称</p>\n<p><code>animation-duration: 1s</code>  规定动画完成一次的时间，值为秒或毫秒</p>\n<p><code>animation-timing-function</code>  规定动画播放速度，同 CSS3 过渡的 <code>transition-timing-function</code></p>\n<p><code>animation-fill-mode: forwards/backwards/both</code>  规定动画不播放时的状态</p>\n<p><code>forwards</code>  为动画结束后应用什么状态（状态由 animation-iteration-count 提供）</p>\n<p><code>backwards</code>  动画将应用在 animation-delay 定义期间启动动画的第一次迭代的关键帧中定义的属性值。这些都是 from 关键帧中的值（当 animation-direction 为 &quot;normal&quot; 或 &quot;alternate&quot; 时）或 to 关键帧中的值（当 animation-direction 为 &quot;reverse&quot; 或 &quot;alternate-reverse&quot; 时）</p>\n<p><code>both</code>  动画遵循 forwards 和 backwards 的规则。也就是说，动画会在两个方向上扩展动画属性</p>\n<p><code>animation-delay: 1s</code>  定义动画什么时候开始，值为秒或毫秒，允许负值，但负值在首次播放会跳过设置的秒数</p>\n<p><code>animation-iteration-count: 1</code>  定义动画应该播放多少次</p>\n<p><code>animation-play-state: paused/running</code>  指定动画是否正在运行或已暂停，一般用不上</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">animation-name</span><span class=\"token punctuation\">:</span> myfirst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">animation-duration</span><span class=\"token punctuation\">:</span> 5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">animation-timing-function</span><span class=\"token punctuation\">:</span> linear<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> 2s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">animation-iteration-count</span><span class=\"token punctuation\">:</span> infinite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token property\">animation-direction</span><span class=\"token punctuation\">:</span> alternate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token property\">animation-play-state</span><span class=\"token punctuation\">:</span> running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/* Safari 与 Chrome: */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token property\">-webkit-animation-name</span><span class=\"token punctuation\">:</span> myfirst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token property\">-webkit-animation-duration</span><span class=\"token punctuation\">:</span> 5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token property\">-webkit-animation-timing-function</span><span class=\"token punctuation\">:</span> linear<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token property\">-webkit-animation-delay</span><span class=\"token punctuation\">:</span> 2s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token property\">-webkit-animation-iteration-count</span><span class=\"token punctuation\">:</span> infinite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token property\">-webkit-animation-direction</span><span class=\"token punctuation\">:</span> alternate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token property\">-webkit-animation-play-state</span><span class=\"token punctuation\">:</span> running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/* 缩写 */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> myfirst 5s linear 2s infinite alternate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">/* Safari 与 Chrome: */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token property\">-webkit-animation</span><span class=\"token punctuation\">:</span> myfirst 5s linear 2s infinite alternate<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"css3多列\"><a class=\"anchor\" href=\"#css3多列\">#</a> CSS3 多列</h1>\n<p>创建多列</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">column-count</span><span class=\"token punctuation\">:</span> 3<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 讲文本分为几列 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-webkit-column-count</span><span class=\"token punctuation\">:</span> 3<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Chrome, Safari, Opera */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">-moz-column-count</span><span class=\"token punctuation\">:</span> 3<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Firefox */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">column-gap</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 每列之间的距离 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">-webkit-column-gap</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Chrome, Safari, Opera */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token property\">-moz-column-gap</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Firefox */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token property\">column-rule-style</span><span class=\"token punctuation\">:</span> solid <span class=\"token comment\">/* 每列之间的边框样式 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token property\">-webkit-column-rule-style</span><span class=\"token punctuation\">:</span> solid<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Chrome, Safari, Opera */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token property\">-moz-column-rule-style</span><span class=\"token punctuation\">:</span> solid<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Firefox */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token property\">column-rule-width</span><span class=\"token punctuation\">:</span> 1px <span class=\"token comment\">/* 每列之间的边框厚度 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token property\">-webkit-column-rule-width</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Chrome, Safari, Opera */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token property\">-moz-column-rule-width</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Firefox */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token property\">column-rule-color</span><span class=\"token punctuation\">:</span> red <span class=\"token comment\">/* 每列之间的边框颜色 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token property\">-webkit-column-rule-color</span><span class=\"token punctuation\">:</span> lightblue<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Chrome, Safari, Opera */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token property\">-moz-column-rule-color</span><span class=\"token punctuation\">:</span> lightblue<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Firefox */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>column-rule-*<span class=\"token punctuation\">:</span> 1px solid red <span class=\"token comment\">/* 上三个属性的缩写 */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token property\">-webkit-column-rule</span><span class=\"token punctuation\">:</span> 1px solid red<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Chrome, Safari, Opera */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token property\">-moz-column-rule</span><span class=\"token punctuation\">:</span> 1px solid red<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Firefox */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token property\">column-span</span><span class=\"token punctuation\">:</span> 1/all <span class=\"token comment\">/* 某个元素应该跨越多少列 */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token property\">-webkit-column-span</span><span class=\"token punctuation\">:</span> 1/all<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari and Chrome */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token property\">column-width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 指定列的宽度 */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token property\">-moz-column-width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Firefox */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token property\">-webkit-column-width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari and Chrome */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token property\">column</span><span class=\"token punctuation\">:</span> 100px 3<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 指定列的宽度和列数 */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token property\">-webkit-columns</span><span class=\"token punctuation\">:</span>100px 3<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari and Chrome */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token property\">-moz-columns</span><span class=\"token punctuation\">:</span>100px 3<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Firefox */</span></pre></td></tr></table></figure><h1 id=\"css布局\"><a class=\"anchor\" href=\"#css布局\">#</a> CSS 布局</h1>\n<h2 id=\"flex布局\"><a class=\"anchor\" href=\"#flex布局\">#</a> flex 布局</h2>\n<p>传统布局兼容性好，但布局繁琐，有局限性而且不适应移动端，现在的前端都要求适应移动端，那么传统布局就不适合了</p>\n<p>flex 布局操作方便，布局简单，移动端应用广泛，但对 PC 端的浏览器支持较差，对 IE11 或更低的只支持部分甚至不支持</p>\n<p>flex 布局原理：给父盒子添加 flex 属性来控制子盒子的位置和排列方式</p>\n<p>当我们为父盒子设为 flex 布局后，子元素的 <code>float</code> 、 <code>clear</code>  和 <code>vertical-align</code>  会失效</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> -webkit-flex<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"主轴与侧轴\"><a class=\"anchor\" href=\"#主轴与侧轴\">#</a> 主轴与侧轴</h3>\n<p>在 flex 布局中，分为主轴与侧轴两个方向，也叫行和列，xy 轴</p>\n<p>默认主轴方向为 x 轴，水平向右</p>\n<p>默认侧轴方向为 y 轴，水平向下</p>\n<h3 id=\"flex布局属性\"><a class=\"anchor\" href=\"#flex布局属性\">#</a> flex 布局属性</h3>\n<h4 id=\"flex分配空间\"><a class=\"anchor\" href=\"#flex分配空间\">#</a> flex: 分配空间</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> flex-grow flex-shrink flex-basis</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 常见属性有</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>flex: 1 = flex: 1 1 0%</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>flex: 2 = flex: 2 1 0%</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>flex: auto = flex: 1 1 auto</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>flex: none = flex: 0 0 auto，常用于固定尺寸不伸缩</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/* 项目将相对于其他灵活的项目进行扩展的量 / 规定项目将相对于其他灵活的项目进行收缩的量 / 项目长度 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> auto <span class=\"token comment\">/* 相当于 1 1 auto */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> none <span class=\"token comment\">/* 相当于 0 0 auto */</span></pre></td></tr></table></figure><h4 id=\"flex-direction设置主轴方向\"><a class=\"anchor\" href=\"#flex-direction设置主轴方向\">#</a> flex-direction: 设置主轴方向</h4>\n<p>此属性决定主轴的方向（项目的排列方向）</p>\n<p>主轴和侧轴是会变化的，就是看此属性设置谁为主，剩下为侧，子元素根据主轴来排列</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> row/row-reverse/column/column-reverse </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t\t   <span class=\"token comment\">/* 默认从左到右 / 从右到左 / 从上到下 / 从上到下 */</span></pre></td></tr></table></figure><h4 id=\"flex-wrap设置子元素换行\"><a class=\"anchor\" href=\"#flex-wrap设置子元素换行\">#</a> flex-wrap: 设置子元素换行</h4>\n<p>默认情况下，项目都排在一条线上（轴线），flex 布局默认是不换行的，如果需要换行就需要设置此属性</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> wrap/wrap-reverse <span class=\"token comment\">/* 换行 / 相反换行 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-webkit-flex-wrap</span><span class=\"token punctuation\">:</span> wrap<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari */</span></pre></td></tr></table></figure><h4 id=\"flex-flow复合属性\"><a class=\"anchor\" href=\"#flex-flow复合属性\">#</a> flex-flow: 复合属性</h4>\n<p>此属性是上两个属性的合并</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">flex-flow</span><span class=\"token punctuation\">:</span> row wrap</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-webkit-flex-flow</span><span class=\"token punctuation\">:</span> row-reverse wrap<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari 6.1+ */</span></pre></td></tr></table></figure><h4 id=\"flex-grow\"><a class=\"anchor\" href=\"#flex-grow\">#</a> flex-grow</h4>\n<p>当容器不换行时，容器宽度会不够分，弹性元素会根据此元素决定</p>\n<p>定义项目的放大比例（容器宽度 &gt; 元素总宽度时如何伸展）</p>\n<p>默认为 0，既如果有剩余空间也不放大</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果所有项目的 <code>flex-grow</code>  属性都为 1，则它们将等分剩余空间（如果有的话）</p>\n<p>如果一个项目的 <code>flex-grow</code>  属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍</p>\n<p>弹性容器的宽度正好等于元素宽度总和，无多余宽度，此时无论 <code>flex-grow</code>  是什么值都不会生效</p>\n<h4 id=\"flex-shrink\"><a class=\"anchor\" href=\"#flex-shrink\">#</a> flex-shrink</h4>\n<p>定义了项目的缩小比例（容器宽度 &lt; 元素总宽度时如何收缩），默认为 1，即如果空间不足，该项目将缩小</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果所有项目的 <code>flex-shrink</code>  属性都为 1，当空间不足时，都将等比例缩小</p>\n<p>如果一个项目的 <code>flex-shrink</code>  属性为 0，其他项目都为 1，则空间不足时，前者不缩小</p>\n<p>在容器宽度有剩余时， <code>flex-shrink</code>  也是不会生效的</p>\n<h4 id=\"flex-basis\"><a class=\"anchor\" href=\"#flex-basis\">#</a> flex-basis</h4>\n<p>设置的是元素在主轴上的初始尺寸，所谓的初始尺寸就是元素在 <code>flex-grow</code>  和 <code>flex-shrink</code>  生效前的尺寸</p>\n<p>浏览器根据这个属性，计算主轴是否有多余空间，默认值为 <code>auto</code> ，即项目的本来大小，如设置了 <code>width</code>  则元素尺寸由 <code>width/height</code>  决定（主轴方向），没有设置则由内容决定</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> 0/auto</pre></td></tr></table></figure><p>当设置为 0 的是，会根据内容撑开</p>\n<p>可以设为跟 <code>width</code>  或 <code>height</code>  属性一样的值（比如 350px），则项目将占据固定空间</p>\n<h4 id=\"justify-content设置主轴上的子元素排列方式\"><a class=\"anchor\" href=\"#justify-content设置主轴上的子元素排列方式\">#</a> justify-content: 设置主轴上的子元素排列方式</h4>\n<p>使用前要确定好主轴</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* 居中排列 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>      <span class=\"token comment\">/* 从行首开始排列 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> end<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 从行尾开始排列 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> flex-start<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 从行首起始位置开始排列 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> flex-end<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* 从行尾位置开始排列 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* 一个挨一个在对齐容器得左边缘 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span>      <span class=\"token comment\">/* 元素以容器右边缘为基准，一个挨着一个对齐，*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token property\">-webkit-justify-content</span><span class=\"token punctuation\">:</span> space-around<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari 6.1+ */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/* 基线对齐 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> baseline<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> first baseline<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> last baseline<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/* 分配弹性元素方式 */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> space-between<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 均匀排列每个元素</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                   首个元素放置于起点，末尾元素放置于终点 */</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> space-around<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 均匀排列每个元素</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                   每个元素周围分配相同的空间 */</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> space-evenly<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 均匀排列每个元素</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                   每个元素之间的间隔相等 */</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> stretch<span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* 均匀排列每个元素</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                                   'auto'-sized 的元素会被拉伸以适应容器的大小 */</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/* 溢出对齐方式 */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> safe center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> unsafe center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/* 全局值 */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> initial<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> unset<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"align-items设置侧轴上的单行子元素排列方式\"><a class=\"anchor\" href=\"#align-items设置侧轴上的单行子元素排列方式\">#</a> align-items: 设置侧轴上的单行子元素排列方式</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> stretch\t<span class=\"token comment\">/* 默认值，元素拉伸适应屏幕 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center\t\t<span class=\"token comment\">/* 垂直居中 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> flex-start <span class=\"token comment\">/* 位于容器最上方 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> flex-end\t<span class=\"token comment\">/* 位于容器最下方 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> baseline \t<span class=\"token comment\">/* 位于容器的基线上 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token property\">-webkit-align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari 7.0+ */</span></pre></td></tr></table></figure><h4 id=\"align-content设置侧轴上的多行子元素排列方式\"><a class=\"anchor\" href=\"#align-content设置侧轴上的多行子元素排列方式\">#</a> align-content: 设置侧轴上的多行子元素排列方式</h4>\n<p>父元素设置了 flex 属性并且设置了 <code>flex-direction:row</code>  和 <code>flex-wrap:wrap</code> ，此属性才生效</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">align-content</span><span class=\"token punctuation\">:</span> stretch\t\t <span class=\"token comment\">/* 默认值，元素拉伸适应屏幕 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">align-content</span><span class=\"token punctuation\">:</span> center\t\t <span class=\"token comment\">/* 垂直居中 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">align-content</span><span class=\"token punctuation\">:</span> flex-start\t <span class=\"token comment\">/* 位于容器最上方 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">align-content</span><span class=\"token punctuation\">:</span> flex-end\t\t <span class=\"token comment\">/* 位于容器最下方 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">align-content</span><span class=\"token punctuation\">:</span> space-between <span class=\"token comment\">/* 均匀排列每个元素，首个元素放置于起点，末尾元素放置于终点 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token property\">align-content</span><span class=\"token punctuation\">:</span> space-around\t <span class=\"token comment\">/* 均匀排列每个元素，每个元素周围分配相同的空间 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token property\">-webkit-align-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari 7.0+ */</span></pre></td></tr></table></figure><h4 id=\"align-self设置侧轴上的某个子元素排列方式\"><a class=\"anchor\" href=\"#align-self设置侧轴上的某个子元素排列方式\">#</a> align-self: 设置侧轴上的某个子元素排列方式</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span> auto\t\t<span class=\"token comment\">/* 默认值，继承父容器 align-items，没有父容器则 stretch */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span> stretch\t\t<span class=\"token comment\">/* 元素拉伸适应屏幕 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span> center\t\t<span class=\"token comment\">/* 垂直居中 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span> flex-start\t<span class=\"token comment\">/* 位于容器最上方 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span> flex-end\t<span class=\"token comment\">/* 位于容器最下方 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span> baseline\t<span class=\"token comment\">/* 位于容器的基线上 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token property\">-webkit-align-items</span><span class=\"token punctuation\">:</span> flex-start<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari 7.0+ */</span></pre></td></tr></table></figure><h4 id=\"order子元素排列顺序\"><a class=\"anchor\" href=\"#order子元素排列顺序\">#</a> order: 子元素排列顺序</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">order</span><span class=\"token punctuation\">:</span> 1 <span class=\"token comment\">/* 值越大则该元素越往后，可以为负值 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">-webkit-order</span><span class=\"token punctuation\">:</span> 1</pre></td></tr></table></figure><h2 id=\"grid布局\"><a class=\"anchor\" href=\"#grid布局\">#</a> Grid 布局</h2>\n<p><code>flex</code>  布局是轴线布局，只能指定项目针对轴线的位置，可以看作是一维布局</p>\n<p><code>grid</code>  布局则是讲容器划分成行或列，产生单元格，指定项目所在单元格，可以看作是二维布局</p>\n<p><code>fr</code>  属性是此布局的专属单位，代表布局的剩余空间</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid</pre></td></tr></table></figure><p><code>grid-template-areas</code>  属性用于设置网格布局</p>\n<p><code>grid-area</code>  属性用于对网格元素命名</p>\n<p>命名过后的网格元素可以被第一个属性阴用，每行由单引号 <code>''</code>  定义，空格分隔， <code>.</code>  号为没有名称的网格项</p>\n<p>下方一个实例</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">.item1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> myArea<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">.grid-container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">grid-template-areas</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'myArea myArea . . .'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token property\">grid-gap</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #2196F3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token selector\">.grid-container > div</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 0.8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20px 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>grid-area 属性<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>你可以使用 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">></span></span>grid-area<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">></span></span> 属性来命名网格元素。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>命名的网格元素可以通过容器的 grid-template-areas 属性来引用。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>以下实例 item1 命名为 \"myArea\", 并跨越 2 列：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grid-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item6<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item7<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item9<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>9<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>grid-template-columns</code>  属性用于设置网格容器中的列数和宽度</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 20px 30px auto 40px <span class=\"token comment\">/* 一个 4 列的网格容器，并每列设置尺寸 */</span></pre></td></tr></table></figure><p><code>grid-auto-columns</code>  属性用于设置网格容器中的默认列宽度</p>\n<p>会被上面属性覆盖</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">grid-auto-columns</span><span class=\"token punctuation\">:</span> 50px <span class=\"token comment\">/* 每个网格容器列宽 50px */</span></pre></td></tr></table></figure><p><code>grid-template-rows</code>  属性用于设置网格容器中的每行高度</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> 50px 50px 50px <span class=\"token comment\">/* 每个值对应一行，每行 50px */</span></pre></td></tr></table></figure><p><code>grid-auto-rows</code>  属性用于设置网格容器中的默认行高度</p>\n<p>会被上面属性覆盖</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">grid-auto-rows</span><span class=\"token punctuation\">:</span> 150px <span class=\"token comment\">/* 每个网格容器 150px 高度 */</span></pre></td></tr></table></figure><p><code>grid-auto-flow</code>  属性用于设置网格容器中的元素排列布局</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">grid-auto-flow</span><span class=\"token punctuation\">:</span> row\t\t\t<span class=\"token comment\">/* 默认值，填充满每一行，可能会增加新列 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">grid-auto-flow</span><span class=\"token punctuation\">:</span> column\t\t<span class=\"token comment\">/* 默认值，填充满每一列，可能会增加新列 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">grid-auto-flow</span><span class=\"token punctuation\">:</span> dense\t\t<span class=\"token comment\">/* 如果后面出现了稍小的元素，则会试图去填充网格中前面留下的空白。这样做会\t\t\t\t\t\t\t\t 填上稍大元素留下的空白，但同时也可能导致原来出现的次序被打乱 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">grid-auto-flow</span><span class=\"token punctuation\">:</span> row dense\t<span class=\"token comment\">/* 按行来填充网格中前面留下的空白 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">grid-auto-flow</span><span class=\"token punctuation\">:</span> column dense<span class=\"token comment\">/* 按列来填充网格中前面留下的空白 */</span></pre></td></tr></table></figure><p><code>row-gap</code>  属性用于设置网格行间距</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">row-gap</span><span class=\"token punctuation\">:</span> 50px</pre></td></tr></table></figure><p><code>column-gap</code>  属性用于设置网格列间距</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">column-gap</span><span class=\"token punctuation\">:</span> 20px</pre></td></tr></table></figure><p><code>gap</code>  属性用于设置网格行与列间距</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">gap</span><span class=\"token punctuation\">:</span> 20px</pre></td></tr></table></figure><p><code>grid</code>  属性的布局对齐方式与 <code>flex</code>  类似，使用 <code>flex</code>  的对齐属性</p>\n<h1 id=\"css3多媒体查询\"><a class=\"anchor\" href=\"#css3多媒体查询\">#</a> CSS3 多媒体查询</h1>\n<p>多媒体查询在 CSS2 就有，是针对不同的媒体类型 (包括显示器、便携设备、电视机，等等) 设置不同的样式规则，但对于很多设备上支持不友好</p>\n<p>CSS3 的多媒体查询继承了 CSS2 的多媒体类型，取代了查找设备类型，CSS3 根据设置自适应设备显示</p>\n<p>媒体查询可以做很多事，如 <code>viewport</code>  高宽，设备的高宽，手机横屏竖屏，分辨率等</p>\n<h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2>\n<p>由多种媒体组成，可以包含一个或多个表达式，表达式根据条件是否成立返回 true 或 false</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">not</span>|<span class=\"token keyword\">only</span> mediatype <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span>mediafeature <span class=\"token keyword\">and</span>|<span class=\"token keyword\">or</span>|<span class=\"token keyword\">not</span> mediafeature<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  CSS-Code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><strong>not:</strong>  not 运算符用于否定媒体查询，如果不满足这个条件则返回 true，否则返回 false。 如果出现在以逗号分隔的查询列表中，它将仅否定应用了该查询的特定查询。 如果使用 not 运算符，则还必须指定媒体类型，比如 @media not print（非打印设备）。</li>\n<li><strong>only:</strong> only 运算符仅在整个查询匹配时才用于应用样式，并且对于防止较早的浏览器应用所选样式很有用。 当不使用 only 时，旧版本的浏览器会将 screen and (max-width: 500px) 简单地解释为 screen，忽略查询的其余部分，并将其样式应用于所有屏幕。 如果使用 only 运算符，则还必须指定媒体类型</li>\n<li><strong>,:</strong> 逗号用于将多个媒体查询合并为一个规则。 逗号分隔列表中的每个查询都与其他查询分开处理。 因此，如果列表中的任何查询为 true，则整个 media 语句均返回 true。 换句话说，列表的行为类似于逻辑或 or 运算符</li>\n<li><strong>and</strong>: and 操作符用于将多个媒体查询规则组合成单条媒体查询，当每个查询规则都为真时则该条媒体查询为真，它还用于将媒体功能与媒体类型结合在一起</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 在不同媒体上用不同文件 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">&lt;!-- 宽度大于 900px 的屏幕使用该样式 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>screen and (min-width: 900px)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>widescreen.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">&lt;!-- 宽度小于或等于 600px 的屏幕使用该样式 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>screen and (max-width: 600px)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>smallscreen.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"css3-多媒体类型\"><a class=\"anchor\" href=\"#css3-多媒体类型\">#</a> CSS3 多媒体类型</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">all</td>\n<td style=\"text-align:left\">用于所有多媒体类型设备</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">print</td>\n<td style=\"text-align:left\">用于打印机</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">screen</td>\n<td style=\"text-align:left\">用于电脑屏幕，平板，智能手机等。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">speech</td>\n<td style=\"text-align:left\">用于屏幕阅读器</td>\n</tr>\n</tbody>\n</table>\n<p>在屏幕可视窗口尺寸小于 480 像素的设备上修改背景颜色</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@media</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 480px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> lightgreen<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"不同类型的判定\"><a class=\"anchor\" href=\"#不同类型的判定\">#</a> 不同类型的判定</h2>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 超小设备 (手机，600px 以下屏幕设备) */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token selector\">.example</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* 小设备 (平板电脑和大型手机，600 像素及以上) */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token selector\">.example</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/* 中型设备（平板电脑，768 像素及以上） */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token selector\">.example</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/* 大型设备（笔记本电脑 / 台式机，992 像素及以上） */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token selector\">.example</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">/* 超大型设备（大型笔记本电脑和台式机，1200 像素及以上） */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1200px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token selector\">.example</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"calp函数\"><a class=\"anchor\" href=\"#calp函数\">#</a> calp () 函数</h1>\n<p>这个是一个值，运用在尺寸计算上</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% + 100px<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% - 100px<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% * 100px<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% / 100px<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上述代码意思是，使元素在百分百宽度基础上加减乘除 100px</p>\n",
            "tags": [
                "计算机科学",
                "web",
                "css",
                "CSS"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/JavaScript/ES6/Symbol/",
            "url": "https://entropywhite.com/computer-science/web/JavaScript/ES6/Symbol/",
            "title": "Symbol",
            "date_published": "2022-06-30T14:25:00.000Z",
            "content_html": "<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>ES6 引入了一种新的原始数据类型 Symbol ，表示独一无二的值，最大的用法是用来定义对象的唯一属性名</p>\n<p>ES6 数据类型除了 Number 、 String 、 Boolean 、 Object、 null 和 undefined ，还新增了 Symbol</p>\n<hr>\n<h2 id=\"基本用法\"><a class=\"anchor\" href=\"#基本用法\">#</a> 基本用法</h2>\n<p>Symbol 函数栈不能用 new 命令，因为 Symbol 是原始数据类型，不是对象。可以接受一个字符串作为参数，为新创建的 Symbol 提供描述，用来显示在控制台或者作为字符串的时候使用，便于区分</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>let sy = Symbol(\"KK\");</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console.log(sy);   // Symbol(KK)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>typeof(sy);        // \"symbol\"</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>// 相同参数 Symbol() 返回的值不相等</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>let sy1 = Symbol(\"kk\"); </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sy === sy1;       // false</pre></td></tr></table></figure><h2 id=\"使用场景\"><a class=\"anchor\" href=\"#使用场景\">#</a> 使用场景</h2>\n<h3 id=\"作为属性名\"><a class=\"anchor\" href=\"#作为属性名\">#</a> 作为属性名</h3>\n<p><strong>用法</strong></p>\n<p>由于每一个 Symbol 的值都是不相等的，所以 Symbol 作为对象的属性名，可以保证属性不重名</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>let sy = Symbol(\"key1\");</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// 写法1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>let syObject = &#123;&#125;;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>syObject[sy] = \"kk\";</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console.log(syObject);    // &#123;Symbol(key1): \"kk\"&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>// 写法2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>let syObject = &#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  [sy]: \"kk\"</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>&#125;;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console.log(syObject);    // &#123;Symbol(key1): \"kk\"&#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>// 写法3</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>let syObject = &#123;&#125;;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Object.defineProperty(syObject, sy, &#123;value: \"kk\"&#125;);</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console.log(syObject);   // &#123;Symbol(key1): \"kk\"&#125;</pre></td></tr></table></figure><p>Symbol 作为对象属性名时不能用。运算符，要用方括号。因为。运算符后面是字符串，所以取到的是字符串 sy 属性，而不是 Symbol 值 sy 属性</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>let syObject = &#123;&#125;;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>syObject[sy] = \"kk\";</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>syObject[sy];  // \"kk\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>syObject.sy;   // undefined</pre></td></tr></table></figure><h3 id=\"注意点\"><a class=\"anchor\" href=\"#注意点\">#</a> 注意点</h3>\n<p>Symbol 值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问。但是不会出现在 for...in 、 for...of 的循环中，也不会被 Object.keys () 、 Object.getOwnPropertyNames () 返回。如果要读取到一个对象的 Symbol 属性，可以通过 Object.getOwnPropertySymbols () 和 Reflect.ownKeys () 取到</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>let syObject = &#123;&#125;;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>syObject[sy] = \"kk\";</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console.log(syObject);</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>for (let i in syObject) &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console.log(i);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;    // 无输出</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Object.keys(syObject);                     // []</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Object.getOwnPropertySymbols(syObject);    // [Symbol(key1)]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Reflect.ownKeys(syObject);                 // [Symbol(key1)]</pre></td></tr></table></figure><h3 id=\"定义常量\"><a class=\"anchor\" href=\"#定义常量\">#</a> 定义常量</h3>\n<p>在 ES5 使用字符串表示常量。例如：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>const COLOR_RED = \"red\";</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>const COLOR_YELLOW = \"yellow\";</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>const COLOR_BLUE = \"blue\";</pre></td></tr></table></figure><p>但是用字符串不能保证常量是独特的，这样会引起一些问题：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>const COLOR_RED = \"red\";</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>const COLOR_YELLOW = \"yellow\";</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>const COLOR_BLUE = \"blue\";</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>const MY_BLUE = \"blue\";</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>function ColorException(message) &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   this.message = message;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   this.name = \"ColorException\";</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>function getConstantName(color) &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    switch (color) &#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        case COLOR_RED :</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            return \"COLOR_RED\";</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        case COLOR_YELLOW :</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            return \"COLOR_YELLOW \";</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        case COLOR_BLUE:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            return \"COLOR_BLUE\";</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        case MY_BLUE:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            return \"MY_BLUE\";         </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        default:</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            throw new ColorException(\"Can't find this color\");</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>try &#123;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   var color = \"green\"; // green 引发异常</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   var colorName = getConstantName(color);</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>&#125; catch (e) &#123;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   var colorName = \"unknown\";</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   console.log(e.message, e.name); // 传递异常对象到错误处理</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>&#125;</pre></td></tr></table></figure><p>但是使用 Symbol 定义常量，这样就可以保证这一组常量的值都不相等。用 Symbol 来修改上面的例子</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>const COLOR_RED = Symbol(\"red\");</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>const COLOR_YELLOW = Symbol(\"yellow\");</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>const COLOR_BLUE = Symbol(\"blue\");</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>function ColorException(message) &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   this.message = message;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   this.name = \"ColorException\";</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>function getConstantName(color) &#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    switch (color) &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        case COLOR_RED :</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            return \"COLOR_RED\";</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        case COLOR_YELLOW :</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            return \"COLOR_YELLOW \";</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        case COLOR_BLUE:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            return \"COLOR_BLUE\";</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        default:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            throw new ColorException(\"Can't find this color\");</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>try &#123;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   var color = \"green\"; // green 引发异常</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   var colorName = getConstantName(color);</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>&#125; catch (e) &#123;</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   var colorName = \"unknown\";</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   console.log(e.message, e.name); // 传递异常对象到错误处理</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>&#125;</pre></td></tr></table></figure><p>Symbol 的值是唯一的，所以不会出现相同值得常量，即可以保证 switch 按照代码预想的方式执行</p>\n<h3 id=\"symbolfor\"><a class=\"anchor\" href=\"#symbolfor\">#</a> Symbol.for()</h3>\n<p>Symbol.for () 类似单例模式，首先会在全局搜索被登记的 Symbol 中是否有该字符串参数作为名称的 Symbol 值，如果有即返回该 Symbol 值，若没有则新建并返回一个以该字符串参数为名称的 Symbol 值，并登记在全局环境中供搜索</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>let yellow = Symbol(\"Yellow\");</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>let yellow1 = Symbol.for(\"Yellow\");</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>yellow === yellow1;      // false</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>let yellow2 = Symbol.for(\"Yellow\");</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>yellow1 === yellow2;     // true</pre></td></tr></table></figure><h3 id=\"symbolkeyfor\"><a class=\"anchor\" href=\"#symbolkeyfor\">#</a> Symbol.keyFor()</h3>\n<p>Symbol.keyFor () 返回一个已登记的 Symbol 类型值的 key ，用来检测该字符串参数作为名称的 Symbol 值是否已被登记</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>let yellow1 = Symbol.for(\"Yellow\");</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Symbol.keyFor(yellow1);    // \"Yellow\"</pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "web",
                "JavaScript",
                "ES6"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/JavaScript/ES6/Reflect%E4%B8%8EProxy/",
            "url": "https://entropywhite.com/computer-science/web/JavaScript/ES6/Reflect%E4%B8%8EProxy/",
            "title": "Reflect与Proxy",
            "date_published": "2022-06-30T14:22:00.000Z",
            "content_html": "<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>Proxy 与 Reflect 是 ES6 为了操作对象引入的 API 。</p>\n<p>Proxy 可以对目标对象的读取、函数调用等操作进行拦截，然后进行操作处理。它不直接操作对象，而是像代理模式，通过对象的代理对象进行操作，在进行这些操作时，可以添加一些需要的额外操作。</p>\n<p>Reflect 可以用于获取目标对象的行为，它与 Object 类似，但是更易读，为操作对象提供了一种更优雅的方式。它的方法与 Proxy 是对应的。</p>\n<hr>\n<h2 id=\"基本用法\"><a class=\"anchor\" href=\"#基本用法\">#</a> 基本用法</h2>\n<h3 id=\"proxy\"><a class=\"anchor\" href=\"#proxy\">#</a> Proxy</h3>\n<p>一个 Proxy 对象由两个部分组成： target 、 handler 。在通过 Proxy 构造函数生成实例对象时，需要提供这两个参数。 target 即目标对象， handler 是一个对象，声明了代理 target 的指定行为。</p>\n<pre><code>let target = &#123;\n    name: 'Tom',\n    age: 24\n&#125;\nlet handler = &#123;\n    get: function(target, key) &#123;\n        console.log('getting '+key);\n        return target[key]; // 不是target.key\n    &#125;,\n    set: function(target, key, value) &#123;\n        console.log('setting '+key);\n        target[key] = value;\n    &#125;\n&#125;\nlet proxy = new Proxy(target, handler)\nproxy.name     // 实际执行 handler.get\nproxy.age = 25 // 实际执行 handler.set\n// getting name\n// setting age\n// 25\n \n// target 可以为空对象\nlet targetEpt = &#123;&#125;\nlet proxyEpt = new Proxy(targetEpt, handler)\n// 调用 get 方法，此时目标对象为空，没有 name 属性\nproxyEpt.name // getting name\n// 调用 set 方法，向目标对象中添加了 name 属性\nproxyEpt.name = 'Tom'\n// setting name\n// &quot;Tom&quot;\n// 再次调用 get ，此时已经存在 name 属性\nproxyEpt.name\n// getting name\n// &quot;Tom&quot;\n \n// 通过构造函数新建实例时其实是对目标对象进行了浅拷贝，因此目标对象与代理对象会互相\n// 影响\ntargetEpt\n// &#123;name: &quot;Tom&quot;&#125;\n \n// handler 对象也可以为空，相当于不设置拦截操作，直接访问目标对象\nlet targetEmpty = &#123;&#125;\nlet proxyEmpty = new Proxy(targetEmpty,&#123;&#125;)\nproxyEmpty.name = &quot;Tom&quot;\ntargetEmpty // &#123;name: &quot;Tom&quot;&#125;\n</code></pre>\n<h3 id=\"实例方法\"><a class=\"anchor\" href=\"#实例方法\">#</a> 实例方法</h3>\n<pre><code>get(target, propKey, receiver)\n</code></pre>\n<p>用于 target 对象上 propKey 读取操作</p>\n<pre><code>let exam =&#123;\n    name: &quot;Tom&quot;,\n    age: 24\n&#125;\nlet proxy = new Proxy(exam, &#123;\n  get(target, propKey, receiver) &#123;\n    console.log('Getting ' + propKey);\n    return target[propKey];\n  &#125;\n&#125;)\nproxy.name \n// Getting name\n// &quot;Tom&quot;\n</code></pre>\n<p>get () 方法可以继承</p>\n<pre><code>let proxy = new Proxy(&#123;&#125;, &#123;\n  get(target, propKey, receiver) &#123;\n      // 实现私有属性读取保护\n      if(propKey[0] === '_')&#123;\n          throw new Erro(`Invalid attempt to get private     &quot;$&#123;propKey&#125;&quot;`);\n      &#125;\n      console.log('Getting ' + propKey);\n      return target[propKey];\n  &#125;\n&#125;);\n \nlet obj = Object.create(proxy);\nobj.name\n// Getting name\n</code></pre>\n<pre><code>set(target,propKey,value,receiver)\n</code></pre>\n<p>用于拦截 target 对象上的 propKey 的赋值操作。如果目标对象自身的某个属性，不可写且不可配置，那么 set 方法不起作用</p>\n<pre><code>let validator = &#123;\n    set: function(obj, prop, value) &#123;\n        if (prop === 'age') &#123;\n            if (!Number.isInteger(value)) &#123;\n                throw new TypeError('The age is not an integer');\n            &#125;\n            if (value &gt; 200) &#123;\n                throw new RangeError('The age seems invalid');\n            &#125;\n        &#125;\n        // 对于满足条件的 age 属性以及其他属性，直接保存\n        obj[prop] = value;\n    &#125;\n&#125;;\nlet proxy= new Proxy(&#123;&#125;, validator)\nproxy.age = 100;\nproxy.age           // 100\nproxy.age = 'oppps' // 报错\nproxy.age = 300     // 报错\n</code></pre>\n<p>第四个参数 receiver 表示原始操作行为所在对象，一般是 Proxy 实例本身</p>\n<pre><code>const handler = &#123;\n    set: function(obj, prop, value, receiver) &#123;\n        obj[prop] = receiver;\n    &#125;\n&#125;;\nconst proxy = new Proxy(&#123;&#125;, handler);\nproxy.name= 'Tom';\nproxy.name=== proxy // true\n \nconst exam = &#123;&#125;\nObject.setPrototypeOf(exam, proxy)\nexam.name = &quot;Tom&quot;\nexam.name === exam // true\n</code></pre>\n<p>注意，严格模式下，set 代理如果没有返回 true，就会报错</p>\n<h3 id=\"applytarget-ctx-args\"><a class=\"anchor\" href=\"#applytarget-ctx-args\">#</a> apply(target, ctx, args)</h3>\n<p>用于拦截函数的调用、call 和 reply 操作。target 表示目标对象，ctx 表示目标对象上下文，args 表示目标对象的参数数组</p>\n<pre><code>function sub(a, b)&#123;\n    return a - b;\n&#125;\nlet handler = &#123;\n    apply: function(target, ctx, args)&#123;\n        console.log('handle apply');\n        return Reflect.apply(...arguments);\n    &#125;\n&#125;\nlet proxy = new Proxy(sub, handler)\nproxy(2, 1) \n// handle apply\n// 1\n</code></pre>\n<pre><code>has(target, propKey)\n</code></pre>\n<p>用于拦截 HasProperty 操作，即在判断 target 对象是否存在 propKey 属性时，会被这个方法拦截。此方法不判断一个属性是对象自身的属性，还是继承的属性</p>\n<pre><code>let  handler = &#123;\n    has: function(target, propKey)&#123;\n        console.log(&quot;handle has&quot;);\n        return propKey in target;\n    &#125;\n&#125;\nlet exam = &#123;name: &quot;Tom&quot;&#125;\nlet proxy = new Proxy(exam, handler)\n'name' in proxy\n// handle has\n// true\n</code></pre>\n<p>注意：此方法不拦截 for ... in 循环。</p>\n<pre><code>construct(target, args)\n</code></pre>\n<p>用于拦截 new 命令。返回值必须为对象</p>\n<pre><code>let handler = &#123;\n    construct: function (target, args, newTarget) &#123;\n        console.log('handle construct')\n        return Reflect.construct(target, args, newTarget)  \n    &#125;\n&#125;\nclass Exam &#123; \n    constructor (name) &#123;  \n        this.name = name \n    &#125;\n&#125;\nlet ExamProxy = new Proxy(Exam, handler)\nlet proxyObj = new ExamProxy('Tom')\nconsole.log(proxyObj)\n// handle construct\n// exam &#123;name: &quot;Tom&quot;&#125;\n</code></pre>\n<pre><code>deleteProperty(target, propKey)\n</code></pre>\n<p>用于拦截 delete 操作，如果这个方法抛出错误或者返回 false ，propKey 属性就无法被 delete 命令删除。</p>\n<pre><code>defineProperty(target, propKey, propDesc)\n</code></pre>\n<p>用于拦截 Object.definePro 若目标对象不可扩展，增加目标对象上不存在的属性会报错；若属性不可写或不可配置，则不能改变这些属性。</p>\n<pre><code>let handler = &#123;\n    defineProperty: function(target, propKey, propDesc)&#123;\n        console.log(&quot;handle defineProperty&quot;);\n        return true;\n    &#125;\n&#125;\nlet target = &#123;&#125;\nlet proxy = new Proxy(target, handler)\nproxy.name = &quot;Tom&quot;\n// handle defineProperty\ntarget\n// &#123;name: &quot;Tom&quot;&#125;\n \n// defineProperty 返回值为false，添加属性操作无效\nlet handler1 = &#123;\n    defineProperty: function(target, propKey, propDesc)&#123;\n        console.log(&quot;handle defineProperty&quot;);\n        return false;\n    &#125;\n&#125;\nlet target1 = &#123;&#125;\nlet proxy1 = new Proxy(target1, handler1)\nproxy1.name = &quot;Jerry&quot;\ntarget1\n// &#123;&#125;\n</code></pre>\n<p><strong>erty 操作</strong></p>\n<pre><code>getOwnPropertyDescriptor(target, propKey)\n</code></pre>\n<p>用于拦截 Object.getOwnPropertyD () 返回值为属性描述对象或者 undefined</p>\n<pre><code>let handler = &#123;\n    getOwnPropertyDescriptor: function(target, propKey)&#123;\n        return Object.getOwnPropertyDescriptor(target, propKey);\n    &#125;\n&#125;\nlet target = &#123;name: &quot;Tom&quot;&#125;\nlet proxy = new Proxy(target, handler)\nObject.getOwnPropertyDescriptor(proxy, 'name')\n// &#123;value: &quot;Tom&quot;, writable: true, enumerable: true, configurable: \n// true&#125;\n</code></pre>\n<p><strong>ptor 属性</strong></p>\n<pre><code>getPrototypeOf(target)\n</code></pre>\n<p>主要用于拦截获取对象原型的操作。包括以下操作：</p>\n<pre><code>- Object.prototype._proto_\n- Object.prototype.isPrototypeOf()\n- Object.getPrototypeOf()\n- Reflect.getPrototypeOf()\n- instanceof\n</code></pre>\n<pre><code>let exam = &#123;&#125;\nlet proxy = new Proxy(&#123;&#125;,&#123;\n    getPrototypeOf: function(target)&#123;\n        return exam;\n    &#125;\n&#125;)\nObject.getPrototypeOf(proxy) // &#123;&#125;\n</code></pre>\n<p>注意，返回值必须是对象或者 null ，否则报错。另外，如果目标对象不可扩展（non-extensible），getPrototypeOf 方法必须返回目标对象的原型对象。</p>\n<pre><code>let proxy = new Proxy(&#123;&#125;,&#123;\n    getPrototypeOf: function(target)&#123;\n        return true;\n    &#125;\n&#125;)\nObject.getPrototypeOf(proxy)\n// TypeError: 'getPrototypeOf' on proxy: trap returned neither object // nor null\n</code></pre>\n<pre><code>isExtensible(target)\n</code></pre>\n<p>用于拦截 Object.isExtensible 操作。</p>\n<p>该方法只能返回布尔值，否则返回值会被自动转为布尔值。</p>\n<pre><code>let proxy = new Proxy(&#123;&#125;,&#123;\n    isExtensible:function(target)&#123;\n        return true;\n    &#125;\n&#125;)\nObject.isExtensible(proxy) // true\n</code></pre>\n<p>注意：它的返回值必须与目标对象的 isExtensible 属性保持一致，否则会抛出错误</p>\n<pre><code>let proxy = new Proxy(&#123;&#125;,&#123;\n    isExtensible:function(target)&#123;\n        return false;\n    &#125;\n&#125;)\nObject.isExtensible(proxy)\n// TypeError: 'isExtensible' on proxy: trap result does not reflect \n// extensibility of proxy target (which is 'true')\n</code></pre>\n<pre><code>ownKeys(target)\n</code></pre>\n<p>用于拦截对象自身属性的读取操作。主要包括以下操作：</p>\n<pre><code>- Object.getOwnPropertyNames()\n- Object.getOwnPropertySymbols()\n- Object.keys()\n- or...in\n</code></pre>\n<p>方法返回的数组成员，只能是字符串或 Symbol 值，否则会报错。</p>\n<p>若目标对象中含有不可配置的属性，则必须将这些属性在结果中返回，否则就会报错。</p>\n<p>若目标对象不可扩展，则必须全部返回且只能返回目标对象包含的所有属性，不能包含不存在的属性，否则也会报错。</p>\n<pre><code>let proxy = new Proxy( &#123;\n  name: &quot;Tom&quot;,\n  age: 24\n&#125;, &#123;\n    ownKeys(target) &#123;\n        return ['name'];\n    &#125;\n&#125;);\nObject.keys(proxy)\n// [ 'name' ]f返回结果中，三类属性会被过滤：\n//          - 目标对象上没有的属性\n//          - 属性名为 Symbol 值的属性\n//          - 不可遍历的属性\n \nlet target = &#123;\n  name: &quot;Tom&quot;,\n  [Symbol.for('age')]: 24,\n&#125;;\n// 添加不可遍历属性 'gender'\nObject.defineProperty(target, 'gender', &#123;\n  enumerable: false,\n  configurable: true,\n  writable: true,\n  value: 'male'\n&#125;);\nlet handler = &#123;\n    ownKeys(target) &#123;\n        return ['name', 'parent', Symbol.for('age'), 'gender'];\n    &#125;\n&#125;;\nlet proxy = new Proxy(target, handler);\nObject.keys(proxy)\n// ['name']\n</code></pre>\n<pre><code>preventExtensions(target)\n</code></pre>\n<p>拦截 Object.preventExtensions 操作。</p>\n<p>该方法必须返回一个布尔值，否则会自动转为布尔值。</p>\n<pre><code>// 只有目标对象不可扩展时（即 Object.isExtensible(proxy) 为 false ），\n// proxy.preventExtensions 才能返回 true ，否则会报错\nvar proxy = new Proxy(&#123;&#125;, &#123;\n  preventExtensions: function(target) &#123;\n    return true;\n  &#125;\n&#125;);\n// 由于 proxy.preventExtensions 返回 true，此处也会返回 true，因此会报错\nObject.preventExtensions(proxy) 被// TypeError: 'preventExtensions' on proxy: trap returned truish but // the proxy target is extensible\n \n// 解决方案\n var proxy = new Proxy(&#123;&#125;, &#123;\n  preventExtensions: function(target) &#123;\n    // 返回前先调用 Object.preventExtensions\n    Object.preventExtensions(target);\n    return true;\n  &#125;\n&#125;);\nObject.preventExtensions(proxy)\n// Proxy &#123;&#125;\n</code></pre>\n<pre><code>setPrototypeOf\n</code></pre>\n<p>主要用来拦截 Object.setPrototypeOf 方法。</p>\n<p>返回值必须为布尔值，否则会被自动转为布尔值。</p>\n<p>若目标对象不可扩展，setPrototypeOf 方法不得改变目标对象的原型。</p>\n<pre><code>let proto = &#123;&#125;\nlet proxy = new Proxy(function () &#123;&#125;, &#123;\n    setPrototypeOf: function(target, proto) &#123;\n        console.log(&quot;setPrototypeOf&quot;);\n        return true;\n    &#125;\n&#125;\n);\nObject.setPrototypeOf(proxy, proto);\n// setPrototypeOf\n</code></pre>\n<pre><code>Proxy.revocable()\n</code></pre>\n<p>用于返回一个可取消的 Proxy 实例</p>\n<pre><code>let &#123;proxy, revoke&#125; = Proxy.revocable(&#123;&#125;, &#123;&#125;);\nproxy.name = &quot;Tom&quot;;\nrevoke();\nproxy.name \n// TypeError: Cannot perform 'get' on a proxy that has been revoked\n</code></pre>\n<h3 id=\"reflect\"><a class=\"anchor\" href=\"#reflect\">#</a> Reflect</h3>\n<p>ES6 中将 Object 的一些明显属于语言内部的方法移植到了 Reflect 对象上（当前某些方法会同时存在于 Object 和 Reflect 对象上），未来的新方法会只部署在 Reflect 对象上。</p>\n<p>Reflect 对象对某些方法的返回结果进行了修改，使其更合理。</p>\n<p>Reflect 对象使用函数的方式实现了 Object 的命令式操作。</p>\n<p><strong>静态方法</strong></p>\n<pre><code>Reflect.get(target, name, receiver)\n</code></pre>\n<p>查找并返回 target 对象的 name 属性。</p>\n<pre><code>let exam = &#123;\n    name: &quot;Tom&quot;,\n    age: 24,\n    get info()&#123;\n        return this.name + this.age;\n    &#125;\n&#125;\nReflect.get(exam, 'name'); // &quot;Tom&quot;\n \n// 当 target 对象中存在 name 属性的 getter 方法， getter 方法的 this 会绑定 // receiver\nlet receiver = &#123;\n    name: &quot;Jerry&quot;,\n    age: 20\n&#125;\nReflect.get(exam, 'info', receiver); // Jerry20\n \n// 当 name 为不存在于 target 对象的属性时，返回 undefined\nReflect.get(exam, 'birth'); // undefined\n \n// 当 target 不是对象时，会报错\nReflect.get(1, 'name'); // TypeError\n</code></pre>\n<pre><code>Reflect.set(target, name, value, receiver)\n</code></pre>\n<p>将 target 的 name 属性设置为 value。返回值为 boolean ，true 表示修改成功，false 表示失败。当 target 为不存在的对象时，会报错</p>\n<pre><code>let exam = &#123;\n    name: &quot;Tom&quot;,\n    age: 24,\n    set info(value)&#123;\n        return this.age = value;\n    &#125;\n&#125;\nexam.age; // 24\nReflect.set(exam, 'age', 25); // true\nexam.age; // 25\n \n// value 为空时会将 name 属性清除\nReflect.set(exam, 'age', ); // true\nexam.age; // undefined\n \n// 当 target 对象中存在 name 属性 setter 方法时，setter 方法中的 this 会绑定 // receiver , 所以修改的实际上是 receiver 的属性,\nlet receiver = &#123;\n    age: 18\n&#125;\nReflect.set(exam, 'info', 1, receiver); // true\nreceiver.age; // 1\n \nlet receiver1 = &#123;\n    name: 'oppps'\n&#125;\nReflect.set(exam, 'info', 1, receiver1);\nreceiver1.age; // 1\n</code></pre>\n<pre><code>Reflect.has(obj, name)\n</code></pre>\n<p>是 name in obj 指令的函数化，用于查找 name 属性在 obj 对象中是否存在。返回值为 boolean。如果 obj 不是对象则会报错 TypeError</p>\n<pre><code>let exam = &#123;\n    name: &quot;Tom&quot;,\n    age: 24\n&#125;\nReflect.has(exam, 'name'); // true\n</code></pre>\n<pre><code>Reflect.deleteProperty(obj, property)\n</code></pre>\n<p>是 delete obj [property] 的函数化，用于删除 obj 对象的 property 属性，返回值为 boolean。如果 obj 不是对象则会报错 TypeError</p>\n<pre><code>let exam = &#123;\n    name: &quot;Tom&quot;,\n    age: 24\n&#125;\nReflect.deleteProperty(exam , 'name'); // true\nexam // &#123;age: 24&#125; \n// property 不存在时，也会返回 true\nReflect.deleteProperty(exam , 'name'); // true\n</code></pre>\n<pre><code>Reflect.construct(obj, args)\n</code></pre>\n<p>等同于 new target (...args)</p>\n<pre><code>function exam(name)&#123;\n    this.name = name;\n&#125;\nReflect.construct(exam, ['Tom']); // exam &#123;name: &quot;Tom&quot;&#125;\n</code></pre>\n<pre><code>Reflect.getPrototypeOf(obj)\n</code></pre>\n<p>用于读取 obj 的 <em>proto</em> 属性。在 obj 不是对象时不会像 Object 一样把 obj 转为对象，而是会报错</p>\n<pre><code>class Exam&#123;&#125;\nlet obj = new Exam()\nReflect.getPrototypeOf(obj) === Exam.prototype // true\n</code></pre>\n<pre><code>Reflect.setPrototypeOf(obj, newProto)\n</code></pre>\n<p>用于设置目标对象的 prototype。</p>\n<pre><code>let obj =&#123;&#125;\nReflect.setPrototypeOf(obj, Array.prototype); // true\n</code></pre>\n<pre><code>Reflect.apply(func, thisArg, args)\n</code></pre>\n<p>等同于 Function.prototype.apply.call (func, thisArg, args) 。func 表示目标函数；thisArg 表示目标函数绑定的 this 对象；args 表示目标函数调用时传入的参数列表，可以是数组或类似数组的对象。若目标函数无法调用，会抛出 TypeError</p>\n<pre><code>Reflect.apply(Math.max, Math, [1, 3, 5, 3, 1]); // 5\n</code></pre>\n<pre><code>Reflect.defineProperty(target, propertyKey, attributes)\n</code></pre>\n<p>用于为目标对象定义属性。如果 target 不是对象，会抛出错误</p>\n<pre><code>let myDate= &#123;&#125;\nReflect.defineProperty(MyDate, 'now', &#123;\n  value: () =&gt; Date.now()\n&#125;); // true\n \nconst student = &#123;&#125;;\nReflect.defineProperty(student, &quot;name&quot;, &#123;value: &quot;Mike&quot;&#125;); // true\nstudent.name; // &quot;Mike&quot;\n</code></pre>\n<pre><code>Reflect.getOwnPropertyDescriptor(target, propertyKey)\n</code></pre>\n<p>用于得到 target 对象的 propertyKey 属性的描述对象。在 target 不是对象时，会抛出错误表示参数非法，不会将非对象转换为对象</p>\n<pre><code>var exam = &#123;&#125;\nReflect.defineProperty(exam, 'name', &#123;\n  value: true,\n  enumerable: false,\n&#125;)\nReflect.getOwnPropertyDescriptor(exam, 'name')\n// &#123; configurable: false, enumerable: false, value: true, writable:\n// false&#125;\n \n \n// propertyKey 属性在 target 对象中不存在时，返回 undefined\nReflect.getOwnPropertyDescriptor(exam, 'age') // undefined\n</code></pre>\n<pre><code>Reflect.isExtensible(target)\n</code></pre>\n<p>用于判断 target 对象是否可扩展。返回值为 boolean 。如果 target 参数不是对象，会抛出错误</p>\n<pre><code>let exam = &#123;&#125;\nReflect.isExtensible(exam) // true\n</code></pre>\n<pre><code>Reflect.preventExtensions(target)\n</code></pre>\n<p>用于让 target 对象变为不可扩展。如果 target 参数不是对象，会抛出错</p>\n<pre><code>let exam = &#123;&#125;\nReflect.preventExtensions(exam) // true\n</code></pre>\n<pre><code>Reflect.ownKeys(target)\n</code></pre>\n<p>用于返回 target 对象的所有属性，等同于 Object.getOwnPropertyNames 与 Object.getOwnPropertySymbols 之和</p>\n<pre><code>var exam = &#123;\n  name: 1,\n  [Symbol.for('age')]: 4\n&#125;\nReflect.ownKeys(exam) // [&quot;name&quot;, Symbol(age)]\n</code></pre>\n<h2 id=\"组合使用\"><a class=\"anchor\" href=\"#组合使用\">#</a> 组合使用</h2>\n<p>Reflect 对象的方法与 Proxy 对象的方法是一一对应的。所以 Proxy 对象的方法可以通过调用 Reflect 对象的方法获取默认行为，然后进行额外操作</p>\n<pre><code>let exam = &#123;\n    name: &quot;Tom&quot;,\n    age: 24\n&#125;\nlet handler = &#123;\n    get: function(target, key)&#123;\n        console.log(&quot;getting &quot;+key);\n        return Reflect.get(target,key);\n    &#125;,\n    set: function(target, key, value)&#123;\n        console.log(&quot;setting &quot;+key+&quot; to &quot;+value)\n        Reflect.set(target, key, value);\n    &#125;\n&#125;\nlet proxy = new Proxy(exam, handler)\nproxy.name = &quot;Jerry&quot;\nproxy.name\n// setting name to Jerry\n// getting name\n// &quot;Jerry&quot;\n</code></pre>\n<h3 id=\"使用场景拓展\"><a class=\"anchor\" href=\"#使用场景拓展\">#</a> 使用场景拓展</h3>\n<p><strong>实现观察者模式</strong></p>\n<pre><code>// 定义 Set 集合\nconst queuedObservers = new Set();\n// 把观察者函数都放入 Set 集合中\nconst observe = fn =&gt; queuedObservers.add(fn);\n// observable 返回原始对象的代理，拦截赋值操作\nconst observable = obj =&gt; new Proxy(obj, &#123;set&#125;);\nfunction set(target, key, value, receiver) &#123;\n  // 获取对象的赋值操作\n  const result = Reflect.set(target, key, value, receiver);\n  // 执行所有观察者\n  queuedObservers.forEach(observer =&gt; observer());\n  // 执行赋值操作\n  return result;\n&#125;\n</code></pre>\n<pre><code>fn =&gt; queuedObservers.add(fn)\n</code></pre>\n<p>等于：</p>\n<pre><code>function(fn)&#123; \n    return queuedObservers.add(fn) ;\n&#125;;\nobj =&gt; new Proxy(obj, &#123;set&#125;)\n</code></pre>\n<p>等于：</p>\n<pre><code>function(obj)&#123;\n    return new Proxy(obj, &#123;set&#125;);\n&#125;\nobserver =&gt; observer()\n</code></pre>\n<p>等于：</p>\n<pre><code>function(observer )&#123;\n    return observer()\n&#125;\n</code></pre>\n",
            "tags": [
                "计算机科学",
                "web",
                "JavaScript",
                "ES6"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/JavaScript/ES6/JS-Promise%E5%AF%B9%E8%B1%A1/",
            "url": "https://entropywhite.com/computer-science/web/JavaScript/ES6/JS-Promise%E5%AF%B9%E8%B1%A1/",
            "title": "JS-Promise对象",
            "date_published": "2022-06-30T14:21:00.000Z",
            "content_html": "<p>ECMAscript 6 原生提供了 Promise 对象。</p>\n<p>Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。</p>\n<h3 id=\"promise-对象有以下两个特点\"><a class=\"anchor\" href=\"#promise-对象有以下两个特点\">#</a> Promise 对象有以下两个特点:</h3>\n<p>1、对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：</p>\n<ul>\n<li>pending: 初始状态，不是成功或失败状态。</li>\n<li>fulfilled: 意味着操作成功完成。</li>\n<li>rejected: 意味着操作失败。</li>\n</ul>\n<p>只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 Promise 这个名字的由来，它的英语意思就是「承诺」，表示其他手段无法改变。</p>\n<p>2、一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>\n<h3 id=\"promise-优缺点\"><a class=\"anchor\" href=\"#promise-优缺点\">#</a> Promise 优缺点</h3>\n<p>有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise 对象提供统一的接口，使得控制异步操作更加容易。</p>\n<p>Promise 也有一些缺点。首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 Pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>\n<h3 id=\"promise-创建\"><a class=\"anchor\" href=\"#promise-创建\">#</a> Promise 创建</h3>\n<p>要想创建一个 promise 对象、可以使用 new 来调用 Promise 的构造器来进行实例化。</p>\n<p>下面是创建 promise 的步骤：</p>\n<pre><code>var promise = new Promise(function(resolve, reject) &#123;\n    // 异步处理\n    // 处理结束后、调用resolve 或 reject\n&#125;);\n</code></pre>\n<p>Promise 构造函数包含一个参数和一个带有 resolve（解析）和 reject（拒绝）两个参数的回调。在回调中执行一些操作（例如异步），如果一切都正常，则调用 resolve，否则调用 reject。</p>\n<pre><code>var myFirstPromise = new Promise(function(resolve, reject)&#123;\n    //当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)\n    //在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.\n    setTimeout(function()&#123;\n        resolve(&quot;成功!&quot;); //代码正常执行！\n    &#125;, 250);\n&#125;);\n \nmyFirstPromise.then(function(successMessage)&#123;\n    //successMessage的值是上面调用resolve(...)方法传入的值.\n    //successMessage参数不一定非要是字符串类型，这里只是举个例子\n    document.write(&quot;Yay! &quot; + successMessage);\n&#125;);\n</code></pre>\n<p>对于已经实例化过的 promise 对象可以调用 promise.then () 方法，传递 resolve 和 reject 方法作为回调。</p>\n<p>promise.then () 是 promise 最为常用的方法。</p>\n<pre><code>promise.then(onFulfilled, onRejected)\n</code></pre>\n<p>promise 简化了对 error 的处理，上面的代码我们也可以这样写：</p>\n<pre><code>promise.then(onFulfilled).catch(onRejected)\n</code></pre>\n<hr>\n<h2 id=\"promise-ajax\"><a class=\"anchor\" href=\"#promise-ajax\">#</a> Promise Ajax</h2>\n<p>下面是一个用 Promise 对象实现的 Ajax 操作的例子。</p>\n<pre><code>function ajax(URL) &#123;\n    return new Promise(function (resolve, reject) &#123;\n        var req = new XMLHttpRequest(); \n        req.open('GET', URL, true);\n        req.onload = function () &#123;\n        if (req.status === 200) &#123; \n                resolve(req.responseText);\n            &#125; else &#123;\n                reject(new Error(req.statusText));\n            &#125; \n        &#125;;\n        req.onerror = function () &#123;\n            reject(new Error(req.statusText));\n        &#125;;\n        req.send(); \n    &#125;);\n&#125;\nvar URL = &quot;/try/ajax/testpromise.php&quot;; \najax(URL).then(function onFulfilled(value)&#123;\n    document.write('内容是：' + value); \n&#125;).catch(function onRejected(error)&#123;\n    document.write('错误：' + error); \n&#125;);\n</code></pre>\n<p>上面代码中，resolve 方法和 reject 方法调用时，都带有参数。它们的参数会被传递给回调函数。reject 方法的参数通常是 Error 对象的实例，而 resolve 方法的参数除了正常的值以外，还可能是另一个 Promise 实例，比如像下面这样。</p>\n<pre><code>var p1 = new Promise(function(resolve, reject)&#123;\n  // ... some code\n&#125;);\n \nvar p2 = new Promise(function(resolve, reject)&#123;\n  // ... some code\n  resolve(p1);\n&#125;)\n</code></pre>\n<p>上面代码中，p1 和 p2 都是 Promise 的实例，但是 p2 的 resolve 方法将 p1 作为参数，这时 p1 的状态就会传递给 p2。如果调用的时候，p1 的状态是 pending，那么 p2 的回调函数就会等待 p1 的状态改变；如果 p1 的状态已经是 fulfilled 或者 rejected，那么 p2 的回调函数将会立刻执行。</p>\n<hr>\n<h2 id=\"promiseprototypethen方法链式操作\"><a class=\"anchor\" href=\"#promiseprototypethen方法链式操作\">#</a> Promise.prototype.then 方法：链式操作</h2>\n<p>Promise.prototype.then 方法返回的是一个新的 Promise 对象，因此可以采用链式写法。</p>\n<pre><code>getJSON(&quot;/posts.json&quot;).then(function(json) &#123;\n  return json.post;\n&#125;).then(function(post) &#123;\n  // proceed\n&#125;);\n</code></pre>\n<p>上面的代码使用 then 方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</p>\n<p>如果前一个回调函数返回的是 Promise 对象，这时后一个回调函数就会等待该 Promise 对象有了运行结果，才会进一步调用。</p>\n<pre><code>getJSON(&quot;/post/1.json&quot;).then(function(post) &#123;\n  return getJSON(post.commentURL);\n&#125;).then(function(comments) &#123;\n  // 对comments进行处理\n&#125;);\n</code></pre>\n<p>这种设计使得嵌套的异步操作，可以被很容易得改写，从回调函数的 &quot;横向发展&quot; 改为 &quot;向下发展&quot;。</p>\n<hr>\n<h2 id=\"promiseprototypecatch方法捕捉错误\"><a class=\"anchor\" href=\"#promiseprototypecatch方法捕捉错误\">#</a> Promise.prototype.catch 方法：捕捉错误</h2>\n<p>Promise.prototype.catch 方法是 Promise.prototype.then (null, rejection) 的别名，用于指定发生错误时的回调函数。</p>\n<pre><code>getJSON(&quot;/posts.json&quot;).then(function(posts) &#123;\n  // some code\n&#125;).catch(function(error) &#123;\n  // 处理前一个回调函数运行时发生的错误\n  console.log('发生错误！', error);\n&#125;);\n</code></pre>\n<p>Promise 对象的错误具有 &quot;冒泡&quot; 性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个 catch 语句捕获</p>\n<pre><code>getJSON(&quot;/post/1.json&quot;).then(function(post) &#123;\n  return getJSON(post.commentURL);\n&#125;).then(function(comments) &#123;\n  // some code\n&#125;).catch(function(error) &#123;\n  // 处理前两个回调函数的错误\n&#125;);\n</code></pre>\n<h2 id=\"promiseall方法promiserace方法\"><a class=\"anchor\" href=\"#promiseall方法promiserace方法\">#</a> Promise.all 方法，Promise.race 方法</h2>\n<p>Promise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<pre><code>var p = Promise.all([p1,p2,p3]);\n</code></pre>\n<p>上面代码中，Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 对象的实例。（Promise.all 方法的参数不一定是数组，但是必须具有 iterator 接口，且返回的每个成员都是 Promise 实例。）</p>\n<p>p 的状态由 p1、p2、p3 决定，分成两种情况。</p>\n<ul>\n<li>（1）只有 p1、p2、p3 的状态都变成 fulfilled，p 的状态才会变成 fulfilled，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。</li>\n<li>（2）只要 p1、p2、p3 之中有一个被 rejected，p 的状态就变成 rejected，此时第一个被 reject 的实例的返回值，会传递给 p 的回调函数。</li>\n</ul>\n<p>下面是一个具体的例子。</p>\n<pre><code>// 生成一个Promise对象的数组\nvar promises = [2, 3, 5, 7, 11, 13].map(function(id)&#123;\n  return getJSON(&quot;/post/&quot; + id + &quot;.json&quot;);\n&#125;);\n \nPromise.all(promises).then(function(posts) &#123;\n  // ...  \n&#125;).catch(function(reason)&#123;\n  // ...\n&#125;);\n</code></pre>\n<p>Promise.race 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<pre><code>var p = Promise.race([p1,p2,p3]);\n</code></pre>\n<p>上面代码中，只要 p1、p2、p3 之中有一个实例率先改变状态，p 的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 p 的返回值。</p>\n<p>如果 Promise.all 方法和 Promise.race 方法的参数，不是 Promise 实例，就会先调用下面讲到的 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理。</p>\n<hr>\n<h2 id=\"promiseresolve-方法promisereject-方法\"><a class=\"anchor\" href=\"#promiseresolve-方法promisereject-方法\">#</a> Promise.resolve 方法，Promise.reject 方法</h2>\n<p>有时需要将现有对象转为 Promise 对象，Promise.resolve 方法就起到这个作用。</p>\n<pre><code>var jsPromise = Promise.resolve($.ajax('/whatever.json'));\n</code></pre>\n<p>上面代码将 jQuery 生成 deferred 对象，转为一个新的 ES6 的 Promise 对象。</p>\n<p>如果 Promise.resolve 方法的参数，不是具有 then 方法的对象（又称 thenable 对象），则返回一个新的 Promise 对象，且它的状态为 fulfilled。</p>\n<pre><code>var p = Promise.resolve('Hello');\n \np.then(function (s)&#123;\n  console.log(s)\n&#125;);\n// Hello\n</code></pre>\n<p>上面代码生成一个新的 Promise 对象的实例 p，它的状态为 fulfilled，所以回调函数会立即执行，Promise.resolve 方法的参数就是回调函数的参数。</p>\n<p>如果 Promise.resolve 方法的参数是一个 Promise 对象的实例，则会被原封不动地返回。</p>\n<p>Promise.reject (reason) 方法也会返回一个新的 Promise 实例，该实例的状态为 rejected。Promise.reject 方法的参数 reason，会被传递给实例的回调函数。</p>\n<pre><code>var p = Promise.reject('出错了');\n \np.then(null, function (s)&#123;\n  console.log(s)\n&#125;);\n// 出错了\n</code></pre>\n<p>上面代码生成一个 Promise 对象的实例，状态为 rejected，回调函数会立即执行</p>\n",
            "tags": [
                "计算机科学",
                "web",
                "JavaScript",
                "ES6"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/JavaScript/ES6/Map%E4%B8%8ESet/",
            "url": "https://entropywhite.com/computer-science/web/JavaScript/ES6/Map%E4%B8%8ESet/",
            "title": "Map与Set",
            "date_published": "2022-06-30T14:21:00.000Z",
            "content_html": "<h2 id=\"map-对象\"><a class=\"anchor\" href=\"#map-对象\">#</a> Map 对象</h2>\n<p>Map 对象保存键值对。任何值 (对象或者原始值) 都可以作为一个键或一个值。</p>\n<h2 id=\"maps-和-objects-的区别\"><a class=\"anchor\" href=\"#maps-和-objects-的区别\">#</a> Maps 和 Objects 的区别</h2>\n<ul>\n<li>一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。</li>\n<li>Map 中的键值是有序的（FIFO 原则），而添加到对象中的键则不是。</li>\n<li>Map 的键值对个数可以从 size 属性获取，而 Object 的键值对个数只能手动计算。</li>\n<li>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。</li>\n</ul>\n<h3 id=\"map-中的-key\"><a class=\"anchor\" href=\"#map-中的-key\">#</a> Map 中的 key</h3>\n<p><strong>key 是字符串</strong></p>\n<pre><code>var myMap = new Map();\nvar keyString = &quot;a string&quot;; \n \nmyMap.set(keyString, &quot;和键'a string'关联的值&quot;);\n \nmyMap.get(keyString);    // &quot;和键'a string'关联的值&quot;\nmyMap.get(&quot;a string&quot;);   // &quot;和键'a string'关联的值&quot;\n                         // 因为 keyString === 'a string'\n</code></pre>\n<p><strong>key 是对象</strong></p>\n<pre><code>var myMap = new Map();\nvar keyObj = &#123;&#125;, \n \nmyMap.set(keyObj, &quot;和键 keyObj 关联的值&quot;);\n\nmyMap.get(keyObj); // &quot;和键 keyObj 关联的值&quot;\nmyMap.get(&#123;&#125;); // undefined, 因为 keyObj !== &#123;&#125;\n</code></pre>\n<p><strong>key 是函数</strong></p>\n<pre><code>var myMap = new Map();\nvar keyFunc = function () &#123;&#125;, // 函数\n \nmyMap.set(keyFunc, &quot;和键 keyFunc 关联的值&quot;);\n \nmyMap.get(keyFunc); // &quot;和键 keyFunc 关联的值&quot;\nmyMap.get(function() &#123;&#125;) // undefined, 因为 keyFunc !== function () &#123;&#125;\n</code></pre>\n<p><strong>key 是 NaN</strong></p>\n<pre><code>var myMap = new Map();\nmyMap.set(NaN, &quot;not a number&quot;);\n \nmyMap.get(NaN); // &quot;not a number&quot;\n \nvar otherNaN = Number(&quot;foo&quot;);\nmyMap.get(otherNaN); // &quot;not a number&quot;\n</code></pre>\n<h3 id=\"map-的迭代\"><a class=\"anchor\" href=\"#map-的迭代\">#</a> Map 的迭代</h3>\n<p>对 Map 进行遍历，以下两个最高级。</p>\n<h3 id=\"forof\"><a class=\"anchor\" href=\"#forof\">#</a> for...of</h3>\n<pre><code>var myMap = new Map();\nmyMap.set(0, &quot;zero&quot;);\nmyMap.set(1, &quot;one&quot;);\n \n// 将会显示两个 log。 一个是 &quot;0 = zero&quot; 另一个是 &quot;1 = one&quot;\nfor (var [key, value] of myMap) &#123;\n  console.log(key + &quot; = &quot; + value);\n&#125;\nfor (var [key, value] of myMap.entries()) &#123;\n  console.log(key + &quot; = &quot; + value);\n&#125;\n/* 这个 entries 方法返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的 [key, value] 数组。 */\n \n// 将会显示两个log。 一个是 &quot;0&quot; 另一个是 &quot;1&quot;\nfor (var key of myMap.keys()) &#123;\n  console.log(key);\n&#125;\n/* 这个 keys 方法返回一个新的 Iterator 对象， 它按插入顺序包含了 Map 对象中每个元素的键。 */\n \n// 将会显示两个log。 一个是 &quot;zero&quot; 另一个是 &quot;one&quot;\nfor (var value of myMap.values()) &#123;\n  console.log(value);\n&#125;\n/* 这个 values 方法返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的值。 */\n</code></pre>\n<h3 id=\"foreach\"><a class=\"anchor\" href=\"#foreach\">#</a> forEach()</h3>\n<pre><code>var myMap = new Map();\nmyMap.set(0, &quot;zero&quot;);\nmyMap.set(1, &quot;one&quot;);\n \n// 将会显示两个 logs。 一个是 &quot;0 = zero&quot; 另一个是 &quot;1 = one&quot;\nmyMap.forEach(function(value, key) &#123;\n  console.log(key + &quot; = &quot; + value);\n&#125;, myMap)\n</code></pre>\n<h3 id=\"map-对象的操作\"><a class=\"anchor\" href=\"#map-对象的操作\">#</a> Map 对象的操作</h3>\n<p><strong>Map 与 Array 的转换</strong></p>\n<pre><code>var kvArray = [[&quot;key1&quot;, &quot;value1&quot;], [&quot;key2&quot;, &quot;value2&quot;]];\n \n// Map 构造函数可以将一个 二维 键值对数组转换成一个 Map 对象\nvar myMap = new Map(kvArray);\n \n// 使用 Array.from 函数可以将一个 Map 对象转换成一个二维键值对数组\nvar outArray = Array.from(myMap);\n</code></pre>\n<p><strong>Map 的克隆</strong></p>\n<pre><code>var myMap1 = new Map([[&quot;key1&quot;, &quot;value1&quot;], [&quot;key2&quot;, &quot;value2&quot;]]);\nvar myMap2 = new Map(myMap1);\n \nconsole.log(original === clone); \n// 打印 false。 Map 对象构造函数生成实例，迭代出新的对象。\n</code></pre>\n<p><strong>Map 的合并</strong></p>\n<pre><code>var first = new Map([[1, 'one'], [2, 'two'], [3, 'three'],]);\nvar second = new Map([[1, 'uno'], [2, 'dos']]);\n \n// 合并两个 Map 对象时，如果有重复的键值，则后面的会覆盖前面的，对应值即 uno，dos， three\nvar merged = new Map([...first, ...second]);\n</code></pre>\n<hr>\n<h2 id=\"set-对象\"><a class=\"anchor\" href=\"#set-对象\">#</a> Set 对象</h2>\n<p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p>\n<h3 id=\"set-中的特殊值\"><a class=\"anchor\" href=\"#set-中的特殊值\">#</a> Set 中的特殊值</h3>\n<p>Set 对象存储的值总是唯一的，所以需要判断两个值是否恒等。有几个特殊值需要特殊对待：</p>\n<ul>\n<li>+0 与 -0 在存储判断唯一性的时候是恒等的，所以不重复；</li>\n<li>undefined 与 undefined 是恒等的，所以不重复；</li>\n<li>NaN 与 NaN 是不恒等的，但是在 Set 中只能存一个，不重复。</li>\n</ul>\n<p><strong>代码</strong></p>\n<pre><code>let mySet = new Set();\n \nmySet.add(1); // Set(1) &#123;1&#125;\nmySet.add(5); // Set(2) &#123;1, 5&#125;\nmySet.add(5); // Set(2) &#123;1, 5&#125; 这里体现了值的唯一性\nmySet.add(&quot;some text&quot;); \n// Set(3) &#123;1, 5, &quot;some text&quot;&#125; 这里体现了类型的多样性\nvar o = &#123;a: 1, b: 2&#125;; \nmySet.add(o);\nmySet.add(&#123;a: 1, b: 2&#125;); \n// Set(5) &#123;1, 5, &quot;some text&quot;, &#123;…&#125;, &#123;…&#125;&#125; \n// 这里体现了对象之间引用不同不恒等，即使值相同，Set 也能存储\n</code></pre>\n<h3 id=\"类型转换\"><a class=\"anchor\" href=\"#类型转换\">#</a> 类型转换</h3>\n<p><strong>Array</strong></p>\n<pre><code>// Array 转 Set\nvar mySet = new Set([&quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;]);\n// 用...操作符，将 Set 转 Array\nvar myArray = [...mySet];\nString\n// String 转 Set\nvar mySet = new Set('hello');  // Set(4) &#123;&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;o&quot;&#125;\n// 注：Set 中 toString 方法是不能将 Set 转换成 String\n</code></pre>\n<h3 id=\"set-对象作用\"><a class=\"anchor\" href=\"#set-对象作用\">#</a> Set 对象作用</h3>\n<p><strong>数组去重</strong></p>\n<pre><code>var mySet = new Set([1, 2, 3, 4, 4]); [...mySet]; // [1, 2, 3, 4]\n</code></pre>\n<p><strong>并集</strong></p>\n<pre><code>var a = new Set([1, 2, 3]); \nvar b = new Set([4, 3, 2]); \nvar union = new Set([...a, ...b]); // &#123;1, 2, 3, 4&#125;\n</code></pre>\n<p><strong>交集</strong></p>\n<pre><code>var a = new Set([1, 2, 3]); \nvar b = new Set([4, 3, 2]); \nvar intersect = new Set([...a].filter(x =&gt; b.has(x))); // &#123;2, 3&#125;\n</code></pre>\n<p><strong>差集</strong></p>\n<pre><code>var a = new Set([1, 2, 3]); \nvar b = new Set([4, 3, 2]); \nvar difference = new Set([...a].filter(x =&gt; !b.has(x))); // &#123;1&#125;\nvar difference =new Set([...[...a].filter(x =&gt; !b.has(x)),...[...b].filter(x =&gt; !a.has(x))]); // &#123;1,4&#125;\n</code></pre>\n<p><strong>1、[...a]</strong></p>\n<p>[...a] 就是将 set 转换成 array。以后需要将 set 转换成 array 基本都使用这种方法。</p>\n<p><strong>2、[...a].filter()</strong></p>\n<p>Array.filter (function (x)) 把传入的函数 function (x) 依次作用于每个元素，x 为元素的值，然后根据返回值是 true 还是 false 决定保留还是丢弃该元素。</p>\n<p>意思就是遍历当前数组，当遍历到某个元素时，返回值为 false 就将该元素从数组中剔除。</p>\n<p>filter () 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p>\n<p><strong>3、 =&gt; 则是一种简写方法。</strong></p>\n<pre><code>x =&gt; x * x \n</code></pre>\n<p>相当于：</p>\n<pre><code>function(x)&#123;return x*x&#125;\n</code></pre>\n<p>所以 <strong>x =&gt; b.has(x)</strong> 本质是一个函数相当于 <strong>function(x){return b.has（x)}</strong>。</p>\n<p><strong>4、b.has(x)</strong></p>\n<p>Set.has (x) 是 set 中的一个方法。即判断当前 set 中是否含有 x，如果有返回 true，没有返回 false。</p>\n<p>所以这段程序也可以写成：</p>\n<pre><code>var a = new Set([1, 2, 3]); \nvar b = new Set([4, 3, 2]); \nvar arr = [...a];            //将a转换成数组\nvar fArr = arr.filter(function(x)&#123;    //使用filter过滤数组，并将新数组返回到fArr\n    return b.has(x);        //判断b中是否含有a中的元素，没有则返回false\n&#125;)\nvar intersect = new Set(fArr);          //将fArr转换成set\nconsole.log(fArr);\n</code></pre>\n",
            "tags": [
                "计算机科学",
                "web",
                "JavaScript",
                "ES6"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/JavaScript/ES6/Promise%E5%AF%B9%E8%B1%A1/",
            "url": "https://entropywhite.com/computer-science/web/JavaScript/ES6/Promise%E5%AF%B9%E8%B1%A1/",
            "title": "Promise对象",
            "date_published": "2022-06-30T14:21:00.000Z",
            "content_html": "<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>是异步编程的一种解决方案。</p>\n<p>从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。</p>\n<h2 id=\"promise-状态\"><a class=\"anchor\" href=\"#promise-状态\">#</a> Promise 状态</h2>\n<h3 id=\"状态的特点\"><a class=\"anchor\" href=\"#状态的特点\">#</a> 状态的特点</h3>\n<p>Promise 异步操作有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。除了异步操作的结果，任何其他操作都无法改变这个状态。</p>\n<p>Promise 对象只有：从 pending 变为 fulfilled 和从 pending 变为 rejected 的状态改变。只要处于 fulfilled 和 rejected ，状态就不会再变了即 resolved（已定型）。</p>\n<pre><code>const p1 = new Promise(function(resolve,reject)&#123;\n    resolve('success1');\n    resolve('success2');\n&#125;); \nconst p2 = new Promise(function(resolve,reject)&#123;  \n    resolve('success3'); \n    reject('reject');\n&#125;);\np1.then(function(value)&#123;  \n    console.log(value); // success1\n&#125;);\np2.then(function(value)&#123; \n    console.log(value); // success3\n&#125;);\n</code></pre>\n<h3 id=\"状态的缺点\"><a class=\"anchor\" href=\"#状态的缺点\">#</a> 状态的缺点</h3>\n<p>无法取消 Promise ，一旦新建它就会立即执行，无法中途取消。</p>\n<p>如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。</p>\n<p>当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>\n<h2 id=\"then-方法\"><a class=\"anchor\" href=\"#then-方法\">#</a> then 方法</h2>\n<p>then 方法接收两个函数作为参数，第一个参数是 Promise 执行成功时的回调，第二个参数是 Promise 执行失败时的回调，两个函数只会有一个被调用。</p>\n<h3 id=\"then-方法的特点\"><a class=\"anchor\" href=\"#then-方法的特点\">#</a> then 方法的特点</h3>\n<p>在 JavaScript 事件队列的当前运行完成之前，回调函数永远不会被调用</p>\n<pre><code>const p = new Promise(function(resolve,reject)&#123;\n  resolve('success');\n&#125;);\n \np.then(function(value)&#123;\n  console.log(value);\n&#125;);\n \nconsole.log('first');\n// first\n// success\n</code></pre>\n<p>通过 <strong>.then</strong> 形式添加的回调函数，不论什么时候，都会被调用。</p>\n<p>通过多次调用</p>\n<p>.then</p>\n<p>，可以添加多个回调函数，它们会按照插入顺序并且独立运行。</p>\n<pre><code>const p = new Promise(function(resolve,reject)&#123;\n  resolve(1);\n&#125;).then(function(value)&#123; // 第一个then // 1\n  console.log(value);\n  return value * 2;\n&#125;).then(function(value)&#123; // 第二个then // 2\n  console.log(value);\n&#125;).then(function(value)&#123; // 第三个then // undefined\n  console.log(value);\n  return Promise.resolve('resolve'); \n&#125;).then(function(value)&#123; // 第四个then // resolve\n  console.log(value);\n  return Promise.reject('reject'); \n&#125;).then(function(value)&#123; // 第五个then //reject:reject\n  console.log('resolve:' + value);\n&#125;, function(err) &#123;\n  console.log('reject:' + err);\n&#125;);\n</code></pre>\n<p>then 方法将返回一个 resolved 或 rejected 状态的 Promise 对象用于链式调用，且 Promise 对象的值就是这个返回值。</p>\n<h3 id=\"then-方法注意点\"><a class=\"anchor\" href=\"#then-方法注意点\">#</a> then 方法注意点</h3>\n<p>简便的 Promise 链式编程最好保持扁平化，不要嵌套 Promise。</p>\n<p>注意总是返回或终止 Promise 链。</p>\n<pre><code>const p1 = new Promise(function(resolve,reject)&#123;\n  resolve(1);\n&#125;).then(function(result) &#123;\n  p2(result).then(newResult =&gt; p3(newResult));\n&#125;).then(() =&gt; p4());\n</code></pre>\n<p>创建新 Promise 但忘记返回它时，对应链条被打破，导致 p4 会与 p2 和 p3 同时进行。</p>\n<p>大多数浏览器中不能终止的 Promise 链里的 rejection，建议后面都跟上 <strong>.catch(error =&gt; console.log(error));</strong></p>\n<h2 id=\"更多文章\"><a class=\"anchor\" href=\"#更多文章\">#</a> 更多文章</h2>\n<p><a href=\"JS-Promise%E5%AF%B9%E8%B1%A1\">JS-Promise 对象</a></p>\n",
            "tags": [
                "计算机科学",
                "web",
                "JavaScript",
                "ES6"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/JavaScript/ES6/let%E5%92%8Cconst/",
            "url": "https://entropywhite.com/computer-science/web/JavaScript/ES6/let%E5%92%8Cconst/",
            "title": "let和const",
            "date_published": "2022-06-30T14:21:00.000Z",
            "content_html": "<p>ES2015 (ES6) 新增加了两个重要的 JavaScript 关键字: <strong>let</strong> 和 <strong>const</strong>。</p>\n<p>let 声明的变量只在 let 命令所在的代码块内有效。</p>\n<p>const 声明一个只读的常量，一旦声明，常量的值就不能改变。</p>\n<hr>\n<h2 id=\"let-命令\"><a class=\"anchor\" href=\"#let-命令\">#</a> let 命令</h2>\n<p>基本用法:</p>\n<p>{let a = 0;  a   // 0} a   // 报错 ReferenceError: a is not defined</p>\n<p><strong>代码块内有效</strong></p>\n<p>let 是在代码块内有效，var 是在全局范围内有效:</p>\n<p>{  let a = 0;  var b = 1; } a  // ReferenceError: a is not defined b  // 1</p>\n<p><strong>不能重复声明</strong></p>\n<p>let 只能声明一次 var 可以声明多次:</p>\n<p>let a = 1; let a = 2; var b = 3; var b = 4; a  // Identifier 'a' has already been declared b  // 4</p>\n<p>for 循环计数器很适合用 let</p>\n<p>for (var i = 0; i &lt; 10; i++) {  setTimeout (function (){    console.log (i);  }) } // 输出十个 10 for (let j = 0; j &lt; 10; j++) {  setTimeout (function (){    console.log (j);  }) } // 输出 0123456789</p>\n<p>变量 i 是用 var 声明的，在全局范围内有效，所以全局中只有一个变量 i, 每次循环时，setTimeout 定时器里面的 i 指的是全局变量 i ，而循环里的十个 setTimeout 是在循环结束后才执行，所以此时的 i 都是 10。</p>\n<p>变量 j 是用 let 声明的，当前的 j 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出 12345。（若每次循环的变量 j 都是重新声明的，如何知道前一个循环的值？这是因为 JavaScript 引擎内部会记住前一个循环的值）。</p>\n<h3 id=\"不存在变量提升\"><a class=\"anchor\" href=\"#不存在变量提升\">#</a> 不存在变量提升</h3>\n<p>let 不存在变量提升，var 会变量提升:</p>\n<p>console.log(a);  //ReferenceError: a is not defined let a = &quot;apple&quot;;  console.log(b);  //undefined var b = &quot;banana&quot;;</p>\n<p>变量 b 用 var 声明存在变量提升，所以当脚本开始运行的时候，b 已经存在了，但是还没有赋值，所以会输出 undefined。</p>\n<p>变量 a 用 let 声明不存在变量提升，在声明变量 a 之前，a 不存在，所以会报错。</p>\n<hr>\n<h2 id=\"const-命令\"><a class=\"anchor\" href=\"#const-命令\">#</a> const 命令</h2>\n<p>const 声明一个只读变量，声明之后不允许改变。意味着，一旦声明必须初始化，否则会报错。</p>\n<p>基本用法:</p>\n<pre><code>const PI = &quot;3.1415926&quot;;\nPI  // 3.1415926\n\nconst MY_AGE;  // SyntaxError: Missing initializer in const declaration    \n</code></pre>\n<p>暂时性死区:</p>\n<pre><code>var PI = &quot;a&quot;;\nif(true)&#123;\n  console.log(PI);  // ReferenceError: PI is not defined\n  const PI = &quot;3.1415926&quot;;\n&#125;\n</code></pre>\n<p>ES6 明确规定，代码块内如果存在 let 或者 const，代码块会对这些命令声明的变量从块的开始就形成一个封闭作用域。代码块内，在声明变量 PI 之前使用它会报错。</p>\n<h3 id=\"注意要点\"><a class=\"anchor\" href=\"#注意要点\">#</a> 注意要点</h3>\n<p>const 如何做到变量在声明初始化之后不允许改变的？其实 const 其实保证的不是变量的值不变，而是保证变量指向的内存地址所保存的数据不允许改动。此时，你可能已经想到，简单类型和复合类型保存值的方式是不同的。是的，对于简单类型（数值 number、字符串 string 、布尔值 boolean）, 值就保存在变量指向的那个内存地址，因此 const 声明的简单类型变量等同于常量。而复杂类型（对象 object，数组 array，函数 function），变量指向的内存地址其实是保存了一个指向实际数据的指针，所以 const 只能保证指针是固定的，至于指针指向的数据结构变不变就无法控制了，所以使用 const 声明复杂类型对象时要慎重。</p>\n",
            "tags": [
                "计算机科学",
                "web",
                "JavaScript",
                "ES6"
            ]
        },
        {
            "id": "https://entropywhite.com/computer-science/web/JavaScript/ES6/Class%E7%B1%BB/",
            "url": "https://entropywhite.com/computer-science/web/JavaScript/ES6/Class%E7%B1%BB/",
            "title": "Class类",
            "date_published": "2022-06-30T14:20:00.000Z",
            "content_html": "<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>在 ES6 中，class (类) 作为对象的模板被引入，可以通过 class 关键字定义类。</p>\n<p>class 的本质是 function。</p>\n<p>它可以看作一个语法糖，让对象原型的写法更加清晰、更像面向对象编程的语法。</p>\n<h2 id=\"基础用法\"><a class=\"anchor\" href=\"#基础用法\">#</a> 基础用法</h2>\n<h3 id=\"类定义\"><a class=\"anchor\" href=\"#类定义\">#</a> 类定义</h3>\n<p>类表达式可以为匿名或命名。</p>\n<pre><code>// 匿名类\nlet Example = class &#123;\n    constructor(a) &#123;\n        this.a = a;\n    &#125;\n&#125;\n// 命名类\nlet Example = class Example &#123;\n    constructor(a) &#123;\n        this.a = a;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"类声明\"><a class=\"anchor\" href=\"#类声明\">#</a> 类声明</h3>\n<pre><code>class Example &#123;\n    constructor(a) &#123;\n        this.a = a;\n    &#125;\n&#125;\n</code></pre>\n<p>注意要点：不可重复声明</p>\n<pre><code>class Example&#123;&#125;\nclass Example&#123;&#125;\n// Uncaught SyntaxError: Identifier 'Example' has already been \n// declared\n \nlet Example1 = class&#123;&#125;\nclass Example&#123;&#125;\n// Uncaught SyntaxError: Identifier 'Example' has already been \n// declared\n</code></pre>\n<h3 id=\"注意要点\"><a class=\"anchor\" href=\"#注意要点\">#</a> 注意要点</h3>\n<p>类定义不会被提升，这意味着，必须在访问前对类进行定义，否则就会报错。</p>\n<p>类中方法不需要 function 关键字。</p>\n<p>方法间不能加分号</p>\n<pre><code>new Example(); \nclass Example &#123;&#125;\n</code></pre>\n<h3 id=\"类的主体\"><a class=\"anchor\" href=\"#类的主体\">#</a> 类的主体</h3>\n<p><strong>属性</strong></p>\n<p>prototype</p>\n<p>ES6 中，prototype 仍旧存在，虽然可以直接自类中定义方法，但是其实方法还是定义在 prototype 上的。 覆盖方法 / 初始化时添加方法</p>\n<pre><code>Example.prototype=&#123;\n    //methods\n&#125;\n</code></pre>\n<p>添加方法</p>\n<pre><code>Object.assign(Example.prototype,&#123;\n    //methods\n&#125;)\n</code></pre>\n<p>静态属性</p>\n<p>静态属性：class 本身的属性，即直接定义在类内部的属性（ Class.propname ），不需要实例化。 ES6 中规定，Class 内部只有静态方法，没有静态属性。</p>\n<pre><code>class Example &#123;\n// 新提案\n    static a = 2;\n&#125;\n// 目前可行写法\nExample.b = 2;\n</code></pre>\n<p>公共属性</p>\n<pre><code>class Example&#123;&#125;\nExample.prototype.a = 2;\n</code></pre>\n<p>实例属性</p>\n<p>实例属性：定义在实例对象（ this ）上的属性。</p>\n<pre><code>class Example &#123;\n    a = 2;\n    constructor () &#123;\n        console.log(this.a);\n    &#125;\n&#125;\n</code></pre>\n<p>name 属性</p>\n<p>返回跟在 class 后的类名 (存在时)。</p>\n<pre><code>let Example=class Exam &#123;\n    constructor(a) &#123;\n        this.a = a;\n    &#125;\n&#125;\nconsole.log(Example.name); // Exam\n \nlet Example=class &#123;\n    constructor(a) &#123;\n        this.a = a;\n    &#125;\n&#125;\nconsole.log(Example.name); // Example\n</code></pre>\n<p><strong>方法</strong></p>\n<p>constructor 方法</p>\n<p>constructor 方法是类的默认方法，创建类的实例化对象时被调用。</p>\n<pre><code>class Example&#123;\n    constructor()&#123;\n      console.log('我是constructor');\n    &#125;\n&#125;\nnew Example(); // 我是constructor\n</code></pre>\n<p>返回对象</p>\n<pre><code>class Test &#123;\n    constructor()&#123;\n        // 默认返回实例对象 this\n    &#125;\n&#125;\nconsole.log(new Test() instanceof Test); // true\n \nclass Example &#123;\n    constructor()&#123;\n        // 指定返回对象\n        return new Test();\n    &#125;\n&#125;\nconsole.log(new Example() instanceof Example); // false\n</code></pre>\n<p>静态方法</p>\n<pre><code>class Example&#123;\n    static sum(a, b) &#123;\n        console.log(a+b);\n    &#125;\n&#125;\nExample.sum(1, 2); // 3\n</code></pre>\n<p>原型方法</p>\n<pre><code>class Example &#123;\n    sum(a, b) &#123;\n        console.log(a + b);\n    &#125;\n&#125;\nlet exam = new Example();\nexam.sum(1, 2); // 3\n</code></pre>\n<p>实例方法</p>\n<pre><code>class Example &#123;\n    constructor() &#123;\n        this.sum = (a, b) =&gt; &#123;\n            console.log(a + b);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"类的实例化\"><a class=\"anchor\" href=\"#类的实例化\">#</a> 类的实例化</h3>\n<p><strong>new</strong></p>\n<p>class 的实例化必须通过 new 关键字</p>\n<pre><code>class Example &#123;&#125;\n \nlet exam1 = Example(); \n// Class constructor Example cannot be invoked without 'new'\n</code></pre>\n<p><strong>实例化对象</strong></p>\n<p>共享原型对象</p>\n<pre><code>class Example &#123;\n    constructor(a, b) &#123;\n        this.a = a;\n        this.b = b;\n        console.log('Example');\n    &#125;\n    sum() &#123;\n        return this.a + this.b;\n    &#125;\n&#125;\nlet exam1 = new Example(2, 1);\nlet exam2 = new Example(3, 1);\n \n// __proto__ 已废弃，不建议使用\n// console.log(exam1.__proto__ == exam2.__proto__); \n \nconsole.log(Object.getPrototypeOf(exam1) === Object.getPrototypeOf(exam2));// true\n \nObject.getPrototypeOf(exam1).sub = function() &#123;\n    return this.a - this.b;\n&#125;\nconsole.log(exam1.sub()); // 1\nconsole.log(exam2.sub()); // 2\n</code></pre>\n<h2 id=\"decorator\"><a class=\"anchor\" href=\"#decorator\">#</a> decorator</h2>\n<p>decorator 是一个函数，用来修改类的行为，在代码编译时产生作用。</p>\n<h3 id=\"类修饰\"><a class=\"anchor\" href=\"#类修饰\">#</a> 类修饰</h3>\n<p>一个参数</p>\n<p>第一个参数 target，指向类本身</p>\n<pre><code>function testable(target) &#123;\n    target.isTestable = true;\n&#125;\n@testable\nclass Example &#123;&#125;\nExample.isTestable; // true\n</code></pre>\n<p>多个参数 —— 嵌套实现</p>\n<pre><code>function testable(isTestable) &#123;\n    return function(target) &#123;\n        target.isTestable=isTestable;\n    &#125;\n&#125;\n@testable(true)\nclass Example &#123;&#125;\nExample.isTestable; // true\n</code></pre>\n<p>实例属性</p>\n<p>上面两个例子添加的是静态属性，若要添加实例属性，在类的 prototype 上操作即可。</p>\n<h3 id=\"方法修饰\"><a class=\"anchor\" href=\"#方法修饰\">#</a> 方法修饰</h3>\n<p>3 个参数：target（类的原型对象）、name（修饰的属性名）、descriptor（该属性的描述对象）</p>\n<pre><code>class Example &#123;\n    @writable\n    sum(a, b) &#123;\n        return a + b;\n    &#125;\n&#125;\nfunction writable(target, name, descriptor) &#123;\n    descriptor.writable = false;\n    return descriptor; // 必须返回\n&#125;\n</code></pre>\n<p>修饰器执行顺序</p>\n<p>由外向内进入，由内向外执行</p>\n<pre><code>class Example &#123;\n    @logMethod(1)\n    @logMethod(2)\n    sum(a, b)&#123;\n        return a + b;\n    &#125;\n&#125;\nfunction logMethod(id) &#123;\n    console.log('evaluated logMethod'+id);\n    return (target, name, desctiptor) =&gt; console.log('excuted         logMethod '+id);\n&#125;\n// evaluated logMethod 1\n// evaluated logMethod 2\n// excuted logMethod 2\n// excuted logMethod 1\n</code></pre>\n<h2 id=\"封装与继承\"><a class=\"anchor\" href=\"#封装与继承\">#</a> 封装与继承</h2>\n<h3 id=\"getter-setter\"><a class=\"anchor\" href=\"#getter-setter\">#</a> getter / setter</h3>\n<p>定义</p>\n<pre><code>class Example&#123;\n    constructor(a, b) &#123;\n        this.a = a; // 实例化时调用 set 方法\n        this.b = b;\n    &#125;\n    get a()&#123;\n        console.log('getter');\n        return this.a;\n    &#125;\n    set a(a)&#123;\n        console.log('setter');\n        this.a = a; // 自身递归调用\n    &#125;\n&#125;\nlet exam = new Example(1,2); // 不断输出 setter ，最终导致 RangeError\nclass Example1&#123;\n    constructor(a, b) &#123;\n        this.a = a;\n        this.b = b;\n    &#125;\n    get a()&#123;\n        console.log('getter');\n        return this._a;\n    &#125;\n    set a(a)&#123;\n        console.log('setter');\n        this._a = a;\n    &#125;\n&#125;\nlet exam1 = new Example1(1,2); // 只输出 setter , 不会调用 getter 方法\nconsole.log(exam1._a); // 1, 可以直接访问\n</code></pre>\n<p>getter 不可单独出现</p>\n<pre><code>class Example &#123;\n    constructor(a) &#123;\n        this.a = a; \n    &#125;\n    get a() &#123;\n        return this.a;\n    &#125;\n&#125;\nlet exam = new Example(1); // Uncaught TypeError: Cannot set property // a of #&lt;Example&gt; which has only a getter\n</code></pre>\n<p>getter 与 setter 必须同级出现</p>\n<pre><code>class Father &#123;\n    constructor()&#123;&#125;\n    get a() &#123;\n        return this._a;\n    &#125;\n&#125;\nclass Child extends Father &#123;\n    constructor()&#123;\n        super();\n    &#125;\n    set a(a) &#123;\n        this._a = a;\n    &#125;\n&#125;\nlet test = new Child();\ntest.a = 2;\nconsole.log(test.a); // undefined\n \nclass Father1 &#123;\n    constructor()&#123;&#125;\n    // 或者都放在子类中\n    get a() &#123;\n        return this._a;\n    &#125;\n    set a(a) &#123;\n        this._a = a;\n    &#125;\n&#125;\nclass Child1 extends Father1 &#123;\n    constructor()&#123;\n        super();\n    &#125;\n&#125;\nlet test1 = new Child1();\ntest1.a = 2;\nconsole.log(test1.a); // 2\n</code></pre>\n<h3 id=\"extends\"><a class=\"anchor\" href=\"#extends\">#</a> extends</h3>\n<p>通过 extends 实现类的继承</p>\n<pre><code>class Child extends Father &#123; ... &#125;\n</code></pre>\n<h3 id=\"super\"><a class=\"anchor\" href=\"#super\">#</a> super</h3>\n<p>子类 constructor 方法中必须有 super ，且必须出现在 this 之前</p>\n<pre><code>class Father &#123;\n    constructor() &#123;&#125;\n&#125;\nclass Child extends Father &#123;\n    constructor() &#123;&#125;\n    // or \n    // constructor(a) &#123;\n        // this.a = a;\n        // super();\n    // &#125;\n&#125;\nlet test = new Child(); // Uncaught ReferenceError: Must call super \n// constructor in derived class before accessing 'this' or returning \n// from derived constructor\n</code></pre>\n<p>调用父类构造函数，只能出现在子类的构造函数</p>\n<pre><code>class Father &#123;\n    test()&#123;\n        return 0;\n    &#125;\n    static test1()&#123;\n        return 1;\n    &#125;\n&#125;\nclass Child extends Father &#123;\n    constructor()&#123;\n        super();\n    &#125;\n&#125;\nclass Child1 extends Father &#123;\n    test2() &#123;\n        super(); // Uncaught SyntaxError: 'super' keyword unexpected     \n        // here\n    &#125;\n&#125;\n</code></pre>\n<p>调用父类方法，super 作为对象，在普通方法中，指向父类的原型对象，在静态方法中，指向父类</p>\n<pre><code>class Child2 extends Father &#123;\n    constructor()&#123;\n        super();\n        // 调用父类普通方法\n        console.log(super.test()); // 0\n    &#125;\n    static test3()&#123;\n        // 调用父类静态方法\n        return super.test1+2;\n    &#125;\n&#125;\nChild2.test3(); // 3\n</code></pre>\n<h3 id=\"注意要点-2\"><a class=\"anchor\" href=\"#注意要点-2\">#</a> 注意要点</h3>\n<p>不可继承常规对象</p>\n<pre><code>var Father = &#123;\n    // ...\n&#125;\nclass Child extends Father &#123;\n     // ...\n&#125;\n// Uncaught TypeError: Class extends value #&lt;Object&gt; is not a constructor or null\n \n// 解决方案\nObject.setPrototypeOf(Child.prototype, Father);\n</code></pre>\n",
            "tags": [
                "计算机科学",
                "web",
                "JavaScript",
                "ES6"
            ]
        }
    ]
}