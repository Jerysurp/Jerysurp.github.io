<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>熵白之痕</title>
        <subtitle>以前进为目标吧</subtitle>
        <icon>https://entropywhite.com/images/favicon.ico</icon>
        <link>https://entropywhite.com</link>
        <author>
          <name>EntropyWhite</name>
        </author>
        <description>欢迎来到熵白的博客</description>
        <language>zh-CN</language>
        <pubDate>Mon, 15 Aug 2022 11:55:11 +0800</pubDate>
        <lastBuildDate>Mon, 15 Aug 2022 11:55:11 +0800</lastBuildDate>
        <category term="web" />
        <category term="前端" />
        <category term="markdown" />
        <category term="hexo" />
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/JS%E9%9D%A2%E8%AF%95/JS%E7%B3%BB%E5%88%97/</guid>
            <title></title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/JS%E9%9D%A2%E8%AF%95/JS%E7%B3%BB%E5%88%97/</link>
            <pubDate>Mon, 15 Aug 2022 11:55:11 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/%E7%BC%96%E8%BE%91%E5%99%A8/%E5%9B%9B%E4%B8%AA%E7%BC%96%E8%BE%91%E5%99%A8/</guid>
            <title>四个编辑器</title>
            <link>https://entropywhite.com/computer-science/web/%E7%BC%96%E8%BE%91%E5%99%A8/%E5%9B%9B%E4%B8%AA%E7%BC%96%E8%BE%91%E5%99%A8/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="编辑器" scheme="https://entropywhite.com/categories/computer-science/web/%E7%BC%96%E8%BE%91%E5%99%A8/" />
            <category term="前端 编辑器" scheme="https://entropywhite.com/tags/%E5%89%8D%E7%AB%AF-%E7%BC%96%E8%BE%91%E5%99%A8/" />
            <pubDate>Mon, 15 Aug 2022 11:54:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;vscode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vscode&#34;&gt;#&lt;/a&gt; VSCODE&lt;/h1&gt;
&lt;h2 id=&#34;emmet语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#emmet语法&#34;&gt;#&lt;/a&gt; Emmet 语法&lt;/h2&gt;
&lt;p&gt;快速生成 HTML 解构语法&lt;/p&gt;
&lt;p&gt;1. 生成标签，直接输入标签名，按 tab 即可&lt;/p&gt;
&lt;p&gt;2. 如果要生成多个相同的标签，输入标签名后加入 &lt;code&gt;*&lt;/code&gt; n，如 div*3，会生成三个 div&lt;/p&gt;
&lt;p&gt;3. 如果有父子级关系标签，可以用 &lt;code&gt;&amp;gt;&lt;/code&gt; ，如  &lt;code&gt;ul &amp;gt; li&lt;/code&gt; ，会生成一个列表&lt;/p&gt;
&lt;p&gt;4. 如果有兄弟关系的标签，可以用 &lt;code&gt;+&lt;/code&gt; ，如 &lt;code&gt;div+p&lt;/code&gt; ，会生成一个被 &lt;code&gt;div&lt;/code&gt;  包裹的 &lt;code&gt;p&lt;/code&gt;  标签&lt;/p&gt;
&lt;p&gt;5. 如果生成类名或者 &lt;code&gt;id&lt;/code&gt;  名的，直接写 &lt;code&gt;.类名&lt;/code&gt; 和 &lt;code&gt;#id名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;6. 如果生成的 div 类名是有顺序的，可以用自增符号 &lt;code&gt;$&lt;/code&gt; ，如 &lt;code&gt;.nav*5&lt;/code&gt; ，会生成 &lt;code&gt;div class=.nav1-5&lt;/code&gt;  的标签&lt;/p&gt;
&lt;p&gt;7. 如果想在生成标签内部写内容可以用（）表示&lt;/p&gt;
&lt;p&gt;快速生成 CSS 样式语法&lt;/p&gt;
&lt;p&gt;1.CSS 基本采取简写形式，如 w200，tab 生成 &lt;code&gt;width:200px&lt;/code&gt; 、lh26，tab 生成 &lt;code&gt;line-height:26px&lt;/code&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%AE%E5%BC%82%E5%85%BC%E5%AE%B9%E6%80%A7/</guid>
            <title>浏览器差异</title>
            <link>https://entropywhite.com/computer-science/web/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%AE%E5%BC%82%E5%85%BC%E5%AE%B9%E6%80%A7/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="浏览器" scheme="https://entropywhite.com/categories/computer-science/web/%E6%B5%8F%E8%A7%88%E5%99%A8/" />
            <category term="前端 浏览器" scheme="https://entropywhite.com/tags/%E5%89%8D%E7%AB%AF-%E6%B5%8F%E8%A7%88%E5%99%A8/" />
            <pubDate>Mon, 15 Aug 2022 11:53:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;各大浏览器内核&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#各大浏览器内核&#34;&gt;#&lt;/a&gt; 各大浏览器内核&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;浏览器&lt;/th&gt;
&lt;th&gt;内核&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IE&lt;/td&gt;
&lt;td&gt;Trident&lt;/td&gt;
&lt;td&gt;IE、猎豹安全、360 极速浏览器、百度浏览器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Firefox&lt;/td&gt;
&lt;td&gt;Gecko&lt;/td&gt;
&lt;td&gt;没落了，打开慢和升级频繁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Safari&lt;/td&gt;
&lt;td&gt;Webkit&lt;/td&gt;
&lt;td&gt;这玩意其实不是 chrome 内核&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Edge、Chrome&lt;/td&gt;
&lt;td&gt;Chromium/Blink&lt;/td&gt;
&lt;td&gt;在 Chromiun 项目中研发的 Blink 渲染引擎（浏览器核心）内置于 Chrome 浏览器中。Blink 是 Webkit 的分支，大部分国产浏览器最新版都采用 Blink 内核。二次开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Opera&lt;/td&gt;
&lt;td&gt;Blink&lt;/td&gt;
&lt;td&gt;以前是 presto 内核，现跟随 Chrome 用同一个内核&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E5%8F%8A%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
            <title>浏览器如何工作</title>
            <link>https://entropywhite.com/computer-science/web/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E5%8F%8A%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="浏览器" scheme="https://entropywhite.com/categories/computer-science/web/%E6%B5%8F%E8%A7%88%E5%99%A8/" />
            <category term="前端 浏览器" scheme="https://entropywhite.com/tags/%E5%89%8D%E7%AB%AF-%E6%B5%8F%E8%A7%88%E5%99%A8/" />
            <pubDate>Mon, 15 Aug 2022 11:52:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;浏览器是如何工作的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器是如何工作的&#34;&gt;#&lt;/a&gt; 浏览器是如何工作的&lt;/h1&gt;
&lt;p&gt;简化的浏览器结构图&lt;/p&gt;
&lt;h2 id=&#34;用户界面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户界面&#34;&gt;#&lt;/a&gt; 用户界面&lt;/h2&gt;
&lt;p&gt;用户界面用于展示除标签页窗口之外的其他用户界面内容&lt;/p&gt;
&lt;h2 id=&#34;浏览器引擎&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器引擎&#34;&gt;#&lt;/a&gt; 浏览器引擎&lt;/h2&gt;
&lt;p&gt;浏览器引擎用于在用户界面和渲染引擎之间传递数据&lt;/p&gt;
&lt;h2 id=&#34;渲染引擎&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#渲染引擎&#34;&gt;#&lt;/a&gt; 渲染引擎&lt;/h2&gt;
&lt;p&gt;渲染引擎负责渲染用户请求的页面内容，可以说是一个浏览器的核心&lt;/p&gt;
&lt;p&gt;渲染器下面还有很多小的功能模块，如负责网络请求的网络模块，用于解析和执行 js 的 js 解释器，还有数据存储持久层，帮助浏览器存储各种数据如 cookie&lt;/p&gt;
&lt;p&gt;往往我们会把渲染引擎称为浏览器的内核，不同浏览器使用的内核也不太一样&lt;/p&gt;
&lt;h2 id=&#34;进程和线程的联系和区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程和线程的联系和区别&#34;&gt;#&lt;/a&gt; 进程和线程的联系和区别&lt;/h2&gt;
&lt;p&gt;浏览器是运行在操作系统上的一个应用程序，每个应用程序必须至少启动一个进程来执行其功能，每个程序往往需要运行很多任务，进程就会创建一些线程来帮助它去执行这些任务&lt;/p&gt;
&lt;p&gt;当我们启动某个程序时，就会创建一个进程来执行任务代码，同时为该进程分配内存空间，该应用程序的状态都保存在该内存空间里，当应用关闭时，该内存空间会被回收，进程可以启动更多进程来执行任务，由于每个进程分配的内存空间时独立的，如果两个进程间需要传递某些数据，则需要通过进程间通信管道 IPC 来传递，很多应用程序都是多进程的结构，这样是为了避免某一进程卡死，由于进程间相互独立，这样不会影响到整个应用程序，进程可以将任务分成更多细小的任务，通过创建多个线程并行执行不同任务，同一进程下的线程之间可以直接通信共享数据的。&lt;/p&gt;
&lt;p&gt;早期的浏览器是一个单进程的结构，一个进程中大概有页面线程负责页面渲染和展示等，JS 线程执行 JS 代码，还有其他结构。单进程的结构引发了很多问题，一是不稳定，一个卡死可能会导致整个进程崩溃；二是不安全，浏览器之间可以共享数据的，那 JS 线程可以随意访问浏览器进程内的所有数据；三是不流畅，一个经常需要负责太多事情，导致运行效率低下&lt;/p&gt;
&lt;p&gt;而现在的浏览器采用了多进程结构，根据进程功能不同来拆解浏览器&lt;/p&gt;
&lt;p&gt;浏览器进程负责控制浏览器除标签页外的用户界面，包括地址栏、书签、后退和前进按钮，以及负责与浏览器的其他进程协调工作&lt;/p&gt;
&lt;p&gt;网络进程负责发起接受网络请求&lt;/p&gt;
&lt;p&gt;GPU 进程负责整个浏览器界面的渲染&lt;/p&gt;
&lt;p&gt;插件进程负责控制网站使用的所有插件 (不是浏览器安装的扩展)&lt;/p&gt;
&lt;p&gt;渲染器进程用来控制显示 tab 标签内的所有内容，浏览器默认会为每个标签页都创建一个进程，在启动浏览器时选择的进程模型有关。&lt;/p&gt;
&lt;p&gt;举例子，如 chrome 浏览器有四种进程模型&lt;/p&gt;
&lt;p&gt;第一种是默认的，访问不同站点和同一站点的不同页面都会创建新的进程，该模型会创建更多的进程，占用更多的内存空间，但却是最安全的，每个 tab 以及 tab 内的每个站点都是相互隔离互不影响的，当一个浏览器进程卡死，并不会影响其他进程&lt;/p&gt;
&lt;p&gt;第二种是模型表示同意站点使用同一进程&lt;/p&gt;
&lt;p&gt;第三种是 tab 里的所有站点使用一个进程&lt;/p&gt;
&lt;p&gt;第四种是让浏览器引擎和渲染引擎共用一个进程&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%89%87%E8%A7%84%E8%8C%83/%E5%9B%BE%E7%89%87%E8%A7%84%E8%8C%83/</guid>
            <title>前端图片规范</title>
            <link>https://entropywhite.com/computer-science/web/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%89%87%E8%A7%84%E8%8C%83/%E5%9B%BE%E7%89%87%E8%A7%84%E8%8C%83/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="前端规范" scheme="https://entropywhite.com/categories/computer-science/web/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/" />
            <category term="前端" scheme="https://entropywhite.com/tags/%E5%89%8D%E7%AB%AF/" />
            <pubDate>Mon, 15 Aug 2022 11:51:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前端图片规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端图片规范&#34;&gt;#&lt;/a&gt; 前端图片规范&lt;/h1&gt;
&lt;h2 id=&#34;图片格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图片格式&#34;&gt;#&lt;/a&gt; 图片格式&lt;/h2&gt;
&lt;p&gt;常见的图片格式有 GIF、PNG8、PNG24、JPEG、WEBP、SVG，根据图片格式的特性和场景需要选取适合的图片格式。&lt;/p&gt;
&lt;h3 id=&#34;gif&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gif&#34;&gt;#&lt;/a&gt; GIF&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;GIF 图象是基于颜色列表的（存储的数据是该点的颜色对应于颜色列表的索引值），最多只支持 8 位（ 256 色）。GIF 文件内部分成许多存储块，用来存储多幅图象或者是决定图象表现行为的控制块，用以实现动画和交互式应用。GIF 文件还通过 LZW 压缩算法压缩图象数据来减少图象尺寸&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特性&#34;&gt;#&lt;/a&gt; 特性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;优秀的压缩算法使其在一定程度上保证图像质量的同时将体积变得很小。&lt;/li&gt;
&lt;li&gt;可插入多帧，从而实现动画效果。&lt;/li&gt;
&lt;li&gt;可设置透明色以产生对象浮现于背景之上的效果。&lt;/li&gt;
&lt;li&gt;由于采用了 8 位压缩，最多只能处理 256 种颜色，故不宜应用于真彩色图片。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;png&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#png&#34;&gt;#&lt;/a&gt; PNG&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;PNG 是 20 世纪 90 年代中期开始开发的图像文件存储格式，其目的是企图替代 GIF 和 TIFF 文件格式，同时增加一些 GIF 文件格式所不具备的特性。流式网络图形格式 (Portable Network Graphic Format，PNG) 名称来源于非官方的 “PNG’s Not GIF”，是一种位图文件 (bitmap file) 存储格式，读成 “ping”。PNG 用来存储灰度图像时，灰度图像的深度可多到 16 位，存储彩色图像时，彩色图像的深度可多到 48 位，并且还可存储多到 16 位的 α 通道数据。PNG 使用从 LZ77 派生的无损数据压缩算法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;特性-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特性-2&#34;&gt;#&lt;/a&gt; 特性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;支持 256 色调色板技术，文件体积小。&lt;/li&gt;
&lt;li&gt;无损压缩&lt;/li&gt;
&lt;li&gt;最高支持 48 位真彩色图像以及 16 位灰度图像。&lt;/li&gt;
&lt;li&gt;支持 Alpha 通道的透明 / 半透明特性。&lt;/li&gt;
&lt;li&gt;支持图像亮度的 Gamma 校准信息。&lt;/li&gt;
&lt;li&gt;支持存储附加文本信息，以保留图像名称、作者、版权、创作时间、注释等信息。&lt;/li&gt;
&lt;li&gt;渐近显示和流式读写，适合在网络传输中快速显示预览效果后再展示全貌。&lt;/li&gt;
&lt;li&gt;使用 CRC 防止文件出错。&lt;/li&gt;
&lt;li&gt;最新的 PNG 标准允许在一个文件内存储多幅图像。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jpeg&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jpeg&#34;&gt;#&lt;/a&gt; JPEG&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;JPEG 是一种针对照片视频而广泛使用的一种有损压缩标准方法。这个名称代表 Joint Photographic Experts Group（联合图像专家小组）。此团队创立于公元 1986 年，1992 年发布了 JPEG 的标准而在 1994 年获得了 ISO 10918-1 的认定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;特性-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特性-3&#34;&gt;#&lt;/a&gt; 特性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;适用于储存 24 位元全采影像&lt;/li&gt;
&lt;li&gt;采取的压缩方式通常为有损压缩&lt;/li&gt;
&lt;li&gt;不支持透明或动画&lt;/li&gt;
&lt;li&gt;压缩比越高影像耗损越大，失真越严重&lt;/li&gt;
&lt;li&gt;压缩比在 10 左右肉眼无法辨出压缩图与原图的差别&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;webp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#webp&#34;&gt;#&lt;/a&gt; WEBP&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;WebP，是一种同时提供了有损压缩与无损压缩的图片文件格式，派生自视频编码格式 VP8，是由 Google 在购买 On2 Technologies 后发展出来。WebP 最初在 2010 年发布，2011 年 11 月 8 日，Google 开始让 WebP 支持无损压缩和透明色的功能，而在 2012 年 8 月 16 日的参考实做 libwebp 0.2.0 中正式支持&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;特性-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特性-4&#34;&gt;#&lt;/a&gt; 特性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;同时提供有损压缩和无损压缩两种图片文件格式&lt;/li&gt;
&lt;li&gt;文件体积小，无损压缩后，比 PNG 文件少了 45％ 的文件大小；有损压缩后，比 JPEG 文件少了 25% - 34% 文件大小&lt;/li&gt;
&lt;li&gt;浏览器兼容差，目前只支持客户端 Chrome 和 Opera 浏览器以及安卓原生浏览器 (Andriod 4.0+)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;团队约定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#团队约定&#34;&gt;#&lt;/a&gt; 团队约定&lt;/h2&gt;
&lt;h3 id=&#34;内容图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内容图&#34;&gt;#&lt;/a&gt; 内容图&lt;/h3&gt;
&lt;p&gt;内容图多以商品图等照片类图片形式存在，颜色较为丰富，文件体积较大&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优先考虑 JPEG 格式，条件允许的话优先考虑 WebP 格式&lt;/li&gt;
&lt;li&gt;尽量不使用 PNG 格式，PNG8 色位太低，PNG24 压缩率低，文件体积大&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;背景图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景图&#34;&gt;#&lt;/a&gt; 背景图&lt;/h3&gt;
&lt;p&gt;背景图多为图标等颜色比较简单、文件体积不大、起修饰作用的图片&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PNG 与 GIF 格式，优先考虑使用 PNG 格式，PNG 格式允许更多的颜色并提供更好的压缩率&lt;/li&gt;
&lt;li&gt;图像颜色比较简单的，如纯色块线条图标，优先考虑使用 PNG8 格式，避免不使用 JPEG 格式&lt;/li&gt;
&lt;li&gt;图像颜色丰富而且图片文件不太大的（40KB 以下）或有半透明效果的优先考虑 PNG24 格式&lt;/li&gt;
&lt;li&gt;图像颜色丰富而且文件比较大的（40KB - 200KB）优先考虑 JPEG 格式&lt;/li&gt;
&lt;li&gt;条件允许的，优先考虑 WebP 代替 PNG 和 JPEG 格式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;图片大小&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图片大小&#34;&gt;#&lt;/a&gt; 图片大小&lt;/h2&gt;
&lt;h3 id=&#34;团队约定-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#团队约定-2&#34;&gt;#&lt;/a&gt; 团队约定&lt;/h3&gt;
&lt;p&gt;中国普通家庭的宽带基本能达到 8Mbps，实际速率大约为 500—900KB/s，全国 3G/4G 用户占有比超过了 50%，为了保证图片能更好地加载展示给用户看，团队约定：&lt;/p&gt;
&lt;p&gt;PC 平台单张的图片的大小不应大于 200KB。&lt;/p&gt;
&lt;p&gt;移动平台单张的图片的大小不应大于 100KB。&lt;/p&gt;
&lt;p&gt;（图片的大小约定标准随全国网速的改变而改变）&lt;/p&gt;
&lt;h2 id=&#34;图片引入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图片引入&#34;&gt;#&lt;/a&gt; 图片引入&lt;/h2&gt;
&lt;p&gt;测试内容图应该写上表明图片尺寸的占位图，可以用线上占位图生成服务，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://placeholder.qiniudn.com/300x200
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;HTML 中图片引入不需添加 width、height 属性，alt 属性应该写上&lt;/p&gt;
&lt;p&gt;推荐：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;&amp;quot; alt=&amp;quot;&amp;quot; &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不推荐：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;&amp;quot; width=&amp;quot;&amp;quot; height=&amp;quot;&amp;quot; &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CSS 中图片引入不需要引号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.jdc &amp;#123;
    background-image: url(icon.png);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;css-sprites-vs-data-uris&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css-sprites-vs-data-uris&#34;&gt;#&lt;/a&gt; CSS Sprites VS Data URIs&lt;/h3&gt;
&lt;h4 id=&#34;css-sprites特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css-sprites特点&#34;&gt;#&lt;/a&gt; CSS Sprites 特点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;减少请求数&lt;/li&gt;
&lt;li&gt;加速图片的显示&lt;/li&gt;
&lt;li&gt;维护更新成本大&lt;/li&gt;
&lt;li&gt;更多的内存消耗，特别是大体积或有过多空白的 Sprites 图&lt;/li&gt;
&lt;li&gt;图片渗漏，相邻的不需展示的图片有可能出现在展示元素中，特别是在高清设备移动设备上&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;data-urisbase64编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#data-urisbase64编码&#34;&gt;#&lt;/a&gt; Data URIs（base64 编码）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;减少请求数&lt;/li&gt;
&lt;li&gt;转换文件体积大，大约比原始的二进制大 33%&lt;/li&gt;
&lt;li&gt;IE6 / IE7 不支持&lt;/li&gt;
&lt;li&gt;图片显示相对较慢，需要更多的 CPU 消耗&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;团队约定-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#团队约定-3&#34;&gt;#&lt;/a&gt; 团队约定&lt;/h2&gt;
&lt;h3 id=&#34;css-sprites-使用建议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css-sprites-使用建议&#34;&gt;#&lt;/a&gt; CSS Sprites 使用建议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;适合使用频率高更新频率低的小图标&lt;/li&gt;
&lt;li&gt;尽量不留太多的空白&lt;/li&gt;
&lt;li&gt;体积较大的图片不合并&lt;/li&gt;
&lt;li&gt;确保要合并的小图坐标数值和合并后的 Sprites 图尺寸均为偶数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-urisbase64编码使用建议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#data-urisbase64编码使用建议&#34;&gt;#&lt;/a&gt; Data URIs（base64 编码）使用建议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;适合更新频率高的小图片，如某些具备自定义功能的标题 icon 等&lt;/li&gt;
&lt;li&gt;转换成 Base64 编码的图片应小于 2KB&lt;/li&gt;
&lt;li&gt;移动端不使用 Base64 编码&lt;/li&gt;
&lt;li&gt;要兼容 IE6/IE7 的不使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;图片质量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图片质量&#34;&gt;#&lt;/a&gt; 图片质量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;上线的图片都应该经过压缩处理，压缩后的图片不应该出现肉眼可感知的失真区域&lt;/li&gt;
&lt;li&gt;60 质量的 JPEG 格式图片与质量大于 60 的相比，肉眼已看不出明显的区别，因此保存 JPEG 图的时候，质量一般控制在 60，若保真度要求高的图片可适量提高到 80，图片大小控制在 200KB 以内&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
            <title>代码规范</title>
            <link>https://entropywhite.com/computer-science/web/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="代码规范" scheme="https://entropywhite.com/categories/computer-science/web/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/" />
            <category term="前端" scheme="https://entropywhite.com/tags/%E5%89%8D%E7%AB%AF/" />
            <pubDate>Mon, 15 Aug 2022 11:48:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;一、京东凹凸实验室前端代码规范&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ndWlkZS5hb3R1LmlvLw==&#34;&gt;https://guide.aotu.io/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;二、腾讯前端代码规范&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RnaWRlYXMucXEuY29tL2RvYy9pbmRleC5odG1s&#34;&gt;http://tgideas.qq.com/doc/index.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;三、百度前端代码规范文档&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2Vjb21mZS9zcGVjL2Jsb2IvbWFzdGVyL2phdmFzY3JpcHQtc3R5bGUtZ3VpZGUubWQ=&#34;&gt;https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;四、JavaScript Standard Style&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3N0YW5kYXJkL3N0YW5kYXJk&#34;&gt;https://github.com/standard/standard&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;五、Vue 官方特有的代码风格指南&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvc3R5bGUtZ3VpZGUvaW5kZXguaHRtbA==&#34;&gt;https://cn.vuejs.org/v2/style-guide/index.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;六、玩一峰的 ES6 编程风格&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lczYucnVhbnlpZmVuZy5jb20vI2RvY3Mvc3R5bGU=&#34;&gt;https://es6.ruanyifeng.com/#docs/style&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;七、代码整洁之道（这是一本书）&lt;/p&gt;
&lt;p&gt;八、ESLint 代码规范检测工具&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lc2xpbnQuYm9vdGNzcy5jb20v&#34;&gt;https://eslint.bootcss.com/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;九、Prettier 代码格式化工具（VScode 有）&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/%E5%89%8D%E7%AB%AF%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/HTMLCSS%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</guid>
            <title>文件命名规范</title>
            <link>https://entropywhite.com/computer-science/web/%E5%89%8D%E7%AB%AF%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/HTMLCSS%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="前端命名规范" scheme="https://entropywhite.com/categories/computer-science/web/%E5%89%8D%E7%AB%AF%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/" />
            <category term="前端" scheme="https://entropywhite.com/tags/%E5%89%8D%E7%AB%AF/" />
            <pubDate>Mon, 15 Aug 2022 11:48:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;文件命名规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件命名规范&#34;&gt;#&lt;/a&gt; 文件命名规范&lt;/h1&gt;
&lt;p&gt;ClassName 的命名应该尽量精短、明确，必须以字母开头命名，且全部字母为小写，单词之间统一使用下划线 “ &lt;code&gt;_&lt;/code&gt; ” 连接&lt;/p&gt;
&lt;h2 id=&#34;命名原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命名原则&#34;&gt;#&lt;/a&gt; 命名原则&lt;/h2&gt;
&lt;p&gt;基于姓氏命名法（继承 + 外来），祖先模块不能出现下划线，除了是全站公用模块，如  &lt;code&gt;mod_&lt;/code&gt;  系列的命名：&lt;/p&gt;
&lt;p&gt;推荐：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;modulename&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;modulename_info&amp;quot;&amp;gt;
		&amp;lt;div class=&amp;quot;modulename_son&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
		&amp;lt;div class=&amp;quot;modulename_son&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
		...
	&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
	
&amp;lt;!-- 这个是全站公用模块，祖先模块允许直接出现下划线 --&amp;gt;
&amp;lt;div class=&amp;quot;mod_info&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;mod_info_son&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
	&amp;lt;div class=&amp;quot;mod_info_son&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
	...		
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不推荐：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;modulename_info&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;modulename_info_son&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
	&amp;lt;div class=&amp;quot;modulename_info_son&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
	...		
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在子孙模块数量可预测的情况下，严格继承祖先模块的命名前缀&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;modulename&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;modulename_cover&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
	&amp;lt;div class=&amp;quot;modulename_info&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当子孙模块超过 4 级或以上的时候，可以考虑在祖先模块内具有识辨性的独立缩写作为新的子孙模块&lt;/p&gt;
&lt;p&gt;推荐：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;modulename&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;modulename_cover&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
	&amp;lt;div class=&amp;quot;modulename_info&amp;quot;&amp;gt;
    	&amp;lt;div class=&amp;quot;modulename_info_user&amp;quot;&amp;gt;
    		&amp;lt;div class=&amp;quot;modulename_info_user_img&amp;quot;&amp;gt;
    			&amp;lt;img src=&amp;quot;&amp;quot; alt=&amp;quot;&amp;quot;&amp;gt;
    			&amp;lt;!-- 这个时候 miui 为 modulename_info_user_img 首字母缩写--&amp;gt;
    			&amp;lt;div class=&amp;quot;miui_tit&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    			&amp;lt;div class=&amp;quot;miui_txt&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    			...
    		&amp;lt;/div&amp;gt;
    	&amp;lt;/div&amp;gt;
    	&amp;lt;div class=&amp;quot;modulename_info_list&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不推荐：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;modulename&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;modulename_cover&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
	&amp;lt;div class=&amp;quot;modulename_info&amp;quot;&amp;gt;
    	&amp;lt;div class=&amp;quot;modulename_info_user&amp;quot;&amp;gt;
    		&amp;lt;div class=&amp;quot;modulename_info_user_img&amp;quot;&amp;gt;
    			&amp;lt;img src=&amp;quot;&amp;quot; alt=&amp;quot;&amp;quot;&amp;gt;
    			&amp;lt;div class=&amp;quot;modulename_info_user_img_tit&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    			&amp;lt;div class=&amp;quot;modulename_info_user_img_txt&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    			...
    		&amp;lt;/div&amp;gt;
    	&amp;lt;/div&amp;gt;
    	&amp;lt;div class=&amp;quot;modulename_info_list&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;模块命名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模块命名&#34;&gt;#&lt;/a&gt; 模块命名&lt;/h2&gt;
&lt;p&gt;全站公共模块：以  &lt;code&gt;mod_&lt;/code&gt;  开头&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;mod_yours&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;业务公共模块：以 业务名 &lt;code&gt;_mod_&lt;/code&gt;  开头&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;paipai_mod_yours&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;常用命名推荐&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用命名推荐&#34;&gt;#&lt;/a&gt; 常用命名推荐&lt;/h2&gt;
&lt;p&gt;注意： &lt;code&gt;ad&lt;/code&gt; 、 &lt;code&gt;banner&lt;/code&gt; 、 &lt;code&gt;gg&lt;/code&gt; 、 &lt;code&gt;guanggao&lt;/code&gt;  等有机会和广告挂勾的字眠不建议直接用来做 ClassName，因为有些浏览器插件（Chrome 的广告拦截插件等）会直接过滤这些类名，因此&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;ad&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这种广告的英文或拼音类名不应该出现&lt;/p&gt;
&lt;p&gt;另外，敏感不和谐字眼也不应该出现，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;fuck&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;jer&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;sm&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;gcd&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;ass&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;KMT&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; 
...
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ClassName&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;about&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;关于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;account&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;账户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;arrow&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;箭头图标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;article&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;aside&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;边栏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;audio&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;音频&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;avatar&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;头像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;bg,background&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;背景&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;bar&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;栏（工具类）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;branding&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;品牌化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;crumb,breadcrumbs&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;面包屑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;btn,button&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;按钮&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;caption&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;标题，说明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;category&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;分类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;chart&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;图表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;clearfix&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;清除浮动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;close&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;col,column&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;comment&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;评论&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;community&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;社区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;container&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;content&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;copyright&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;版权&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;current&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当前态，选中态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;default&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;默认&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;description&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;details&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;细节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;disabled&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不可用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;entry&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;文章，博文&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;error&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;even&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;偶数，常用于多行列表或表格中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;fail&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;失败（提示）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;feature&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;专题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;fewer&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;收起&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;field&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于表单的输入区域&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;figure&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;filter&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;筛选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;first&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;第一个，常用于列表中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;footer&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;页脚&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;forum&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;论坛&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;gallery&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;画廊&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;group&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;模块，清除浮动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;header&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;页头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;help&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;帮助&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;hide&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;隐藏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;hightlight&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;高亮&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;home&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;主页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;icon&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;图标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;info,information&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;last&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;最后一个，常用于列表中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;links&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;login&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;登录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;logout&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;退出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;logo&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;标志&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;main&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;主体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;menu&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;菜单&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;meta&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;作者、更新时间等信息栏，一般位于标题之下&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;module&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;模块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;more&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;更多（展开）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;msg,message&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;消息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;nav,navigation&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;导航&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;next&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;下一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;nub&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;odd&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;奇数，常用于多行列表或表格中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;off&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;鼠标离开&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;on&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;鼠标移过&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;output&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pagination&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;分页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pop,popup&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;弹窗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;preview&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;预览&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;previous&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;上一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;primary&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;主要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;progress&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;进度条&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;promotion&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;促销&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rcommd,recommendations&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;推荐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reg,register&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;注册&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;save&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;保存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;search&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;secondary&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;次要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;section&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;区块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;selected&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;已选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;share&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;分享&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;show&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;显示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;sidebar&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;边栏，侧栏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;slide&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;幻灯片，图片切换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;sort&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;sub&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;次级的，子级的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;submit&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提交&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;subscribe&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;订阅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;subtitle&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;副标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;success&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;成功（提示）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;summary&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;摘要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tab&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;标签页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;table&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;表格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;txt,text&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;thumbnail&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;缩略图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tips&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;title&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;video&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;视频&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;wrap&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;容器，包，一般用于最外层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;wrapper&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;容器，包，一般用于最外层&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/%E5%89%8D%E7%AB%AF%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/%E5%89%8D%E7%AB%AF%E7%9B%AE%E5%BD%95%E5%91%BD%E5%90%8D/</guid>
            <title>前端命名规范</title>
            <link>https://entropywhite.com/computer-science/web/%E5%89%8D%E7%AB%AF%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/%E5%89%8D%E7%AB%AF%E7%9B%AE%E5%BD%95%E5%91%BD%E5%90%8D/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="前端命名规范" scheme="https://entropywhite.com/categories/computer-science/web/%E5%89%8D%E7%AB%AF%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/" />
            <category term="前端" scheme="https://entropywhite.com/tags/%E5%89%8D%E7%AB%AF/" />
            <pubDate>Mon, 15 Aug 2022 11:48:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前端命名规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端命名规范&#34;&gt;#&lt;/a&gt; 前端命名规范&lt;/h1&gt;
&lt;h2 id=&#34;前段目录命名规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前段目录命名规范&#34;&gt;#&lt;/a&gt; 前段目录命名规范&lt;/h2&gt;
&lt;p&gt;由历史原因及个人习惯引起的 DOM 结构、命名不统一，导致不同成员在维护同一页面时，效率低下，迭代、维护成本极高&lt;/p&gt;
&lt;h3 id=&#34;目录命名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目录命名&#34;&gt;#&lt;/a&gt; 目录命名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;项目文件夹：projectname&lt;/li&gt;
&lt;li&gt;样式文件夹：css&lt;/li&gt;
&lt;li&gt;脚本文件夹：js&lt;/li&gt;
&lt;li&gt;样式类图片文件夹：img&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前段图片命名规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前段图片命名规范&#34;&gt;#&lt;/a&gt; 前段图片命名规范&lt;/h2&gt;
&lt;h3 id=&#34;命名顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命名顺序&#34;&gt;#&lt;/a&gt; 命名顺序&lt;/h3&gt;
&lt;p&gt;图片命名建议以以下顺序命名：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图片业务（可选） +（mod_）图片功能类别（必选）+ 图片模块名称（可选） + 图片精度（可选）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;图片业务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pp_：拍拍&lt;/li&gt;
&lt;li&gt;wx_：微信&lt;/li&gt;
&lt;li&gt;sq_：手 Q&lt;/li&gt;
&lt;li&gt;jd_：京东商城&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;图片功能类别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mod_：是否公共，可选&lt;/li&gt;
&lt;li&gt;icon：模块类固化的图标&lt;/li&gt;
&lt;li&gt;logo：LOGO 类&lt;/li&gt;
&lt;li&gt;spr：单页面各种元素合并集合&lt;/li&gt;
&lt;li&gt;btn：按钮&lt;/li&gt;
&lt;li&gt;bg：可平铺或者大背景&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;图片模块名称：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;goodslist：商品列表&lt;/li&gt;
&lt;li&gt;goodsinfo：商品信息&lt;/li&gt;
&lt;li&gt;userava tar：用户头像&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;图片精度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普清：@1x&lt;/li&gt;
&lt;li&gt;Retina：@2x | @3x&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下面例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;公共模块：
wx_mod_btn_goodlist@2x.png
wx_mod_btn_goodlist.png
mod_btn_goodlist.png 

非公共模块：
wx_btn_goodlist@2x.png
wx_btn_goodlist.png
btn_goodlist.png
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;交叉业务协作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交叉业务协作&#34;&gt;#&lt;/a&gt; 交叉业务协作&lt;/h3&gt;
&lt;p&gt;业务交叉协作的时候，为了避免图片命名冲突，建议图片名加上业务和模块前辍，如拍拍侧和手 Q 侧的业务交叉合作时，侧栏导航 icon 雪碧图命名：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;推荐：
pp_icon_mod_sidenav.png

不推荐：
icon_mod_sidenav.png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;处理高清图片的时候，命名应该加上图片相应的精度说明&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;推荐：
jdc_logo@1x.png
jdc_logo@2x.png

不推荐：
jdc_logo.png
jdc_logo_retina.png
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;htmlcss-文件命名规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#htmlcss-文件命名规范&#34;&gt;#&lt;/a&gt; HTML/CSS 文件命名规范&lt;/h2&gt;
&lt;p&gt;确保文件命名总是以字母开头而不是数字，且字母一律小写，以下划线连接且不带其他标点符号，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- HTML --&amp;gt;
jdc.html
jdc_list.html
jdc_detail.html

&amp;lt;!-- SASS --&amp;gt;
jdc.scss
jdc_list.scss
jdc_detail.scss
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/git/git%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
            <title>git基本用法</title>
            <link>https://entropywhite.com/computer-science/web/git/git%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="git" scheme="https://entropywhite.com/categories/computer-science/web/git/" />
            <category term="git" scheme="https://entropywhite.com/tags/git/" />
            <pubDate>Mon, 15 Aug 2022 11:42:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;git工作流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git工作流程&#34;&gt;#&lt;/a&gt; Git 工作流程&lt;/h2&gt;
&lt;p&gt;克隆 git 资源作为工作目录&lt;/p&gt;
&lt;p&gt;在克隆资源上添加或修改文件&lt;/p&gt;
&lt;p&gt;其他人修改了，你可以更新资源&lt;/p&gt;
&lt;p&gt;在提交前查看修改&lt;/p&gt;
&lt;p&gt;提交修改&lt;/p&gt;
&lt;p&gt;修改完成后，如果发现错误，可以撤回提交并再次修改并提交&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%9B%BE/git-process.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;Git 工作区、暂存区和版本库&lt;/p&gt;
&lt;p&gt;工作区：电脑看到的目录&lt;/p&gt;
&lt;p&gt;暂存区：叫 stage 或 index。一般存放在.git 目录下 index 文件 (.git/index) 中，所以我们把暂存区有时也叫作索引 (index)&lt;/p&gt;
&lt;p&gt;版本库：工作区有一个隐藏目录，是 git 版本库&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%9B%BE/2.jpg&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;图中左侧为工作区，右侧为版本库。在版本库中标记为 &amp;quot;index&amp;quot; 的区域是暂存区（stage/index），标记为 &amp;quot;master&amp;quot; 的是 master 分支所代表的目录树。&lt;/p&gt;
&lt;p&gt;图中我们可以看出此时 &amp;quot;HEAD&amp;quot; 实际是指向 master 分支的一个 &amp;quot;游标&amp;quot;。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。&lt;/p&gt;
&lt;p&gt;图中的 objects 标识的区域为 Git 的对象库，实际位于 &amp;quot;.git/objects&amp;quot; 目录下，里面包含了创建的各种对象及内容。&lt;/p&gt;
&lt;p&gt;对工作区修改（或新增）的文件执行 &lt;strong&gt;git add&lt;/strong&gt; 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的 ID 被记录在暂存区的文件索引中。&lt;/p&gt;
&lt;p&gt;执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。&lt;/p&gt;
&lt;p&gt;执行 &lt;strong&gt;git reset HEAD&lt;/strong&gt; 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。&lt;/p&gt;
&lt;p&gt;执行 &lt;strong&gt;git rm --cached &amp;lt;file&amp;gt;&lt;/strong&gt; 命令时，会直接从暂存区删除文件，工作区则不做出改变。&lt;/p&gt;
&lt;p&gt;执行 &lt;strong&gt;git checkout .&lt;/strong&gt; 或者 &lt;strong&gt;git checkout -- &amp;lt;file&amp;gt;&lt;/strong&gt; 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区中的改动。&lt;/p&gt;
&lt;p&gt;执行 &lt;strong&gt;git checkout HEAD .&lt;/strong&gt; 或者 &lt;strong&gt;git checkout HEAD &amp;lt;file&amp;gt;&lt;/strong&gt; 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。&lt;/p&gt;
&lt;h2 id=&#34;git创建仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git创建仓库&#34;&gt;#&lt;/a&gt; Git 创建仓库&lt;/h2&gt;
&lt;p&gt;Git 使用 &lt;strong&gt;git init&lt;/strong&gt; 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，在执行完成 &lt;strong&gt;git init&lt;/strong&gt; 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。&lt;/p&gt;
&lt;h3 id=&#34;使用方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用方法&#34;&gt;#&lt;/a&gt; 使用方法&lt;/h3&gt;
&lt;p&gt;使用当前目录作为 Git 仓库，我们只需使它初始化。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该命令执行完后会在当前目录生成一个 .git 目录。&lt;/p&gt;
&lt;p&gt;使用我们指定目录作为 Git 仓库。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init newrepo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。&lt;/p&gt;
&lt;p&gt;如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add *.c
$ git add README
$ git commit -m &#39;内容文字&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 在 Linux 系统中，commit 信息使用单引号 &lt;strong&gt;&#39;&lt;/strong&gt;，Windows 系统，commit 信息使用双引号 &lt;strong&gt;&amp;quot;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以在 git bash 中 &lt;strong&gt;git commit -m &#39; 提交说明&#39;&lt;/strong&gt; 这样是可以的，在 Windows 命令行中就要使用双引号 &lt;strong&gt;git commit -m &amp;quot;提交说明&amp;quot;&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;git-clone&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git-clone&#34;&gt;#&lt;/a&gt; git clone&lt;/h2&gt;
&lt;p&gt;我们使用 &lt;strong&gt;git clone&lt;/strong&gt; 从现有 Git 仓库中拷贝项目（类似 &lt;strong&gt;svn checkout&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;克隆仓库的命令格式为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone &amp;lt;repo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果我们需要克隆到指定的目录，可以使用以下命令格式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone &amp;lt;repo&amp;gt; &amp;lt;directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;参数说明：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**repo:**Git 仓库。&lt;/li&gt;
&lt;li&gt;**directory:** 本地目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone git://github.com/schacon/grit.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行该命令后，会在当前目录下创建一个名为 grit 的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。&lt;/p&gt;
&lt;p&gt;如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone git://github.com/schacon/grit.git mygrit
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置&#34;&gt;#&lt;/a&gt; 配置&lt;/h2&gt;
&lt;p&gt;git 的设置使用 &lt;strong&gt;git config&lt;/strong&gt; 命令。&lt;/p&gt;
&lt;p&gt;显示当前的 git 配置信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --list
credential.helper=osxkeychain
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
core.ignorecase=true
core.precomposeunicode=true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑 git 配置文件:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config -e    # 针对当前仓库 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config -e --global   # 针对系统上所有仓库
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置提交代码时的用户信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global user.name &amp;quot;runoob&amp;quot;
$ git config --global user.email test@runoob.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果去掉 &lt;strong&gt;--global&lt;/strong&gt; 参数只对当前仓库有效。&lt;/p&gt;
&lt;h2 id=&#34;git基本操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git基本操作&#34;&gt;#&lt;/a&gt; Git 基本操作&lt;/h2&gt;
&lt;p&gt;Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。&lt;/p&gt;
&lt;p&gt;Git 常用的是以下 6 个命令：&lt;strong&gt;git clone&lt;/strong&gt;、&lt;strong&gt;git push&lt;/strong&gt;、&lt;strong&gt;git add&lt;/strong&gt; 、&lt;strong&gt;git commit&lt;/strong&gt;、&lt;strong&gt;git checkout&lt;/strong&gt;、&lt;strong&gt;git pull&lt;/strong&gt;，后面我们会详细介绍。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%9B%BE/3.jpg&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;workspace：工作区&lt;/li&gt;
&lt;li&gt;staging area：暂存区 / 缓存区&lt;/li&gt;
&lt;li&gt;local repository：版本库或本地仓库&lt;/li&gt;
&lt;li&gt;remote repository：远程仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;创建仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建仓库&#34;&gt;#&lt;/a&gt; 创建仓库&lt;/h3&gt;
&lt;p&gt;下表列出了 git 创建仓库的命令：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;命令&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;初始化仓库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git clone&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;拷贝一份远程仓库，也就是下载一个项目。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;提交与修改&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#提交与修改&#34;&gt;#&lt;/a&gt; 提交与修改&lt;/h2&gt;
&lt;p&gt;Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。&lt;/p&gt;
&lt;p&gt;下表列出了有关创建与提交你的项目的快照的命令：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;命令&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git add&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;添加文件到暂存区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;查看仓库当前的状态，显示有变更的文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;比较文件的不同，即暂存区和工作区的差异&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提交暂存区到本地仓库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git reset --hard&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;回退版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git rm&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;删除工作区文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git mv&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;移动或重命名工作区文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;提交日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#提交日志&#34;&gt;#&lt;/a&gt; 提交日志&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;命令&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;查看历史提交记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git reflog&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;查看历史操作版本号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git blame &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;以列表形式查看指定文件的历史修改记录&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;远程操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#远程操作&#34;&gt;#&lt;/a&gt; 远程操作&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;命令&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git remote&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;远程仓库操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git fetch&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;从远程获取代码库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;下载远程代码并合并&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;上传远程代码并合并&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;git分支管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git分支管理&#34;&gt;#&lt;/a&gt; Git 分支管理&lt;/h2&gt;
&lt;p&gt;几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。&lt;/p&gt;
&lt;p&gt;创建分支命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch (branchname)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;切换分支命令:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout (branchname)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。&lt;/p&gt;
&lt;p&gt;合并分支命令:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git merge 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。&lt;/p&gt;
&lt;p&gt;开始前我们先创建一个测试目录：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir gitdemo
$ cd gitdemo/
$ git init
Initialized empty Git repository...
$ touch README
$ git add README
$ git commit -m &#39;第一次版本提交&#39;
[master (root-commit) 3b58100] 第一次版本提交
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 README
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;列出分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#列出分支&#34;&gt;#&lt;/a&gt; 列出分支&lt;/h3&gt;
&lt;p&gt;列出分支基本命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;没有参数时，&lt;strong&gt;git branch&lt;/strong&gt; 会列出你在本地的分支。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch
* master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此例的意思就是，我们有一个叫做 &lt;strong&gt;master&lt;/strong&gt; 的分支，并且该分支是当前分支。&lt;/p&gt;
&lt;p&gt;当你执行 &lt;strong&gt;git init&lt;/strong&gt; 的时候，默认情况下 Git 就会为你创建 &lt;strong&gt;master&lt;/strong&gt; 分支。&lt;/p&gt;
&lt;p&gt;如果我们要手动创建一个分支。执行 &lt;strong&gt;git branch (branchname)&lt;/strong&gt; 即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch testing
$ git branch
* master
  testing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在我们可以看到，有了一个新分支 &lt;strong&gt;testing&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当你以此方式在上次提交更新之后创建了新分支，如果后来又有更新提交， 然后又切换到了 &lt;strong&gt;testing&lt;/strong&gt; 分支，Git 将还原你的工作目录到你创建分支时候的样子。&lt;/p&gt;
&lt;p&gt;接下来我们将演示如何切换分支，我们用 git checkout (branch) 切换到我们要修改的分支。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls
README
$ echo &#39;runoob.com&#39; &amp;gt; test.txt
$ git add .
$ git commit -m &#39;add test.txt&#39;
[master 3e92c19] add test.txt
 1 file changed, 1 insertion(+)
 create mode 100644 test.txt
$ ls
README        test.txt
$ git checkout testing
Switched to branch &#39;testing&#39;
$ ls
README
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当我们切换到 &lt;strong&gt;testing&lt;/strong&gt; 分支的时候，我们添加的新文件 test.txt 被移除了。切换回 &lt;strong&gt;master&lt;/strong&gt; 分支的时候，它们又重新出现了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout master
Switched to branch &#39;master&#39;
$ ls
README        test.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout -b newtest
Switched to a new branch &#39;newtest&#39;
$ git rm test.txt 
rm &#39;test.txt&#39;
$ ls
README
$ touch runoob.php
$ git add .
$ git commit -am &#39;removed test.txt、add runoob.php&#39;
[newtest c1501a2] removed test.txt、add runoob.php
 2 files changed, 1 deletion(-)
 create mode 100644 runoob.php
 delete mode 100644 test.txt
$ ls
README        runoob.php
$ git checkout master
Switched to branch &#39;master&#39;
$ ls
README        test.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如你所见，我们创建了一个分支，在该分支上移除了一些文件 test.txt，并添加了 runoob.php 文件，然后切换回我们的主分支，删除的 test.txt 文件又回来了，且新增加的 runoob.php 不存在主分支中。&lt;/p&gt;
&lt;p&gt;使用分支将工作切分开来，从而让我们能够在不同开发环境中做事，并来回切换。&lt;/p&gt;
&lt;h3 id=&#34;删除分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除分支&#34;&gt;#&lt;/a&gt; 删除分支&lt;/h3&gt;
&lt;p&gt;删除分支命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch -d (branchname)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如我们要删除 testing 分支：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch
* master
  testing
$ git branch -d testing
Deleted branch testing (was 85fc7e7).
$ git branch
* master
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;分支合并&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分支合并&#34;&gt;#&lt;/a&gt; 分支合并&lt;/h3&gt;
&lt;p&gt;一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch
* master
  newtest
$ ls
README        test.txt
$ git merge newtest
Updating 3e92c19..c1501a2
Fast-forward
 runoob.php | 0
 test.txt   | 1 -
 2 files changed, 1 deletion(-)
 create mode 100644 runoob.php
 delete mode 100644 test.txt
$ ls
README        runoob.php
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上实例中我们将 newtest 分支合并到主分支去，test.txt 文件被删除。&lt;/p&gt;
&lt;p&gt;合并完后就可以删除分支:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch -d newtest
Deleted branch newtest (was c1501a2).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;删除后， 就只剩下 master 分支了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch
* master
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;合并冲突&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#合并冲突&#34;&gt;#&lt;/a&gt; 合并冲突&lt;/h3&gt;
&lt;p&gt;合并并不仅仅是简单的文件添加、移除的操作，Git 也会合并修改。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch
* master
$ cat runoob.php
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;首先，我们创建一个叫做 change_site 的分支，切换过去，我们将 runoob.php 内容改为:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
echo &#39;runoob&#39;;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建 change_site 分支：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout -b change_site
Switched to a new branch &#39;change_site&#39;
$ vim runoob.php
$ head -3 runoob.php
&amp;lt;?php
echo &#39;runoob&#39;;
?&amp;gt;
$ git commit -am &#39;changed the runoob.php&#39;
[change_site 7774248] changed the runoob.php
 1 file changed, 3 insertions(+)
 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将修改的内容提交到 change_site 分支中。 现在，假如切换回 master 分支我们可以看内容恢复到我们修改前的 (空文件，没有代码)，我们再次修改 runoob.php 文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout master
Switched to branch &#39;master&#39;
$ cat runoob.php
$ vim runoob.php    # 修改内容如下
$ cat runoob.php
&amp;lt;?php
echo 1;
?&amp;gt;
$ git diff
diff --git a/runoob.php b/runoob.php
index e69de29..ac60739 100644
--- a/runoob.php
+++ b/runoob.php
@@ -0,0 +1,3 @@
+&amp;lt;?php
+echo 1;
+?&amp;gt;
$ git commit -am &#39;修改代码&#39;
[master c68142b] 修改代码
 1 file changed, 3 insertions(+)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在这些改变已经记录到我的 &amp;quot;master&amp;quot; 分支了。接下来我们将 &amp;quot;change_site&amp;quot; 分支合并过来。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git merge change_site
Auto-merging runoob.php
CONFLICT (content): Merge conflict in runoob.php
Automatic merge failed; fix conflicts and then commit the result.

$ cat runoob.php     # 打开文件，看到冲突内容
&amp;lt;?php
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
echo 1;
=======
echo &#39;runoob&#39;;
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; change_site
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们将前一个分支合并到 master 分支，一个合并冲突就出现了，接下来我们需要手动去修改它。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim runoob.php 
$ cat runoob.php
&amp;lt;?php
echo 1;
echo &#39;runoob&#39;;
?&amp;gt;
$ git diff
diff --cc runoob.php
index ac60739,b63d7d7..0000000
--- a/runoob.php
+++ b/runoob.php
@@@ -1,3 -1,3 +1,4 @@@
  &amp;lt;?php
 +echo 1;
+ echo &#39;runoob&#39;;
  ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 Git 中，我们可以用 git add 要告诉 Git 文件冲突已经解决&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git status -s
UU runoob.php
$ git add runoob.php
$ git status -s
M  runoob.php
$ git commit
[master 88afe0e] Merge branch &#39;change_site&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在我们成功解决了合并中的冲突，并提交了结果。&lt;/p&gt;
&lt;h2 id=&#34;git查看提交历史&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git查看提交历史&#34;&gt;#&lt;/a&gt; Git 查看提交历史&lt;/h2&gt;
&lt;p&gt;Git 提交历史一般常用两个命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;git log&lt;/strong&gt; - 查看历史提交记录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;git blame &amp;lt;file&amp;gt;&lt;/strong&gt; - 以列表形式查看指定文件的历史修改记录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;git-log&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git-log&#34;&gt;#&lt;/a&gt; git log&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在使用 Git 提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用 &lt;strong&gt;git log&lt;/strong&gt; 命令查看。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;针对我们前一章节的操作，使用 &lt;strong&gt;git log&lt;/strong&gt; 命令列出历史提交记录如下：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; $ git log
 commit d5e9fc2c811e0ca2b2d28506ef7dc14171a207d9 (HEAD -&amp;gt; master)
 Merge: c68142b 7774248
 Author: runoob &amp;lt;test@runoob.com&amp;gt;
 Date:   Fri May 3 15:55:58 2019 +0800
 
     Merge branch &#39;change_site&#39;
 
 commit c68142b562c260c3071754623b08e2657b4c6d5b
 Author: runoob &amp;lt;test@runoob.com&amp;gt;
 Date:   Fri May 3 15:52:12 2019 +0800
 
     修改代码
 
 commit 777424832e714cf65d3be79b50a4717aea51ab69 (change_site)
 Author: runoob &amp;lt;test@runoob.com&amp;gt;
 Date:   Fri May 3 15:49:26 2019 +0800
 
     changed the runoob.php
 
 commit c1501a244676ff55e7cccac1ecac0e18cbf6cb00
 Author: runoob &amp;lt;test@runoob.com&amp;gt;
 Date:   Fri May 3 15:35:32 2019 +0800
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们可以用 --oneline 选项来查看历史记录的简洁的版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; $ git log --oneline
 $ git log --oneline
 d5e9fc2 (HEAD -&amp;gt; master) Merge branch &#39;change_site&#39;
 c68142b 修改代码
 7774248 (change_site) changed the runoob.php
 c1501a2 removed test.txt、add runoob.php
 3e92c19 add test.txt
 3b58100 第一次版本提交
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这告诉我们的是，此项目的开发历史。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们还可以用 --graph 选项，查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; *   d5e9fc2 (HEAD -&amp;gt; master) Merge branch &#39;change_site&#39;
 |\  
 | * 7774248 (change_site) changed the runoob.php
 * | c68142b 修改代码
 |/  
 * c1501a2 removed test.txt、add runoob.php
 * 3e92c19 add test.txt
 * 3b58100 第一次版本提交
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;现在我们可以更清楚明了地看到何时工作分叉、又何时归并。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你也可以用 &lt;strong&gt;--reverse&lt;/strong&gt; 参数来逆向显示所有日志。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; $ git log --reverse --oneline
 3b58100 第一次版本提交
 3e92c19 add test.txt
 c1501a2 removed test.txt、add runoob.php
 7774248 (change_site) changed the runoob.php
 c68142b 修改代码
 d5e9fc2 (HEAD -&amp;gt; master) Merge branch &#39;change_site&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果只想查找指定用户的提交日志可以使用命令：git log --author , 例如，比方说我们要找 Git 源码中 Linus 提交的部分：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; $ git log --author=Linus --oneline -5
 81b50f3 Move &#39;builtin-*&#39; into a &#39;builtin/&#39; subdirectory
 3bb7256 make &amp;quot;index-pack&amp;quot; a built-in
 377d027 make &amp;quot;git pack-redundant&amp;quot; a built-in
 b532581 make &amp;quot;git unpack-file&amp;quot; a built-in
 112dd51 make &amp;quot;mktag&amp;quot; a built-in
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你要指定日期，可以执行几个选项：--since 和 --before，但是你也可以用 --until 和 --after。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 --no-merges 选项以隐藏合并提交）：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; $ git log --oneline --before=&amp;#123;3.weeks.ago&amp;#125; --after=&amp;#123;2010-04-18&amp;#125; --no-merges
 5469e2d Git 1.7.1-rc2
 d43427d Documentation/remote-helpers: Fix typos and improve language
 272a36b Fixup: Second argument may be any arbitrary string
 b6c8d2d Documentation/remote-helpers: Add invocation section
 5ce4f4e Documentation/urls: Rewrite to accomodate transport::address
 00b84e9 Documentation/remote-helpers: Rewrite description
 03aa87e Documentation: Describe other situations where -z affects git diff
 77bc694 rebase-interactive: silence warning when no commits rewritten
 636db2c t3301: add tests to use --format=&amp;quot;%N&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更多 git log 命令可查看：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2dpdC1zY20uY29tL2RvY3MvZ2l0LWxvZw==&#34;&gt;http://git-scm.com/docs/git-log&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;git-blame&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git-blame&#34;&gt;#&lt;/a&gt; git blame&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果要查看指定文件的修改记录可以使用 git blame 命令，格式如下：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; git blame &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git blame 命令是以列表形式显示修改记录，如下实例：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; $ git blame README 
 ^d2097aa (tianqixin 2020-08-25 14:59:25 +0800 1) # Runoob Git 测试
 db9315b0 (runoob    2020-08-25 16:00:23 +0800 2) # 菜鸟教程 
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git标签&#34;&gt;#&lt;/a&gt; Git 标签&lt;/h2&gt;
&lt;p&gt;如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。&lt;/p&gt;
&lt;p&gt;比如说，我们想为我们的 runoob 项目发布一个 &amp;quot;1.0&amp;quot; 版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）&amp;quot;v1.0&amp;quot; 的标签。&lt;/p&gt;
&lt;p&gt;-a 选项意为 &amp;quot;创建一个带注解的标签&amp;quot;。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git tag -a v1.0 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。&lt;/p&gt;
&lt;p&gt;现在，注意当我们执行 git log --decorate 时，我们可以看到我们的标签了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   d5e9fc2 (HEAD -&amp;gt; master) Merge branch &#39;change_site&#39;
|\  
| * 7774248 (change_site) changed the runoob.php
* | c68142b 修改代码
|/  
* c1501a2 removed test.txt、add runoob.php
* 3e92c19 add test.txt
* 3b58100 第一次版本提交
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。&lt;/p&gt;
&lt;p&gt;例如，假设我们发布了提交 85fc7e7 (上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git tag -a v0.9 85fc7e7
$ git log --oneline --decorate --graph
*   d5e9fc2 (HEAD -&amp;gt; master) Merge branch &#39;change_site&#39;
|\  
| * 7774248 (change_site) changed the runoob.php
* | c68142b 修改代码
|/  
* c1501a2 removed test.txt、add runoob.php
* 3e92c19 add test.txt
* 3b58100 (tag: v0.9) 第一次版本提交
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果我们要查看所有标签可以使用以下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git tag
v0.9
v1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指定标签信息命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git tag -a &amp;lt;tagname&amp;gt; -m &amp;quot;runoob.com标签&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PGP 签名标签命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git tag -s &amp;lt;tagname&amp;gt; -m &amp;quot;runoob.com标签&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;删除标签:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git tag -d v1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看此版本所修改的内容:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git show v1.0
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/css/CSS%E9%9D%A2%E8%AF%95/CSS%E7%B3%BB%E5%88%97/</guid>
            <title>CSS面试</title>
            <link>https://entropywhite.com/computer-science/web/css/CSS%E9%9D%A2%E8%AF%95/CSS%E7%B3%BB%E5%88%97/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="css" scheme="https://entropywhite.com/categories/computer-science/web/css/" />
            <category term="CSS 面试题" scheme="https://entropywhite.com/tags/CSS-%E9%9D%A2%E8%AF%95%E9%A2%98/" />
            <pubDate>Sun, 14 Aug 2022 17:12:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;1对盒子模型的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1对盒子模型的理解&#34;&gt;#&lt;/a&gt; 1. 对盒子模型的理解&lt;/h1&gt;
&lt;p&gt;对一个文档进行布局（layout）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）&lt;/p&gt;
&lt;p&gt;盒子从内到外分为四部分&lt;/p&gt;
&lt;p&gt;content：内容，显示文本图像等&lt;/p&gt;
&lt;p&gt;padding：内边框，清除内容周围区域元素，内边距是透明的，取值也不能为负，受盒子的背景影响&lt;/p&gt;
&lt;p&gt;border：边框，围绕内容的内边距的一条线或多条线，由线条大小、线条样式和线条颜色决定&lt;/p&gt;
&lt;p&gt;margin：外边框，在元素外创建额外的空白，空白通常不能放其他元素的区域&lt;/p&gt;
&lt;p&gt;这只是二维的部分，还有三维的部分，三维在二维的基础上，在内边框和外边框之间增加了背景图片和背景颜色&lt;/p&gt;
&lt;p&gt;在 CSS 里盒子模型分为两种：&lt;strong&gt;W3C 标准盒子模型&lt;/strong&gt;和&lt;strong&gt; IE 怪异盒子模型&lt;/strong&gt;，W3C 为默认模型&lt;/p&gt;
&lt;h2 id=&#34;标准盒子模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标准盒子模型&#34;&gt;#&lt;/a&gt; 标准盒子模型&lt;/h2&gt;
&lt;p&gt;标准盒子模型的总宽度是：宽 + 内边距 + 边框 + 外边框&lt;/p&gt;
&lt;p&gt;总高度是：高 + 内边距 + 边框 + 外边框&lt;/p&gt;
&lt;p&gt;高与宽没有包含内边距和边框&lt;/p&gt;
&lt;h2 id=&#34;怪异盒子模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#怪异盒子模型&#34;&gt;#&lt;/a&gt; 怪异盒子模型&lt;/h2&gt;
&lt;p&gt;怪异盒子模型的总宽度和总高度只有 宽 + 外边框 高 + 外边框&lt;/p&gt;
&lt;p&gt;高与宽包含了内边距和边框&lt;/p&gt;
&lt;h2 id=&#34;指定盒子模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指定盒子模型&#34;&gt;#&lt;/a&gt; 指定盒子模型&lt;/h2&gt;
&lt;p&gt;CSS 中的 &lt;code&gt;box-sizing&lt;/code&gt;  定义了引擎应该如何计算元素总高度和总宽度（指定盒子模型）&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;box-sizing&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; content-box|border-box&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;content-box 就是指定为标准盒子模型&lt;/p&gt;
&lt;p&gt;border-box 就是指定为怪异盒子模型&lt;/p&gt;
&lt;h1 id=&#34;2css选择器有哪些优先级哪些属性可以继承&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2css选择器有哪些优先级哪些属性可以继承&#34;&gt;#&lt;/a&gt; 2.CSS 选择器有哪些？优先级？哪些属性可以继承？&lt;/h1&gt;
&lt;h2 id=&#34;选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选择器&#34;&gt;#&lt;/a&gt; 选择器&lt;/h2&gt;
&lt;p&gt;CSS 选择器是 CSS 规则的第一部分&lt;/p&gt;
&lt;p&gt;它是元素和其他部分组合起来告诉浏览器哪个 HTML 元素应当是被选为应用规则中的 CSS 属性值的方式&lt;/p&gt;
&lt;p&gt;选择器所选择的元素，叫做 “选择器的对象”&lt;/p&gt;
&lt;p&gt;那么常用的选择器有 id 选择器 类选择器 标签选择器 后代选择器 子选择器 相邻兄弟选择器和群组选择器&lt;/p&gt;
&lt;p&gt;不常用的选择器有 伪类选择器 伪元素选择器 属性选择器&lt;/p&gt;
&lt;p&gt;CSS3 中新增的 层次选择器&lt;/p&gt;
&lt;h2 id=&#34;优先级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优先级&#34;&gt;#&lt;/a&gt; 优先级&lt;/h2&gt;
&lt;p&gt;内敛 &amp;gt; ID 选择器 &amp;gt; 类选择器 &amp;gt; 标签选择器&lt;/p&gt;
&lt;p&gt;至于如何计算 分为 ABCD 的值决定&lt;/p&gt;
&lt;p&gt;如果有内敛 则 A=1 否则 = 0，B 值是 ID 选择器出现次数，C 和 D 也如此对应&lt;/p&gt;
&lt;p&gt;知道了如何计算，那么就需要比较大小判断优先级&lt;/p&gt;
&lt;p&gt;从左往右依次比较，较大者优先&lt;/p&gt;
&lt;p&gt;如果相等，则向右一位进行比较&lt;/p&gt;
&lt;p&gt;如果 4 位全部相同，则后面覆盖前面的&lt;/p&gt;
&lt;p&gt;如果外部样式要强制覆盖内敛的话，需要使用 &lt;code&gt;!important&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;继承属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#继承属性&#34;&gt;#&lt;/a&gt; 继承属性&lt;/h2&gt;
&lt;p&gt;继承是指父元素一些属性，后代元素会自动拥有&lt;/p&gt;
&lt;p&gt;继承属性分成：字体属性、文本属性、元素可见性、表格布局属性、列表属性、引用和光标属性&lt;/p&gt;
&lt;p&gt;比较特殊的是，a 链接的字体颜色不能被继承 h1-h6 的字体大小也不能被继承&lt;/p&gt;
&lt;h1 id=&#34;3说说empxremvhvw的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3说说empxremvhvw的区别&#34;&gt;#&lt;/a&gt; 3. 说说 em/px/rem/vh/vw 的区别&lt;/h1&gt;
&lt;h2 id=&#34;em&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#em&#34;&gt;#&lt;/a&gt; em&lt;/h2&gt;
&lt;p&gt;em 是相对长度单位，相对于当前对象内文本的字体尺寸，如果没有设置文本内的字体尺寸，则默认为浏览器的字体尺寸（1em=16px）&lt;/p&gt;
&lt;p&gt;为了简化  &lt;code&gt;font-size&lt;/code&gt;  的换算，我们需要在 &lt;code&gt;css&lt;/code&gt;  中的  &lt;code&gt;body&lt;/code&gt;  选择器中声明 &lt;code&gt;font-size&lt;/code&gt; =  &lt;code&gt;62.5%&lt;/code&gt; ，这就使 em 值变为  &lt;code&gt;16px*62.5% = 10px&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样  &lt;code&gt;12px = 1.2em&lt;/code&gt; ,  &lt;code&gt;10px = 1em&lt;/code&gt; , 也就是说只需要将你的原来的 &lt;code&gt;px&lt;/code&gt;  数值除以 10，然后换上  &lt;code&gt;em&lt;/code&gt;  作为单位就行了&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;em 的值并不是固定的&lt;/li&gt;
&lt;li&gt;em 会继承父级元素的字体大小&lt;/li&gt;
&lt;li&gt;任意浏览器的默认字体高都是 16px&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;px&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#px&#34;&gt;#&lt;/a&gt; px&lt;/h2&gt;
&lt;p&gt;px 表示为像素，像素就是呈现在我们显示器上的一个个小点，每个像素点都是大小等同的，所以像素为计量单位被分在了绝对长度单位中&lt;/p&gt;
&lt;p&gt;有人会把 &lt;code&gt;px&lt;/code&gt;  认为是相对长度，原因在于在移动端中存在设备像素比， &lt;code&gt;px&lt;/code&gt;  实际显示的大小是不确定的&lt;/p&gt;
&lt;p&gt;这里之所以认为 &lt;code&gt;px&lt;/code&gt;  为绝对单位，在于 &lt;code&gt;px&lt;/code&gt;  的大小和元素的其他属性无关&lt;/p&gt;
&lt;h2 id=&#34;rem&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rem&#34;&gt;#&lt;/a&gt; rem&lt;/h2&gt;
&lt;p&gt;rem 是相对长度单位，相对的只是 HTML 根元素 &lt;code&gt;font-size&lt;/code&gt;  的值&lt;/p&gt;
&lt;p&gt;同样可以设置 &lt;code&gt;font-size&lt;/code&gt; = &lt;code&gt;62.5%&lt;/code&gt;  简化换算，这样 1rem=10px&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rem 单位可谓集相对大小和绝对大小的优点于一身&lt;/li&gt;
&lt;li&gt;和 em 不同的是 rem 总是相对于根元素，而不像 em 一样使用级联的方式来计算尺寸&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vh-vw&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vh-vw&#34;&gt;#&lt;/a&gt; vh、vw&lt;/h2&gt;
&lt;p&gt;vh 和 vw，实际上就是根据窗口的高度或宽度，分成 100 等份，100vw 就代表满宽，50vw 代表半宽&lt;/p&gt;
&lt;p&gt;窗口分为桌面端（浏览器的可视区域）和移动端（布局视口）&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;px&lt;/strong&gt;：绝对单位，页面按精确像素展示&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;em&lt;/strong&gt;：相对单位，基准点为父节点字体的大小，如果自身定义了 &lt;code&gt;font-size&lt;/code&gt;  按自身来计算，整个页面内 &lt;code&gt;1em&lt;/code&gt;  不是一个固定的值&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rem&lt;/strong&gt;：相对单位，可理解为 &lt;code&gt;root em&lt;/code&gt; , 相对根节点 &lt;code&gt;html&lt;/code&gt;  的字体大小来计算&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;vh、vw&lt;/strong&gt;：主要用于页面视口大小布局，在页面布局上更加方便简单&lt;/p&gt;
&lt;h1 id=&#34;4说说设备像素-css像素-设备独立像素-dpr-ppi-之间的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4说说设备像素-css像素-设备独立像素-dpr-ppi-之间的区别&#34;&gt;#&lt;/a&gt; 4. 说说设备像素、css 像素、设备独立像素、dpr、ppi 之间的区别？&lt;/h1&gt;
&lt;h2 id=&#34;设备像素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设备像素&#34;&gt;#&lt;/a&gt; 设备像素&lt;/h2&gt;
&lt;p&gt;设备像素（device pixels），又称为物理像素&lt;/p&gt;
&lt;p&gt;指设备能控制显示的最小物理单位，不一定是一个小正方形区块，也没有标准的宽高，只是用于显示丰富色彩的一个 “点” 而已&lt;/p&gt;
&lt;p&gt;可以参考公园里的景观变色彩灯，一个彩灯 (物理像素) 由红、蓝、绿小灯组成，三盏小灯不同的亮度混合出各种色彩&lt;/p&gt;
&lt;p&gt;从屏幕在工厂生产出的那天起，它上面设备像素点就固定不变了，单位为 &lt;code&gt;pt&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;css像素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css像素&#34;&gt;#&lt;/a&gt; css 像素&lt;/h2&gt;
&lt;p&gt;CSS 像素（css pixel, px）: 适用于 web 编程，在 CSS 中以 px 为后缀，是一个长度单位&lt;/p&gt;
&lt;p&gt;在 CSS 规范中，长度单位可以分为两类，绝对单位以及相对单位&lt;/p&gt;
&lt;p&gt;px 是一个相对单位，相对的是设备像素（device pixel）&lt;/p&gt;
&lt;p&gt;一般情况，页面缩放比为 1，1 个 CSS 像素等于 1 个设备独立像素&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CSS&lt;/code&gt;  像素又具有两个方面的相对性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在同一个设备上，每 1 个 CSS 像素所代表的设备像素是可以变化的（比如调整屏幕的分辨率）&lt;/li&gt;
&lt;li&gt;在不同的设备之间，每 1 个 CSS 像素所代表的设备像素是可以变化的（比如两个不同型号的手机）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在页面进行缩放操作也会 引起 &lt;code&gt;css&lt;/code&gt;  中 &lt;code&gt;px&lt;/code&gt;  的变化，假设页面放大一倍，原来的 1px 的东西变成 2px，在实际宽度不变的情况下 1px 变得跟原来的 2px 的长度（长宽）一样了（元素会占据更多的设备像素）&lt;/p&gt;
&lt;p&gt;假设原来需要 320px 才能填满的宽度现在只需要 160px&lt;/p&gt;
&lt;p&gt;px 会受到下面的因素的影响而变化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每英寸像素（PPI）&lt;/li&gt;
&lt;li&gt;设备像素比（DPR）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设备独立像素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设备独立像素&#34;&gt;#&lt;/a&gt; 设备独立像素&lt;/h2&gt;
&lt;p&gt;设备独立像素（Device Independent Pixel）：与设备无关的逻辑像素，代表可以通过程序控制使用的虚拟像素，是一个总体概念，包括了 CSS 像素&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;javaScript&lt;/code&gt;  中可以通过 &lt;code&gt;window.screen.width/ window.screen.height&lt;/code&gt;  查看&lt;/p&gt;
&lt;p&gt;比如说电脑屏幕的分辨率（非严谨说法）指的就是设备独立像素&lt;/p&gt;
&lt;p&gt;一个设备独立像素里可能包含 1 个或者多个物理像素点，包含的越多则屏幕看起来越清晰&lt;/p&gt;
&lt;p&gt;至于为什么出现设备独立像素这种虚拟像素单位概念，下面举个例子：&lt;/p&gt;
&lt;p&gt;iPhone 3GS 和 iPhone 4/4s 的尺寸都是 3.5 寸，但 iPhone 3GS 的分辨率是 320x480，iPhone 4/4s 的分辨率是 640x960&lt;/p&gt;
&lt;p&gt;这意味着，iPhone 3GS 有 320 个物理像素，iPhone 4/4s 有 640 个物理像素&lt;/p&gt;
&lt;p&gt;如果我们按照真实的物理像素进行布局，比如说我们按照 320 物理像素进行布局，到了 640 物理像素的手机上就会有一半的空白，为了避免这种问题，就产生了虚拟像素单位&lt;/p&gt;
&lt;p&gt;我们统一 iPhone 3GS 和 iPhone 4/4s 都是 320 个虚拟像素，只是在 iPhone 3GS 上，最终 1 个虚拟像素换算成 1 个物理像素，在 iphone 4s 中，1 个虚拟像素最终换算成 2 个物理像素&lt;/p&gt;
&lt;p&gt;至于 1 个虚拟像素被换算成几个物理像素，这个数值我们称之为设备像素比，也就是 &lt;code&gt;dpr&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;dpr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dpr&#34;&gt;#&lt;/a&gt; dpr&lt;/h2&gt;
&lt;p&gt;dpr（device pixel ratio），设备像素比，代表设备独立像素到设备像素的转换关系，在 &lt;code&gt;JavaScript&lt;/code&gt;  中可以通过  &lt;code&gt;window.devicePixelRatio&lt;/code&gt;  获取&lt;/p&gt;
&lt;p&gt;dpr = 设备像素 / 设备独立像素&lt;/p&gt;
&lt;p&gt;当设备像素比为 1:1 时，使用 1（1×1）个设备像素显示 1 个 CSS 像素&lt;/p&gt;
&lt;p&gt;当设备像素比为 2:1 时，使用 4（2×2）个设备像素显示 1 个 CSS 像素&lt;/p&gt;
&lt;p&gt;当设备像素比为 3:1 时，使用 9（3×3）个设备像素显示 1 个 CSS 像素&lt;/p&gt;
&lt;p&gt;当 &lt;code&gt;dpr&lt;/code&gt;  为 x ，那么 &lt;code&gt;1px&lt;/code&gt;  的 &lt;code&gt;CSS&lt;/code&gt;  像素宽度对应 &lt;code&gt;x px&lt;/code&gt;  的物理像素的宽度，1px 的 &lt;code&gt;CSS&lt;/code&gt;  像素高度对应 &lt;code&gt;x px&lt;/code&gt;  的物理像素高度&lt;/p&gt;
&lt;h2 id=&#34;ppi&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ppi&#34;&gt;#&lt;/a&gt; ppi&lt;/h2&gt;
&lt;p&gt;ppi （pixel per inch），每英寸像素，表示每英寸所包含的像素点数目，更确切的说法应该是像素密度。数值越高，说明屏幕能以更高密度显示图像&lt;/p&gt;
&lt;p&gt;计算方法：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://static.vue-js.com/f734adf0-91f2-11eb-ab90-d9ae814b240d.png&#34; alt&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-2&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;无缩放情况下，1 个 CSS 像素等于 1 个设备独立像素&lt;/p&gt;
&lt;p&gt;设备像素由屏幕生产之后就不发生改变，而设备独立像素是一个虚拟单位会发生改变&lt;/p&gt;
&lt;p&gt;PC 端中，1 个设备独立像素 = 1 个设备像素 （在 100%，未缩放的情况下）&lt;/p&gt;
&lt;p&gt;在移动端中，标准屏幕（160ppi）下 1 个设备独立像素 = 1 个设备像素&lt;/p&gt;
&lt;p&gt;设备像素比（dpr） = 设备像素 / 设备独立像素&lt;/p&gt;
&lt;p&gt;每英寸像素（ppi），值越大，图像越清晰&lt;/p&gt;
&lt;h1 id=&#34;5css中有哪些方式可以隐藏页面元素区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5css中有哪些方式可以隐藏页面元素区别&#34;&gt;#&lt;/a&gt; 5.css 中，有哪些方式可以隐藏页面元素？区别？&lt;/h1&gt;
&lt;p&gt;通过 css 实现隐藏页面元素有如下：&lt;/p&gt;
&lt;h2 id=&#34;displaynone&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#displaynone&#34;&gt;#&lt;/a&gt; display:none&lt;/h2&gt;
&lt;p&gt;这是最常用的一种方式，元素会彻底消失，其占有的空间会被其他元素占有，会触发重排和重绘&lt;/p&gt;
&lt;p&gt;特点：元素不可见，不占据空间，无法响应点击事件&lt;/p&gt;
&lt;h2 id=&#34;visibilityhidden&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#visibilityhidden&#34;&gt;#&lt;/a&gt; visibility:hidden&lt;/h2&gt;
&lt;p&gt;这也是常用的一种方式，但与上一个不同，虽然看上去是消失了，但空间依然占据着，会触发重绘但不触发重排&lt;/p&gt;
&lt;p&gt;特点：元素不可见，占据页面空间，无法响应点击事件&lt;/p&gt;
&lt;h2 id=&#34;opacity0&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#opacity0&#34;&gt;#&lt;/a&gt; opacity:0&lt;/h2&gt;
&lt;p&gt;设置透明度为 0，仅仅只是隐藏了而已，可以被触发事件，依然占据空间，会触发重排，一般情况下只会触发重绘（如果利用动画，对透明度做变化，会触发 GPU 加速，不触发重绘）&lt;/p&gt;
&lt;p&gt;其子元素不能设置 opacity 来达到显示的效果&lt;/p&gt;
&lt;p&gt;特点：改变元素透明度，元素不可见，占据页面空间，可以响应点击事件&lt;/p&gt;
&lt;h2 id=&#34;设置height-width模型属性为0&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置height-width模型属性为0&#34;&gt;#&lt;/a&gt; 设置 height、width 模型属性为 0&lt;/h2&gt;
&lt;p&gt;将所有影响盒子模型的属性全部设置为 0，隐藏的元素内有子元素或内容，可以使用溢出隐藏来隐藏子元素或内容&lt;/p&gt;
&lt;p&gt;特点：元素不可见，不占据页面空间，无法响应点击事件&lt;/p&gt;
&lt;h2 id=&#34;positionabsolute&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#positionabsolute&#34;&gt;#&lt;/a&gt; position:absolute&lt;/h2&gt;
&lt;p&gt;将元素移出可视区域，需要搭配上下左右使用&lt;/p&gt;
&lt;p&gt;特点：元素不可见，不影响页面布局&lt;/p&gt;
&lt;h2 id=&#34;clip-path&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#clip-path&#34;&gt;#&lt;/a&gt; clip-path&lt;/h2&gt;
&lt;p&gt;通过裁剪的形式将元素去除&lt;/p&gt;
&lt;p&gt;特点：元素不可见，占据页面空间，无法响应点击事件&lt;/p&gt;
&lt;h2 id=&#34;总结-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-3&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;最常用的还是 &lt;code&gt;display:none&lt;/code&gt;  和 &lt;code&gt;visibility:hidden&lt;/code&gt; ，其他的方式只能认为是奇招，它们的真正用途并不是用于隐藏元素，所以并不推荐使用它们&lt;/p&gt;
&lt;h2 id=&#34;关于display-none-visibility-hidden-opacity-0的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于display-none-visibility-hidden-opacity-0的区别&#34;&gt;#&lt;/a&gt; 关于 &lt;code&gt;display: none&lt;/code&gt; 、 &lt;code&gt;visibility: hidden&lt;/code&gt; 、 &lt;code&gt;opacity: 0&lt;/code&gt;  的区别&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;display: none&lt;/th&gt;
&lt;th&gt;visibility: hidden&lt;/th&gt;
&lt;th&gt;opacity: 0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;页面中&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不存在&lt;/td&gt;
&lt;td&gt;存在&lt;/td&gt;
&lt;td&gt;存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;重排&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;会&lt;/td&gt;
&lt;td&gt;不会&lt;/td&gt;
&lt;td&gt;不会&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;重绘&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;会&lt;/td&gt;
&lt;td&gt;会&lt;/td&gt;
&lt;td&gt;不一定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;自身绑定事件&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不触发&lt;/td&gt;
&lt;td&gt;不触发&lt;/td&gt;
&lt;td&gt;可触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;transition&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;子元素可复原&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不能&lt;/td&gt;
&lt;td&gt;能&lt;/td&gt;
&lt;td&gt;不能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;被遮挡的元素可触发事件&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;能&lt;/td&gt;
&lt;td&gt;能&lt;/td&gt;
&lt;td&gt;不能&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;6谈谈你对bfc的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6谈谈你对bfc的理解&#34;&gt;#&lt;/a&gt; 6. 谈谈你对 BFC 的理解&lt;/h1&gt;
&lt;p&gt;在 css 基础下的 css 有讲&lt;/p&gt;
&lt;h1 id=&#34;7元素水平垂直居中的方法有哪些如果元素不定宽高呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7元素水平垂直居中的方法有哪些如果元素不定宽高呢&#34;&gt;#&lt;/a&gt; 7. 元素水平垂直居中的方法有哪些？如果元素不定宽高呢？&lt;/h1&gt;
&lt;p&gt;根据元素标签的性质，可以分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内联元素居中布局&lt;/li&gt;
&lt;li&gt;块级元素居中布局&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;内联元素居中布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内联元素居中布局&#34;&gt;#&lt;/a&gt; 内联元素居中布局&lt;/h3&gt;
&lt;p&gt;水平居中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行内元素可设置：text-align: center&lt;/li&gt;
&lt;li&gt;flex 布局设置父元素：display: flex; justify-content: center&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;垂直居中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单行文本父元素确认高度：height === line-height&lt;/li&gt;
&lt;li&gt;多行文本父元素确认高度：display: table-cell; vertical-align: middle&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;块级元素居中布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#块级元素居中布局&#34;&gt;#&lt;/a&gt; 块级元素居中布局&lt;/h3&gt;
&lt;p&gt;水平居中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定宽: margin: 0 auto&lt;/li&gt;
&lt;li&gt;绝对定位 + left:50%+margin: 负自身一半&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;垂直居中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;position: absolute 设置 left、top、margin-left、margin-top (定高)&lt;/li&gt;
&lt;li&gt;display: table-cell&lt;/li&gt;
&lt;li&gt;transform: translate(x, y)&lt;/li&gt;
&lt;li&gt;flex (不定高，不定宽)&lt;/li&gt;
&lt;li&gt;grid (不定高，不定宽)，兼容性相对比较差&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不知道元素宽高大小仍能实现水平垂直居中的方法有&lt;/p&gt;
&lt;p&gt;利用定位 + margin:auto、利用定位 + transform、flex 布局、grid 布局&lt;/p&gt;
&lt;p&gt;table 布局和利用定位 + margin: 负值需要知道元素宽高大小&lt;/p&gt;
&lt;h1 id=&#34;8如何实现两栏布局右侧自适应三栏布局中间自适应呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8如何实现两栏布局右侧自适应三栏布局中间自适应呢&#34;&gt;#&lt;/a&gt; 8. 如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？&lt;/h1&gt;
&lt;h3 id=&#34;两栏布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两栏布局&#34;&gt;#&lt;/a&gt; 两栏布局&lt;/h3&gt;
&lt;p&gt;两栏布局实现效果就是将页面分割成左右宽度不等的两列，宽度较小的列设置为固定宽度，剩余宽度由另一列撑满&lt;/p&gt;
&lt;p&gt;比如设置了侧边栏的 Edge 浏览器&lt;/p&gt;
&lt;p&gt;实现思路也非常的简单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 float 左浮左边栏&lt;/li&gt;
&lt;li&gt;右边模块使用 margin-left 撑出内容块做内容展示&lt;/li&gt;
&lt;li&gt;为父级元素添加 BFC，防止下方元素飞到上方内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直接简单粗暴就使用 flex 布局&lt;/p&gt;
&lt;h3 id=&#34;三栏布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三栏布局&#34;&gt;#&lt;/a&gt; 三栏布局&lt;/h3&gt;
&lt;p&gt;三栏布局按照左中右的顺序进行排列，通常中间列最宽，左右两列次之&lt;/p&gt;
&lt;p&gt;常见的为 github&lt;/p&gt;
&lt;p&gt;实现三栏布局中间自适应的布局方式有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两边使用 float，中间使用 margin&lt;/li&gt;
&lt;li&gt;两边使用 absolute，中间使用 margin&lt;/li&gt;
&lt;li&gt;两边使用 float 和负 margin&lt;/li&gt;
&lt;li&gt;display: table 实现&lt;/li&gt;
&lt;li&gt;flex 实现&lt;/li&gt;
&lt;li&gt;grid 网格布局&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;9说说flexbox弹性盒布局模型以及适用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9说说flexbox弹性盒布局模型以及适用场景&#34;&gt;#&lt;/a&gt; 9. 说说 flexbox（弹性盒布局模型）, 以及适用场景？&lt;/h1&gt;
&lt;p&gt;在 css 基础下的 css 有讲&lt;/p&gt;
&lt;h1 id=&#34;10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10&#34;&gt;#&lt;/a&gt; 10.&lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/js%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C%E7%9F%A5%E8%AF%86/%E8%A7%A3%E5%86%B3js%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</guid>
            <title></title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/js%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C%E7%9F%A5%E8%AF%86/%E8%A7%A3%E5%86%B3js%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</link>
            <pubDate>Wed, 03 Aug 2022 17:57:28 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;解决文档已完成加载后执行-documentwrite整个-html-页面将被覆盖的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决文档已完成加载后执行-documentwrite整个-html-页面将被覆盖的问题&#34;&gt;#&lt;/a&gt; 解决文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖的问题&lt;/h1&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;button onclick=&#34;winTest()&#34;&gt;按钮&amp;lt;/button&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;function winTest()&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    var txt1 = &#34;This is a new window.&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    var txt2 = &#34;This is a test.&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    document.open(&#34;text/html&#34;,&#34;replace&#34;);//加上&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    document.writeln(txt1);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    document.write(txt2);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    document.close();//加上&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;该方法将关闭 open () 方法打开的文档流，并强制地显示出所有缓存的输出内容。如果您使用 write () 方法动态地输出一个文档，必须记住当你这么做的时候要调用 close () 方法，以确保所有文档内容都能显示。document.write () 不会隐式调用 document.close () 方法的，否则例 2 中将不会有 &lt;strong&gt;This is a new window.&lt;/strong&gt; 内容了&lt;/p&gt;
&lt;p&gt;一旦调用了 close ()，就不应该再次调用 write ()，因为这会隐式地调用 open () 来擦除当前文档并开始一个新的文档&lt;/p&gt;
&lt;p&gt;在载入页面后，浏览器输出流自动关闭。在此之后，比如延迟脚本 [setTimeout ()] 或是 onload 执行的方法，任何一个对当前页面进行操作的 document.write () 方法将打开 — 个新的输出流，它将清除当前页面内容 (包括源文档的任何变量或值)&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/html/html%E9%9D%A2%E8%AF%95/</guid>
            <title>html面试题搜集</title>
            <link>https://entropywhite.com/computer-science/web/html/html%E9%9D%A2%E8%AF%95/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="html" scheme="https://entropywhite.com/categories/computer-science/web/html/" />
            <category term="HTML" scheme="https://entropywhite.com/tags/HTML/" />
            <pubDate>Sun, 31 Jul 2022 17:04:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;从输入url到页面展示发生了什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从输入url到页面展示发生了什么&#34;&gt;#&lt;/a&gt; 从输入 url 到页面展示发生了什么&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODU4NTUxNjQwMjIwNzI5MzUxI2hlYWRpbmctMA==&#34;&gt;经典面试题！从输入 URL 到页面展示你还不赶紧学起来？ - 掘金 (juejin.cn)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;浏览器的多进程架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器的多进程架构&#34;&gt;#&lt;/a&gt; &lt;strong&gt;浏览器的多进程架构&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;从浏览器输入 URL 到页面渲染的整个过程都是由 浏览器架构中的各个进程之间的配合完成。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器主进程：管理子进程、提供服务功能&lt;/li&gt;
&lt;li&gt;渲染进程：将 HTML、CSS、JS 渲染成界面，js 引擎 v8 和排版引擎 Blink 就在上面，他会为每一个 tab 页面创建一个渲染进程&lt;/li&gt;
&lt;li&gt;GPU 进程：本来是负责处理 3Dcss 的，后来慢慢的 UI 界面也交给 GPU 来绘制&lt;/li&gt;
&lt;li&gt;网络进程：就是负责网络请求，网络资源加载的进程&lt;/li&gt;
&lt;li&gt;插件进程：负责插件的运行的，因为插件很容易崩溃，把它放到独立的进程里不要让它影响别人&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;过程大致可以描述为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户输入 url, 处理输入信息，主进程开始导航，交给网络进程干活&lt;/li&gt;
&lt;li&gt;网络进程发起网络请求，其中有可能会发生重定向&lt;/li&gt;
&lt;li&gt;服务器响应 URL 之后，主进程就要通知渲染进程，你要开始干活了&lt;/li&gt;
&lt;li&gt;渲染进程准备好了，要想渲染进程提交数据，这个时间叫做提交文档&lt;/li&gt;
&lt;li&gt;渲染进程接受到数据，完成页面渲染。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;具体过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 输入 url&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用户输入 url，处理输入信息&lt;/p&gt;
&lt;p&gt;如果为非 url 结构的字符串，交给浏览器默认引擎去搜索改字符串&lt;/p&gt;
&lt;p&gt;若为 url 结构的字符串，浏览器主进程会交给 网络进程，开始干活&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1 查找浏览器缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网络进程会先看看是否存在本地缓存，如果有就直接返回资源给浏览器进程，无则下一步 DNS-&amp;gt; IP -&amp;gt; TCP&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2DNS 解析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网络进程拿到 url 后，先会进行 DNS 域名解析得到 IP 地址。如果请求协议是 HTTPS，那么还需要建立 TLS 连接&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.3 建立 TCP 连接，三次握手&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;利用 IP 地址和服务器建立 TCP 连接。连接建立之后，向服务器发送请求&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 服务器响应&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;服务器收到请求信息后，会根据请求信息生成响应行、响应头、响应体，并发给网络进程。网络进程接受了响应信息之后，就开始解析响应头的内容&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网络进程解析响应行和响应头信息的过程：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1 重定向&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果响应行状态码为 301（永久重定向）和 302（临时），那么说明需要重定向到其他 url。这时候网络进程会从响应头中的 Location 字段里读取重定向的地址，并重新发起网络请求&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2 响应数据处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;导航会通过请求头的 Content-type 字段判断响应体数据的类型。浏览器通过这个来决定如何显示响应体的内容。比如：若为 application/octet-stream，则会按照下载类型来处理这个请求，导航结束。若为 text/html，这就告诉浏览器服务器返回的是 html 格式，浏览器会通知渲染进程，你要干活了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 准备渲染进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认情况，每个页面一个渲染进程。但若处于同一站点（同根域名 + 协议），那么渲染进程就会复用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 提交文档&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;渲染进程准备好后，浏览器进程发出 “提交文档的消息”，渲染进程接受了消息之后，会跟网络进程简历传输数据的管道&lt;/li&gt;
&lt;li&gt;等数据传输完成了，渲染进程会告诉浏览器进程，确认文档提交，这时候浏览器会更新页面，安全状态，url，前进后退的历史&lt;/li&gt;
&lt;li&gt;到这里导航结束，进入渲染阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当浏览器刚开始加载一个地址之后，标签页上的图标便进入了加载状态。但此时图中页面显示的依然是之前打开的页面内容，并没立即替换为百度首页的页面。因为需要等待提交文档阶段，页面内容才会被替换&lt;/p&gt;
&lt;h1 id=&#34;iframe有哪些优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iframe有哪些优缺点&#34;&gt;#&lt;/a&gt;  &lt;code&gt;iframe&lt;/code&gt;  有哪些优缺点？&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;iframe&lt;/code&gt;  是一种框架，也是一种很常见的网页嵌入方式&lt;/p&gt;
&lt;h2 id=&#34;iframe的优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iframe的优点&#34;&gt;#&lt;/a&gt;  &lt;code&gt;iframe&lt;/code&gt;  的优点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iframe&lt;/code&gt;  能够原封不动的把嵌入的网页展现出来&lt;/li&gt;
&lt;li&gt;如果有多个网页引用 &lt;code&gt;iframe&lt;/code&gt; ，那么你只需要修改 &lt;code&gt;iframe&lt;/code&gt;  的内容，就可以实现调用的每一个页面内容的更改，方便快捷&lt;/li&gt;
&lt;li&gt;网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用 &lt;code&gt;iframe&lt;/code&gt;  来嵌套，可以增加代码的可重用&lt;/li&gt;
&lt;li&gt;如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由 &lt;code&gt;iframe&lt;/code&gt;  来解决&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iframe的缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iframe的缺点&#34;&gt;#&lt;/a&gt;  &lt;code&gt;iframe&lt;/code&gt;  的缺点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;会产生很多页面，不容易管理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iframe&lt;/code&gt;  框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差&lt;/li&gt;
&lt;li&gt;代码复杂，无法被一些搜索引擎索引到，这一点很关键，现在的搜索引擎爬虫还不能很好的处理 &lt;code&gt;iframe&lt;/code&gt;  中的内容，所以使用 &lt;code&gt;iframe&lt;/code&gt;  会不利于搜索引擎优化&lt;/li&gt;
&lt;li&gt;很多的移动设备（PDA 手机）无法完全显示框架，设备兼容性差&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iframe&lt;/code&gt;  框架页面会增加服务器的 http 请求，对于大型网站是不可取的&lt;/li&gt;
&lt;li&gt;现在基本上都是用 Ajax 来代替 &lt;code&gt;iframe&lt;/code&gt; ，所以 &lt;code&gt;iframe&lt;/code&gt;  已经渐渐的退出了前端开发&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;label的作用是什么是怎么用的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#label的作用是什么是怎么用的&#34;&gt;#&lt;/a&gt; label 的作用是什么？是怎么用的？&lt;/h1&gt;
&lt;p&gt;例子 1: 点击 &amp;quot;用户名:&amp;quot; 就可以定位光标到输入框&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;form&amp;gt;
&amp;lt;label for=&amp;quot;myid&amp;quot;&amp;gt;用户名:&amp;lt;/label&amp;gt;
&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;myid&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例子 2: 点击 &amp;quot;用户名:&amp;quot; 或按键 alt+1, 都可以定位光标到输入框&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;form&amp;gt;
    &amp;lt;label for=&amp;quot;myid&amp;quot; accesskey=&amp;quot;1&amp;quot;&amp;gt;用户名:&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;myid&amp;quot; tabindex=&amp;quot;1&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;for&lt;/code&gt;  属性功能：表示 Label 标签要绑定的 HTML 元素，你点击这个标签的时候，所绑定的元素将获取焦点&lt;/p&gt;
&lt;p&gt;&lt;code&gt;acesskey&lt;/code&gt;  属性&lt;br&gt;
功能：表示访问 Label 标签所绑定的元素的热键，当您按下热键，所绑定的元素将获取焦点&lt;br&gt;
局限性： &lt;code&gt;accessKey&lt;/code&gt;  属性所设置的快捷键不能与浏览器的快捷键冲突，否则将优先激活浏览器的快捷键&lt;/p&gt;
&lt;h1 id=&#34;html5的form如何关闭自动完成功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html5的form如何关闭自动完成功能&#34;&gt;#&lt;/a&gt; HTML5 的 form 如何关闭自动完成功能？&lt;/h1&gt;
&lt;p&gt;HTML 的输入框可以拥有自动完成的功能，当你往输入框输入内容的时候，浏览器会从你以前的同名输入框的历史记录中查找出类似的内容并列在输入框下面，这样就不用全部输入进去了，直接选择列表中的项目就可以了&lt;br&gt;
但有时候我们希望关闭输入框的自动完成功能，例如当用户输入内容的时候，我们希望使用 AJAX 技术从数据库搜索并列举而不是在用户的历史记录中搜索&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关闭输入框的自动完成功能有 3 种方法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 IE 的 Internet 选项菜单里的内容 -- 自动完成里面设置&lt;/li&gt;
&lt;li&gt;设置 form 的 autocomplete 为 &amp;quot;on&amp;quot; 或者 &amp;quot;off&amp;quot; 来开启或者关闭自动完成功能&lt;/li&gt;
&lt;li&gt;设置输入框的 autocomplete 为 &amp;quot;on&amp;quot; 或者 &amp;quot;off&amp;quot; 来开启或者关闭该输入框的自动完成功能&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;将-html5-看作成开放的网络平台&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将-html5-看作成开放的网络平台&#34;&gt;#&lt;/a&gt; 将 HTML5 看作成开放的网络平台&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;什么是 HTML5 的基本构件（building block）&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;语义 - 提供更准确地描述内容&lt;/li&gt;
&lt;li&gt;连接 - 提供新的方式与服务器通信&lt;/li&gt;
&lt;li&gt;离线和存储 - 允许网页在本地存储数据并有效地离线运行&lt;/li&gt;
&lt;li&gt;多媒体 - 在 Open Web 中，视频和音频被视为一等公民（first-class citizens）&lt;/li&gt;
&lt;li&gt;2D/3D 图形和特效 - 提供更多种演示选项&lt;/li&gt;
&lt;li&gt;性能和集成 - 提供更快的访问速度和性能更好的计算机硬件&lt;/li&gt;
&lt;li&gt;设备访问 - 允许使用各种输入、输出设备&lt;/li&gt;
&lt;li&gt;外观 - 可以开发丰富的主题&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;浏览器是怎么对html5的离线储存资源进行管理和加载的呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器是怎么对html5的离线储存资源进行管理和加载的呢&#34;&gt;#&lt;/a&gt; 浏览器是怎么对 HTML5 的离线储存资源进行管理和加载的呢&lt;/h1&gt;
&lt;p&gt;在浏览器的 html 头部加上 manifest 属性，如果是第一次访问浏览器会根据 manifest 的内容进行下载存储离线内容，如果已经访问过则从离线存储中进行加载，然后在比对服务器如果有新内容在更新离线存储&lt;br&gt;
离线的情况下，浏览器就直接使用离线存储的资源&lt;/p&gt;
&lt;h1 id=&#34;浏览器的渲染过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器的渲染过程&#34;&gt;#&lt;/a&gt; 浏览器的渲染过程&lt;/h1&gt;
&lt;p&gt;1、将获取的 html 解析成 dom 树&lt;br&gt;
 2、处理 css，构成层叠样式表模型 CSSOM&lt;br&gt;
3、将 dom 树和 CSSOM 合并为渲染树&lt;br&gt;
 4、根据 CSSOM 将渲染树的节点布局计算&lt;br&gt;
 5、将渲染树节点样式绘制到页面上&lt;/p&gt;
&lt;p&gt;在渲染的过程中是自上而下渲染，js 会阻塞页面的渲染，优先等 js 执行完成，如果在渲染的过程中改变了样式，会造成回流需要重新渲染&lt;/p&gt;
&lt;h1 id=&#34;link和import的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#link和import的区别&#34;&gt;#&lt;/a&gt; link 和 @import 的区别&lt;/h1&gt;
&lt;p&gt;1、从属关系区别&lt;br&gt;
 link 属于 html 标签，而 @import 是 css 提供的&lt;br&gt;
 2、加载顺序区别&lt;br&gt;
页面被加载时，link 会同时被加载，而 @import 引用的 css 会等到页面被加载完再加载&lt;br&gt;
 3、兼容性区别&lt;br&gt;
 import 只在 IE5 以上才能识别，而 link 是 html 标签，无兼容问题&lt;br&gt;
 4、dom 可操作性区别&lt;br&gt;
可以通过 JS 操作 DOM ，插入 link 标签来改变样式；由于 DOM 方法是基于文档的，无法使用 @import 的方式插入样式&lt;br&gt;
 5、权重区别&lt;br&gt;
如果已经存在相同样式，@import 引入的这个样式将被该 CSS 文件本身的样式层叠掉，表现出 link 方式的样式权重高于 @import 的权重这样的直观效果&lt;br&gt;
（简而言之，link 和 @import，谁写在后面，谁的样式就被应用，后面的样式覆盖前面的样式。）&lt;/p&gt;
&lt;h1 id=&#34;src-和-href-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#src-和-href-的区别&#34;&gt;#&lt;/a&gt;  &lt;code&gt;src&lt;/code&gt;  和  &lt;code&gt;href&lt;/code&gt;  的区别&lt;/h1&gt;
&lt;p&gt;一句话概括:   &lt;code&gt;src&lt;/code&gt;  是引入资源的  &lt;code&gt;href&lt;/code&gt;  是跳转  &lt;code&gt;url&lt;/code&gt;  的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;  用于替换当前元素， &lt;code&gt;href&lt;/code&gt;  用于在当前文档和引用资源之间确立联系&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;  是 source 的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求 &lt;code&gt;src&lt;/code&gt;  资源时会将其指向的资源下载并应用到文档内，例如 &lt;code&gt;js&lt;/code&gt;  脚本， &lt;code&gt;img&lt;/code&gt;  图片和 &lt;code&gt;frame&lt;/code&gt;  等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将 &lt;code&gt;js&lt;/code&gt;  脚本放在底部而不是头部&lt;/li&gt;
&lt;li&gt;&lt;code&gt;href&lt;/code&gt;  是 Hypertext Reference 的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接。如果我们在文档中添加那么浏览器会识别该文档为 &lt;code&gt;css&lt;/code&gt;  文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用 link 方式来加载 &lt;code&gt;css&lt;/code&gt; ，而不是使用 @import 方式&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/css/css%E5%9F%BA%E7%A1%80/CSS/</guid>
            <title>CSS注释规范</title>
            <link>https://entropywhite.com/computer-science/web/css/css%E5%9F%BA%E7%A1%80/CSS/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="css" scheme="https://entropywhite.com/categories/computer-science/web/css/" />
            <category term="CSS" scheme="https://entropywhite.com/tags/CSS/" />
            <pubDate>Mon, 18 Jul 2022 17:15:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;css规则样式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css规则样式&#34;&gt;#&lt;/a&gt; CSS 规则样式&lt;/h1&gt;
&lt;p&gt;这是一段  &lt;code&gt;css&lt;/code&gt;  语句&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;20px&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其中，h1 是你所需对其 html 元素设置样式的元素，统称选择器，大括号内的内容会为其提供样式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;color:red&lt;/code&gt;  是一个键值对，属性：值，每个键值对以分号隔开&lt;/p&gt;
&lt;p&gt;为了让你的代码可读性更高，也方便观看，建议将每个键值对独占一行&lt;/p&gt;
&lt;h1 id=&#34;css三大特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css三大特性&#34;&gt;#&lt;/a&gt; CSS 三大特性&lt;/h1&gt;
&lt;h2 id=&#34;css层叠性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css层叠性&#34;&gt;#&lt;/a&gt; CSS 层叠性&lt;/h2&gt;
&lt;p&gt;所谓层叠就是多次 CSS 样式叠加&lt;/p&gt;
&lt;p&gt;浏览器处理冲突时的一个能力，如果一个属性通过两个相同选择器设置到同一个元素上，那么属性会被层叠掉，如先给某个标签指定了内部文字颜色为红色，接着又指定为颜色，此时打开 F12，检查，会发现有一个属性被划掉了，这就是样式冲突&lt;/p&gt;
&lt;p&gt;出现冲突情况下，CSS 会以最后样式为准&lt;/p&gt;
&lt;h2 id=&#34;css继承性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css继承性&#34;&gt;#&lt;/a&gt; CSS 继承性&lt;/h2&gt;
&lt;p&gt;所谓继承就是 CSS 的子标签会继承父标签的某些样式，如文本类&lt;/p&gt;
&lt;p&gt;在制作网页时，打开 F12，在元素 - 样式里，会发现有属性来自 &lt;code&gt;继承xxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;恰当的使用继承可以简化代码，降低 CSS 样式的复杂性&lt;/p&gt;
&lt;h2 id=&#34;css优先级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css优先级&#34;&gt;#&lt;/a&gt; CSS 优先级&lt;/h2&gt;
&lt;p&gt;定义 CSS 样式时，会发现有两个或更多规则应用同一元素上，这时就会出现属性优先级问题&lt;/p&gt;
&lt;p&gt;不过，需要注意的是&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;继承样式的权重为0。在嵌套解构中，不管父元素样式权重多大，子元素继承时，都会为0，子元素定义的样式会覆盖继承的样式。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;行内样式优先高，应用style属性时，其权重非常高，比选择器还大的优先级&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;权重相同时，css遵循就近原则。越靠近元素的样式优先级越高，换种说法，排最后的样式优先级最大&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;css定义了一个!important命令，该命令被赋予最大优先级&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;css特殊性specificity&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css特殊性specificity&#34;&gt;#&lt;/a&gt; CSS 特殊性 (Specificity)&lt;/h2&gt;
&lt;p&gt;关于 CSS 权重，需要有一套公式去计算，就是 CSS Specificity，又称 CSS 特性或非凡性，它是一个衡量 CSS 值优先级的一个标准&lt;/p&gt;
&lt;p&gt;Specificity 用一个四位的数字串 (CSS2 是三位) 表示，值从左到右，左最大，一位比一位大，数位之间没有进制，级别之间不可逾越&lt;/p&gt;
&lt;p&gt;权重是可以叠加的&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;继承或 * 的贡献&lt;/th&gt;
&lt;th&gt;0,0,0,0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;每个元素（标签）贡献值&lt;/td&gt;
&lt;td&gt;0,0,0,1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;每个类，伪类贡献值&lt;/td&gt;
&lt;td&gt;0,0,1,0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;每个 ID 贡献值&lt;/td&gt;
&lt;td&gt;0,1,0,0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;每个行内样式贡献值&lt;/td&gt;
&lt;td&gt;1,0,0,0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;值每个！important 贡献&lt;/td&gt;
&lt;td&gt;无穷大&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;举点栗子&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;div ul li	0,0,0,3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.nav ul li	0,0,1,2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a:hover		0,0,1,1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.nav a		0,0,1,1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;需要注意的是&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#需要注意的是&#34;&gt;#&lt;/a&gt; 需要注意的是&lt;/h2&gt;
&lt;p&gt;数位之间没有进制，指的是 0.0.0.5 + 0.0.0.5 = 0.0.0.10 而不是 0.0.1.0&lt;/p&gt;
&lt;p&gt;权重是优先级的算法，层叠是优先级的表现&lt;/p&gt;
&lt;h2 id=&#34;总结优先级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结优先级&#34;&gt;#&lt;/a&gt; 总结优先级&lt;/h2&gt;
&lt;p&gt;1. 使用！important 声明的规则&lt;/p&gt;
&lt;p&gt;2. 内嵌在 html 的 style 样式&lt;/p&gt;
&lt;p&gt;3. 使用 ID 选择器&lt;/p&gt;
&lt;p&gt;4. 使用类、属性、伪元素和伪类选择器&lt;/p&gt;
&lt;p&gt;5. 使用元素选择器&lt;/p&gt;
&lt;p&gt;6. 只包含一个通用选择器&lt;/p&gt;
&lt;p&gt;7. 同一类选择器遵循就近原则&lt;/p&gt;
&lt;h1 id=&#34;css样式表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css样式表&#34;&gt;#&lt;/a&gt; CSS 样式表&lt;/h1&gt;
&lt;p&gt;有三种样式表&lt;/p&gt;
&lt;h2 id=&#34;行内样式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行内样式&#34;&gt;#&lt;/a&gt; 行内样式&lt;/h2&gt;
&lt;p&gt;又称内联样式，通过在 &lt;code&gt;html&lt;/code&gt;  标签内部直接写入&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;标签名&lt;/span&gt; &lt;span class=&#34;token special-attr&#34;&gt;&lt;span class=&#34;token attr-name&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token value css language-css&#34;&gt;键值对&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;标签名&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;内部样式表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内部样式表&#34;&gt;#&lt;/a&gt; 内部样式表&lt;/h2&gt;
&lt;p&gt;写在头部 &lt;code&gt;title&lt;/code&gt;  标签下方，用 &lt;code&gt;style&lt;/code&gt;  标签包裹样式，在 html5 中不需要写 &lt;code&gt;type=&amp;quot;text/css&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	css样式&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;外部样式表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#外部样式表&#34;&gt;#&lt;/a&gt; 外部样式表&lt;/h2&gt;
&lt;p&gt;又称链接样式表，在 &lt;code&gt;html&lt;/code&gt;  头部标签 &lt;code&gt;head&lt;/code&gt;  里写入&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;htad&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;css文件路径&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text/css&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;stylesheet&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;htad&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;link&lt;/code&gt;  是单标签， &lt;code&gt;href&lt;/code&gt;  定义 &lt;code&gt;css&lt;/code&gt;  文件存放地址， &lt;code&gt;type&lt;/code&gt;  定义文件类型， &lt;code&gt;rel&lt;/code&gt;  定义文档之间的关系，上述中表示一个样式表文件&lt;/p&gt;
&lt;h2 id=&#34;三种表总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三种表总结&#34;&gt;#&lt;/a&gt; 三种表总结&lt;/h2&gt;
&lt;p&gt;行内样式表书写方便，权重高，但没有实现样式和解构分离，只控制一个标签，使用也较少&lt;/p&gt;
&lt;p&gt;内部样式表实现了部分样式和解构分离，但还是没完全分离，控制一整个页面，使用率一般&lt;/p&gt;
&lt;p&gt;外部样式表则完全实现了样式和解构分离，控制多个网页的样式，使用最多&lt;/p&gt;
&lt;h1 id=&#34;css选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css选择器&#34;&gt;#&lt;/a&gt; CSS 选择器&lt;/h1&gt;
&lt;h2 id=&#34;标签选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标签选择器&#34;&gt;#&lt;/a&gt; 标签选择器&lt;/h2&gt;
&lt;p&gt;这是一段标签选择器&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; #fff&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;text-align&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; center&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;p&gt;所有P标签都适用css&amp;lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;标签选择器会将所有该标签相同名字的 html 标签应用其样式，优点是可以为该所有标签应用样式，缺点就是没法单独设置样式&lt;/p&gt;
&lt;p&gt;标签选择器通常用来重置某些标签的样式，标签选择器的效率也不是很高，但要好过通配选择器&lt;/p&gt;
&lt;h2 id=&#34;id选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#id选择器&#34;&gt;#&lt;/a&gt; id 选择器&lt;/h2&gt;
&lt;p&gt;这是一段 id 选择器 css 语句&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;#ming&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; #fff&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;text-align&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; center&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;p id=&lt;span class=&#34;token string&#34;&gt;&#34;ming&#34;&lt;/span&gt;&gt;此内容应用&amp;lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;p&gt;此内容不应用&amp;lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;id 选择器以 # 开头，在 html 标签中以 id 属性设置样式，给某个指定的标签添加指定的样式&lt;/p&gt;
&lt;p&gt;id 选择器只能对一个元素生效，同一个页面里不允许出现两个 id 相同的元素&lt;/p&gt;
&lt;p&gt;理论上 id 选择器是效率最高的选择器。但是由于它只能选一个元素，特异性太高，实际开发中也很少在 CSS 里使用 id 选择器，也正是因为 id 选择器特异性高，所以在 js 里使用 id 选择器的比较常见&lt;/p&gt;
&lt;h2 id=&#34;类选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类选择器&#34;&gt;#&lt;/a&gt; 类选择器&lt;/h2&gt;
&lt;p&gt;这是一段类选择器 css 语句&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.ming&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; #fff&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;text-align&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; center&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;p class=&lt;span class=&#34;token string&#34;&gt;&#34;ming&#34;&lt;/span&gt;&gt;此内容应用&amp;lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;p&gt;此内容不应用&amp;lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;类选择器统称 class 选择器，以。开头，给不同的标签添加相同的样式，在 html 标签中以 class 属性设置样式，在 css 中可以设置同名的 class 选择器（尽管一般不会这样）&lt;/p&gt;
&lt;p&gt;类选择器应该是样式开发中应用最多的选择器&lt;/p&gt;
&lt;h2 id=&#34;多类名选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多类名选择器&#34;&gt;#&lt;/a&gt; 多类名选择器&lt;/h2&gt;
&lt;p&gt;这是一段多类名选择器  &lt;code&gt;css&lt;/code&gt;  语句&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.ming&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; #fff&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;text-align&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; center&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.ren&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 18px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;p class=&lt;span class=&#34;token string&#34;&gt;&#34;ming&#34;&lt;/span&gt;&gt;此内容只应用.ming的css语句&amp;lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;p class=&lt;span class=&#34;token string&#34;&gt;&#34;ming ren&#34;&lt;/span&gt;&gt;此内容全部应用了&amp;lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;多类名选择器和类选择器差不多，只是在基础上多添加不同类选择器  &lt;code&gt;css&lt;/code&gt;  属性，多类名在复杂的布局中还是挺实用的&lt;/p&gt;
&lt;h2 id=&#34;通配符选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通配符选择器&#34;&gt;#&lt;/a&gt; 通配符选择器&lt;/h2&gt;
&lt;p&gt;这是一段通配符选择器  &lt;code&gt;css&lt;/code&gt;  语句&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 清除边框 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通配符选择器也叫全部选择器，将所有标签都应用其样式&lt;/p&gt;
&lt;p&gt;在实际开发中一般不建议使用通配选择器&lt;/p&gt;
&lt;h2 id=&#34;属性选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属性选择器&#34;&gt;#&lt;/a&gt; 属性选择器&lt;/h2&gt;
&lt;p&gt;属性选择器比较好理解，就是通过 DOM 的属性来选择该 DOM 节点。属性选择器是用中括号 “[]” 包裹&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;a[href]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这条选择器就可以让所有带 href 属性的 a 标签字体都变成红色&lt;/p&gt;
&lt;p&gt;属性选择器有以下几种形式&lt;/p&gt;
&lt;p&gt;[href]，用来选择带有括号内属性的元素，如上述的 a [href]&lt;/p&gt;
&lt;p&gt;[href=xxx]，用来选择有 href 属性且属性值等于 xxx 的元素，如选择所有文本类型的输入框&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;&amp;lt;input type=&#34;text&#34; value=&#34;&#34;/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// CSS：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;input[type=text]&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;[href~=xxx]，用来选择 href 属性中包含 xxx 的元素&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;&amp;lt;input class=&#34;input text&#34; type=&#34;text&#34; value=&#34;&#34;/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// CSS：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;input[class~=input]&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;[href|=xxx]，用来选择属性值为 xxx 或 xxx- 开头的元素&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;&amp;lt;div class=&#34;article&#34;&gt;我会生效&amp;lt;/div&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;div class=&#34;article-title&#34;&gt;我会生效&amp;lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;div class=&#34;article-content&#34;&gt;我会生效&amp;lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;div class=&#34;article_footer&#34;&gt;我不会生效&amp;lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// CSS：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;div[class|=article]&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;[href^=xxx]，用来选择以 xxx 开头的元素，用正则去找复合的属性值&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;&amp;lt;div class=&#34;article&#34;&gt;我会生效&amp;lt;/div&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;div class=&#34;article-title&#34;&gt;我会生效&amp;lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;div class=&#34;article-content&#34;&gt;我会生效&amp;lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;div class=&#34;article_footer&#34;&gt;我会生效&amp;lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// CSS：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;div[class^=article]&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;[href$=xxx]，用来选择属性值以 xxx 结尾的元素，用正则去找复合的属性值&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;&amp;lt;button class=&#34;btn btn-disabled&#34;&gt;我会生效&amp;lt;/button&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;select class=&#34;select select-disabled city-select&#34;&gt;我不会生效&amp;lt;/select&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;input class=&#34;input input-disabled&#34; value=&#34;我会生效&#34;/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// CSS：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;[class$=disabled]&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; none&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;[href*=xxx]，用来选择属性中包含 xxx 字符的所有元素，用正则去找复合的属性值&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;&amp;lt;button class=&#34;btn btn-disabled&#34;&gt;我会生效&amp;lt;/button&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;select class=&#34;select select-disabled city-select&#34;&gt;我会生效&amp;lt;/select&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;input class=&#34;input input-disabled&#34; value=&#34;我会生效&#34;/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// CSS：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;[class$=disabled]&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; none&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;属性选择器要做文本的匹配，所以效率也不会高&lt;br&gt;
在使用属性选择器时，尽量要给它设置上生效的范围，如果只用了个 [href] 相当于要在所有元素里找带 href 的元素，效率会很低。如果用 a [href] 会好的多，如果用 .link [href] 就更好了&lt;br&gt;
属性选择器很灵活，如果能使用 CSS 代替 JS 解决一些需求，可以不用太纠结性能的问题，用 JS 实现也一样要耗费资源的&lt;/p&gt;
&lt;h2 id=&#34;组合选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组合选择器&#34;&gt;#&lt;/a&gt; 组合选择器&lt;/h2&gt;
&lt;p&gt;组合选择器是将多个基本选择器通过一定规则连接起来的一个复杂选择器&lt;/p&gt;
&lt;h3 id=&#34;后代选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后代选择器&#34;&gt;#&lt;/a&gt; 后代选择器&lt;/h3&gt;
&lt;p&gt;后代选择器表示选择器 1 容器下面的所有满足选择器 2 要求的页面元素，选择器 1 和选择器 2 之间需要空格，例子中就是 paragraph 里的所有 div 标签&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;utf-8&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;viewport&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;width=device-width, initial-scale=1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text/css&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token selector&#34;&gt;.paragraph div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;CSS选择器&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;container&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    我是container容器下的文本。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;paragraph&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        我是container容器下，第一个paragraph容器中的文本。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;paragraph&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        我是container容器下，第二个paragraph容器中的文本。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            我是container容器下，第二个paragraph容器下div中的文本。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;test&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                我是container容器下，第二个paragraph容器下div容器下test容器下的文本。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            我是contianer容器下，p容器中的文本。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                我是container容器下，p容器下div容器中的文本。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;后代选择器通常用来限制选择器生效的范围，防止因为选择器使用不当或者对元素命名出现重复造成的样式冲突&lt;/p&gt;
&lt;h3 id=&#34;子代选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子代选择器&#34;&gt;#&lt;/a&gt; 子代选择器&lt;/h3&gt;
&lt;p&gt;子代选择器表示选择选择器 1 下直接包含的选择器 2，而不包含间接包含的选择器 2，选择器 1 和选择器 2 之间通过＞号连接&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;utf-8&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;viewport&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;width=device-width, initial-scale=1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text/css&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token selector&#34;&gt;.container &gt; strong&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;CSS选择器&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;container&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    我是container容器下的文本。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;strong&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;container容器下的加强&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;strong&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;strong&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;div容器下的加强&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;strong&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;子元素选择器的作用和后代选择器相似，也是用来限制选择器生效的范围&lt;/p&gt;
&lt;p&gt;它和后代选择器不同的是：&lt;br&gt;
1. 子元素选择器只匹配子元素，不会匹配后代元素。在有确定的父子关系时，尽量使用子元素选择器，效率会比后代选择器高。&lt;br&gt;
2. 使用子元素选择器还可以避免对非直接后代的样式影响，在只想给子元素设置样式时会比后代选择器安全。&lt;/p&gt;
&lt;h3 id=&#34;兄弟选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#兄弟选择器&#34;&gt;#&lt;/a&gt; 兄弟选择器&lt;/h3&gt;
&lt;p&gt;兄弟选择器表示选中与选择器 1 同级的且在选择器 1 后面的所有的选择器 2（不包括自身），选择器 1 和选择器 2 之间通过～符号连接&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;utf-8&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;viewport&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;width=device-width, initial-scale=1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text/css&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token selector&#34;&gt;.selected ~ li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;CSS选择器&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;container&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;第一项&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;selected&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;第二项&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;第三项&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;第四项&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;第五项&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;兄弟选择器（包括相邻兄弟选择器）中都是只能向后选择，如果需要向前选择，就只能给前面的元素指定上 class，再用类选择器来实现了&lt;/p&gt;
&lt;h3 id=&#34;相邻兄弟选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相邻兄弟选择器&#34;&gt;#&lt;/a&gt; 相邻兄弟选择器&lt;/h3&gt;
&lt;p&gt;相邻兄弟选择器表示与选择器 1 同级的下一个相邻的选择器 2（同样不包括自身），选择器 1 和选择器 2 之间通过 + 号连接&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;utf-8&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;viewport&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;width=device-width, initial-scale=1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text/css&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token selector&#34;&gt;.selected + li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;CSS选择器&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;container&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;第一项&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;selected&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;第二项&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;第三项&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;第四项&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;第五项&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;相邻兄弟选择器通常有两类用处：&lt;br&gt;
1. 用于自动调整占位，比如后面在布局的时候，有 header 和没 header 情况下内容区的高度会不同，就可以使用相邻兄弟选择器来控制内容区的高度&lt;br&gt;
 2. 相邻兄弟选择器的第二种用法是用来控制相同元素中间的间隔，比如在 List 组件开发时，每个 li 元素之间要加上分割线的需求就会通过相邻兄弟选择器来实现&lt;/p&gt;
&lt;h3 id=&#34;复合选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复合选择器&#34;&gt;#&lt;/a&gt; 复合选择器&lt;/h3&gt;
&lt;p&gt;复合选择器表示选择同时满足选择器 1 和选择器 2 的元素，选择器 1 和选择器 2 之间没有任何符号连接，这种选择器一般用在类选择器与基础选择器的复合中&lt;/p&gt;
&lt;p&gt;这个选择器用的比较少&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;utf-8&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;viewport&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;width=device-width, initial-scale=1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text/css&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token selector&#34;&gt;.selected&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token selector&#34;&gt;.bigger&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; large&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token selector&#34;&gt;.selected.bigger&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; green&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; larger&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;CSS选择器&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;container&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;第一项&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;selected&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;第二项&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;bigger&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;第三项&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;bigger selected&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;第四项&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;第五项&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;只有同时满足两个选择器要求的元素才会被选中&lt;/p&gt;
&lt;h3 id=&#34;并集选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并集选择器&#34;&gt;#&lt;/a&gt; 并集选择器&lt;/h3&gt;
&lt;p&gt;并集选择器是为了合并类似的样式，可以把选择器不同但样式相同的 CSS 语法块做合并。并集选择器用逗号分割多个选择器，表示该样式对选择器 A 和选择器 B 所选择的元素都生效&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 写得多 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;h2&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;h3&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 不仅写得少还方便观看 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;h1,h2,h3&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;伪类选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#伪类选择器&#34;&gt;#&lt;/a&gt; 伪类选择器&lt;/h2&gt;
&lt;p&gt;这是个特殊的选择器，用于标记一些特殊状态和具有筛选功能&lt;/p&gt;
&lt;h3 id=&#34;标记状态的伪类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标记状态的伪类&#34;&gt;#&lt;/a&gt; 标记状态的伪类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;:link&lt;/strong&gt;，选取未访问过的超链接元素。如果我们注意过搜索引擎的结果的话，它里面的链接只要点过的就会变色，从而标记哪个链接是访问过的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:visited&lt;/strong&gt;，选取访问过的超链接元素。和第一条相反，:visited 是用来标记哪个链接是已经访问过的，防止重复点击&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:hover&lt;/strong&gt;，选取鼠标悬停的元素。这个伪类经常用在 PC 端，当鼠标放在一个元素上时，可以用 :hover 来控制鼠标悬停的样式。这个伪类必须放在前两位后面。因为在移动端里没有鼠标的概念，所以移动端里很少用这个伪类&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:active&lt;/strong&gt;，选取点中的元素。这个伪类的作用在刚才提到过了，当我们希望按钮有操作反馈的时候，可以用它来标记操作反馈的样式。这个伪类必须放在 :hover 伪类后面。当然这个伪类也是可以通用的，并不是只能用在按钮上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:focus&lt;/strong&gt;，选取获得焦点的元素。这个伪类用来标识获得焦点的元素，如搜索框在聚焦的时候有个比较明显的边框，方便用户知道当前在可输入的状态&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:target&lt;/strong&gt;，选取可用于活动的 target 元素的样式，如页内跳转（锚点链接）时，可以将被跳转的内容改变&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;筛选功能的伪类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#筛选功能的伪类&#34;&gt;#&lt;/a&gt; 筛选功能的伪类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;:empty&lt;/strong&gt;，选取没有子元素的元素。比如选择空的 span，就可以用 span:empty 选择器来选择。这里要注意元素内有空格的话也不能算空，不会被这个伪类选中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:checked&lt;/strong&gt;，选取勾选状态的 input 元素， 只对 radio 和 checkbox 生效&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:disabled&lt;/strong&gt;，选取禁用的表单元素&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:first-child&lt;/strong&gt;，选取当前选择器下第一个元素&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:last-child&lt;/strong&gt;，和 first-child 相反，选取当前选择器下最后一个元素&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:nth-child(odd/even)&lt;/strong&gt;，选择奇数 / 偶数的元素&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:nth-child(n/an+b)&lt;/strong&gt;，选取指定位置的元素。这个伪类是有参数的，参数可以支持 an+b 的形式，这里 a 和 b 都是可变的，a 是 n 的倍数，b 是在 a 的倍数基础上加几，n 从 0 起。使用这个伪类可以做到选择第几个，或者选择序号符合 an+b 的所有元素。比如使用 li:nth-child (2n+1)，就可以选中 li 元素中序号是 2 的整数倍加 1 的所有元素，也就是第 1、3、5、7、9、2n+1 个 li 元素，支持奇数 / 偶数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:nth-last-child(n/an+b)&lt;/strong&gt;，这个伪类和 nth-child 相似，只不过在计数的时候，这个伪类是从后往前计数。支持奇数 / 偶数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:only-child&lt;/strong&gt;，选取唯一子元素。如果一个元素的父元素只有它一个子元素，这个伪类就会生效。如果一个元素还有兄弟元素，这个伪类就不会对它生效&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:only-of-type&lt;/strong&gt;，选取唯一的某个类型的元素。如果一个元素的父元素里只有它一个当前类型的元素，这个伪类就会生效。这个伪类允许父元素里有其他元素，只要不和自己一样就可以&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;伪元素选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#伪元素选择器&#34;&gt;#&lt;/a&gt; 伪元素选择器&lt;/h2&gt;
&lt;p&gt;这也是个特殊的选择器，伪元素选择器是用于向某些元素设置特殊效果。伪元素选择器选中的并不是真实的 DOM 元素&lt;/p&gt;
&lt;p&gt;之所以称为伪元素，是因为他们不是真正的页面元素，html 没有对应的元素，但其用法和表现行为与真正的页面元素一样，可以对其使用诸如页面元素一样的  &lt;code&gt;css&lt;/code&gt;  样式，表面看上去貌似是页面的某些元素来展示，实际上是  &lt;code&gt;css&lt;/code&gt;  样式展现的行为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;::first-line&lt;/strong&gt;，为某个元素的第一行文字使用样式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;::first-letter&lt;/strong&gt;，为某个元素中的文字的首字母或第一个字使用样式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;::before&lt;/strong&gt;，在某个元素之前插入一些内容&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;::after&lt;/strong&gt;，在某个元素之后插入一些内容&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;::selection&lt;/strong&gt;，对光标选中的元素添加样式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;伪元素选择器构造的元素是虚拟的，所以不能用 JS 去操作它&lt;br&gt;
如果同时使用了 before 和 first-letter 两个伪类，第一个字是要从 before 里的内容开始算起的，如果 before 里面的内容是一个非文本元素，那 first-letter 也会作用在这个非文本元素上，但是不一定能生效&lt;br&gt;
 first-line 和 first-letter 不适用于内联元素，在内联元素中这两个选择器都会失效&lt;br&gt;
在 CSS3 中，规定了伪类用一个冒号（:）表示，伪元素用两个冒号表示（::）。但除了 selection，其余四个伪元素选择器已经在 CSS2 中存在且和伪类用的是一样的单冒号表示的。为了向下兼容，现在的浏览器中伪元素选择器用单冒号和双冒号都可以。在没有兼容问题的情况下，还是建议大家按着新的 CSS3 标准来开发&lt;/p&gt;
&lt;h2 id=&#34;选择器的一些提示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选择器的一些提示&#34;&gt;#&lt;/a&gt; 选择器的一些提示&lt;/h2&gt;
&lt;p&gt;多类名选择器的类名之间用空格隔开&lt;/p&gt;
&lt;p&gt;长名称或词组可以用中横线来命名&lt;/p&gt;
&lt;p&gt;不建议使用下划线 _ 来命名&lt;/p&gt;
&lt;p&gt;尽量使用英文来命名&lt;/p&gt;
&lt;h1 id=&#34;css尺寸&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css尺寸&#34;&gt;#&lt;/a&gt; CSS 尺寸&lt;/h1&gt;
&lt;p&gt;宽与高的设置&lt;/p&gt;
&lt;p&gt;设置 &lt;code&gt;px&lt;/code&gt;  等尺寸为固定长度&lt;/p&gt;
&lt;p&gt;当设置为百分比时候，会变成宽高自适应&lt;/p&gt;
&lt;p&gt;设置最大和最小值可以定义元素缩放最大最小值&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 所有 max 和 min 属性不包括填充、边框和页边距 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0px/50%&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;max-height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0px&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;min-height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0px&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0px&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;max-width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0px&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;min-width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0px&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;css字体样式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css字体样式&#34;&gt;#&lt;/a&gt; CSS 字体样式&lt;/h1&gt;
&lt;h2 id=&#34;font-size&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#font-size&#34;&gt;#&lt;/a&gt; font-size&lt;/h2&gt;
&lt;p&gt;用于设置字体大小，具有四种属性值&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;absolute-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;绝对大小&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;medium&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	//默认&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;large&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	//大号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;x-large&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	//更大号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;xx-large&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	//特大号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;small&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	//小号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;x-small&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	//更小号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;xx-small&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	//特小号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;relative-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;相对大小&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;largeer&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;smaller&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;相对长度&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;12px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;1em&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;1rem&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;绝对长度&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;1in&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	//英寸&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;1cm&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;1mm&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;1pt&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	//点&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;percentage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;百分比&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;50%&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;绝对大小中的 x 可以理解为衣服尺码 X XL XXL，多一个 x 尺寸大一圈，而且我发现了个有趣的地方，在浏览器中的 F12 里设置绝对大小时，会出现 ``xxx-large`，但编辑器里并没有显示这个值，当然，输入这个值是奏效的，或许是用不上那么大的字号把&lt;/p&gt;
&lt;p&gt;长度值有很多种单位，最常用的莫过于 &lt;code&gt;px&lt;/code&gt;  和 &lt;code&gt;em&lt;/code&gt; ，这两个都是相对长度单位，像素 &lt;code&gt;px&lt;/code&gt;  是基于显示器屏幕分辨率而言的， &lt;code&gt;em&lt;/code&gt;  则相对于当前对象内文本的字体尺寸。rem 是 CSS3 中新增的相对长度单位，rem 设定字体大小时仍任是相对大小，但相对的是 HTML 根元素，这单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应，同时这单位适用于适配分辨率相差较大的设备&lt;/p&gt;
&lt;p&gt;任意浏览器的默认字体高都是 16px。所有未经调整的浏览器都符合: 1em=16px。那么 12px=0.75em，10px=0.625em。为了简化 font-size 的换算，需要在 &lt;code&gt;css&lt;/code&gt;  中的 body 选择器中声明 Font-size=62.5%，这就使 &lt;code&gt;em&lt;/code&gt;  值变为 16px*62.5%=10px，这样 12px=1.2em，10px=1em，也就是说只需要将你的原来的 &lt;code&gt;px&lt;/code&gt;  数值除以 10，然后换上 &lt;code&gt;em&lt;/code&gt;  作为单位就行了&lt;/p&gt;
&lt;h2 id=&#34;font-family&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#font-family&#34;&gt;#&lt;/a&gt; font-family&lt;/h2&gt;
&lt;p&gt;用于设置字体，常用的字体有宋体、微软雅黑、黑体等，字体可参考 word 文档里的字体&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;微软雅黑&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 CSS 中设置字体名称时，直接写中文是没问题的，但在文件编码不匹配时会产生乱码，同时也可能不会生效，这时候需要使用英文来代替或者使用 Unicode 编码（太麻烦）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字体一览表&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;宋体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SimSun&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;黑体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SimHei&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;微软雅黑&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Microsoft Yahei&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;微软正黑体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Microsoft JhengHei&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;楷体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;KaiTi&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;新宋体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NSimSun&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;仿宋&lt;/td&gt;
&lt;td&gt;&lt;code&gt;FangSong&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;华文黑体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;STHeiti&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;华文细黑&lt;/td&gt;
&lt;td&gt;&lt;code&gt;STXihei&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;华文楷体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;STKaiti&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;华文宋体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;STSong&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;华文仿宋&lt;/td&gt;
&lt;td&gt;&lt;code&gt;STFangsong&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;华文中宋&lt;/td&gt;
&lt;td&gt;&lt;code&gt;STZhongsong&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;华文彩云&lt;/td&gt;
&lt;td&gt;&lt;code&gt;STCaiyun&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;华文琥珀&lt;/td&gt;
&lt;td&gt;&lt;code&gt;STHupo&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;华文新魏&lt;/td&gt;
&lt;td&gt;&lt;code&gt;STXinwei&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;华文隶书&lt;/td&gt;
&lt;td&gt;&lt;code&gt;STLiti&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;华文行楷&lt;/td&gt;
&lt;td&gt;&lt;code&gt;STXingkai&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;方正舒体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;FZShuTi&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;方正姚体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;FZYaoti&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;font-weight&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#font-weight&#34;&gt;#&lt;/a&gt; font-weight&lt;/h2&gt;
&lt;p&gt;用于设置字体粗细&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-weight&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; bold/bolder/lighter/100（整数倍）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;font-style&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#font-style&#34;&gt;#&lt;/a&gt; font-style&lt;/h2&gt;
&lt;p&gt;用于设置字体样式&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font-style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; italic/oblique&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;两个都是设置字体倾斜&lt;/p&gt;
&lt;h2 id=&#34;font&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#font&#34;&gt;#&lt;/a&gt; font&lt;/h2&gt;
&lt;p&gt;这个是一次性设置上述四个属性的&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;font&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; font-style font-weight font-size/line-height font-family&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;顺序固定死，如果更改顺序会导致属性不适用，前两个可以不要，但后两个一定需要&lt;/p&gt;
&lt;h1 id=&#34;css文本属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css文本属性&#34;&gt;#&lt;/a&gt; CSS 文本属性&lt;/h1&gt;
&lt;h2 id=&#34;color文本颜色&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#color文本颜色&#34;&gt;#&lt;/a&gt; color: 文本颜色&lt;/h2&gt;
&lt;p&gt;用于设置文本的颜色，取值方式有三种&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;1.预定义的颜色&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;2.十六进制&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; #ff6600&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;3.RGB代码 两种形式&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rgb&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;255&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rgb&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;100%&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0%&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0%&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rgba&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;255&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0.5&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* a 其实就是透明度 alpha，0 到 1 透明到不透明 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;十六进制颜色具体可查&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzLWNvbG9yc2Z1bGwuaHRtbA==&#34;&gt; CSS 颜色十六进制值 | 菜鸟教程 (runoob.com)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;rgb 颜色具体可查&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3pob25nZ3Vvc2UuY29tLyN5dWhvbmc=&#34;&gt;玉红 - 中国色 - 中国传统颜色 (zhongguose.com)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;direction文本方向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#direction文本方向&#34;&gt;#&lt;/a&gt; direction: 文本方向&lt;/h2&gt;
&lt;p&gt;用于设置文本的方向&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;direction&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; ltr/rtl &lt;span class=&#34;token comment&#34;&gt;/* 其实就是左到右 / 右到左的缩写 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;你会发现，文字跑右边了，可我想要文字倒着写呢？还真有&lt;/p&gt;
&lt;p&gt;搭配此属性使用的属性： &lt;code&gt;unicode-bidl&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 简单的右对齐 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;div style=&lt;span class=&#34;token string&#34;&gt;&#34;direction:rtl;text-align: initial;&#34;&lt;/span&gt;&gt;this is a test&amp;lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 倒着写 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;div style=&lt;span class=&#34;token string&#34;&gt;&#34;direction:rtl;unicode-bidi:bidi-override;text-align: initial;&#34;&lt;/span&gt;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	this is a test&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 被加了 embed 的正常写 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;div style=&lt;span class=&#34;token string&#34;&gt;&#34;direction:rtl;unicode-bidi:bidi-override;text-align: initial;&#34;&lt;/span&gt;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	this &amp;lt;span style=&lt;span class=&#34;token string&#34;&gt;&#34;unicode-bidi:embed;&#34;&lt;/span&gt;&gt;is a&amp;lt;/span&gt; test&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;浏览器通常根据 &lt;code&gt;lang&lt;/code&gt;  属性或者特殊的 &lt;code&gt;font-family&lt;/code&gt;  决定书写方向，但是如果一句话中同时包括两种方向的文案的时候就需要用到  &lt;code&gt;unicode-bidi&lt;/code&gt;  属性了&lt;/p&gt;
&lt;p&gt;你会发现，单纯的设置 direction 属性的英文只有文字左还是右，不会倒着写，只有设置了 &lt;code&gt;unicode-bidl&lt;/code&gt;  才能倒着写。其实这和语言有关，对于阿拉伯语和希伯来语自动就好使了，单个数字、字母浏览器不能判断语言就用 &lt;code&gt;rtl&lt;/code&gt;  默认设置了，英语等还是使用默认的左到右的方式，只能用 &lt;code&gt;unicode-bidi&lt;/code&gt;  重写，也就是说你把 &lt;code&gt;lang&lt;/code&gt;  声明为阿拉伯语（ &lt;code&gt;ar&lt;/code&gt; ）的话，就不需要 &lt;code&gt;unicode-bidl&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;overflow文本溢出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#overflow文本溢出&#34;&gt;#&lt;/a&gt; overflow: 文本溢出&lt;/h2&gt;
&lt;p&gt;用于设置文本溢出处理&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;overflow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; visible/hiddle/scroll/auto &lt;span class=&#34;token comment&#34;&gt;/* 默认溢出 / 溢出内容不可见 / 溢出内容以滚动条显示 / 如果有溢出则以滚动条显示 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;letter-spacing字符间距&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#letter-spacing字符间距&#34;&gt;#&lt;/a&gt; letter-spacing: 字符间距&lt;/h2&gt;
&lt;p&gt;用于设置字符间距，就是字与字之间的距离（同 word 的字符缩进）&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;letter-spacing&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 2px &lt;span class=&#34;token comment&#34;&gt;/* 可设负数 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;word-spacing字段间距&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#word-spacing字段间距&#34;&gt;#&lt;/a&gt; word-spacing: 字段间距&lt;/h2&gt;
&lt;p&gt;用于设置每段字之间的距离（空格隔开算一段字）&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;word-spacing&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 2px &lt;span class=&#34;token comment&#34;&gt;/* 可设负数 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;word-wrap强制换行css3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#word-wrap强制换行css3&#34;&gt;#&lt;/a&gt; word-wrap: 强制换行 (css3)&lt;/h2&gt;
&lt;p&gt;用于设置一段字超过规定长度后进行换行&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;word-wrap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; break-word&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;word-break非中日韩文本的换行规则css3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#word-break非中日韩文本的换行规则css3&#34;&gt;#&lt;/a&gt; word-break: 非中日韩文本的换行规则 (css3)&lt;/h2&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;word-break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; keep-all/break-all &lt;span class=&#34;token comment&#34;&gt;/* 单词换行 / 类似自动换行 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;line-height行间距&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#line-height行间距&#34;&gt;#&lt;/a&gt; line-height: 行间距&lt;/h2&gt;
&lt;p&gt;用于设置行间距，就是行与行之间距离（同 word 的行距），称为行高，取值有两种&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;line-height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100%&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;line-height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 10px &lt;span class=&#34;token comment&#34;&gt;/* 与 font-size 的绝对长度一样取值 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;text-aligh水平对齐&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#text-aligh水平对齐&#34;&gt;#&lt;/a&gt; text-aligh: 水平对齐&lt;/h2&gt;
&lt;p&gt;用于设置文本水平对齐方式（同 word 的对齐方式）&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;text-aligh&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; left/center/right/justify &lt;span class=&#34;token comment&#34;&gt;/* 左 / 中 / 右 / 两端对齐 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;你会发现此属性和 &lt;code&gt;direction&lt;/code&gt;  属性差不多，多了个居中&lt;/p&gt;
&lt;h2 id=&#34;vertical-align垂直对齐&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vertical-align垂直对齐&#34;&gt;#&lt;/a&gt; vertical-align: 垂直对齐&lt;/h2&gt;
&lt;p&gt;用于设置文本垂直对齐方式&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;vertical-align&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; sub/super &lt;span class=&#34;token comment&#34;&gt;/* 对齐文本的下 / 上标 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;vertical-align&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; top/text-top &lt;span class=&#34;token comment&#34;&gt;/* 对齐行中最高元素 / 父元素字体的顶端 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;vertical-align&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; middle &lt;span class=&#34;token comment&#34;&gt;/* 垂直居中 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;vertical-align&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; bottom/text-bottom &lt;span class=&#34;token comment&#34;&gt;/* 对齐行中最高元素 / 父元素字体的底端 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;vertical-align&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; length/% &lt;span class=&#34;token comment&#34;&gt;/* 长度和百分比长度 可负值 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;有个特性需要大家知道，图片或表单等行内块元素，它的底线会和父盒子基线对齐，会造成图片底侧有一个空白间隙&lt;/p&gt;
&lt;p&gt;解决方法有两种&lt;/p&gt;
&lt;p&gt;一是给图片添加垂直居中或对齐行中最高元素，让图片不和基线对齐&lt;/p&gt;
&lt;p&gt;二是给图片转换为块元素（后面会讲）&lt;/p&gt;
&lt;h2 id=&#34;text-decoration文本修饰&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#text-decoration文本修饰&#34;&gt;#&lt;/a&gt; text-decoration: 文本修饰&lt;/h2&gt;
&lt;p&gt;用于设置文本修饰（各种线）&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;text-decoration&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; underline/overline/line-through/blink/none/underline overline&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 下划线 / 删除线 / 上划线 / 闪烁效果（浏览器一般不显示）/ 上下划线 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;text-decoration&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; underline dotted red &lt;span class=&#34;token comment&#34;&gt;/* 红色虚线样式的下划线 可设置上 / 下 / 上下划线 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;text-decoration&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; underline wavy red &lt;span class=&#34;token comment&#34;&gt;/* 红色波浪线线样式的下划线 可设置上 / 下 / 上下划线 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;text-indent首行缩进&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#text-indent首行缩进&#34;&gt;#&lt;/a&gt; text-indent: 首行缩进&lt;/h2&gt;
&lt;p&gt;用于设置文本首行缩进&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;text-indent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 10px &lt;span class=&#34;token comment&#34;&gt;/* 与 font-size 的绝对长度一样取值 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;text-shadow文本阴影css3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#text-shadow文本阴影css3&#34;&gt;#&lt;/a&gt; text-shadow: 文本阴影 (css3)&lt;/h2&gt;
&lt;p&gt;用于设置文本阴影&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;text-shadow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 2px 2px 2px #ff0000 &lt;span class=&#34;token comment&#34;&gt;/* 水平阴影位置 垂直阴影位置 模糊距离 阴影颜色 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;text-transform英文转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#text-transform英文转换&#34;&gt;#&lt;/a&gt; text-transform: 英文转换&lt;/h2&gt;
&lt;p&gt;用于设置英文文本转换&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;text-transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; capitalize/uppercase/lowercase &lt;span class=&#34;token comment&#34;&gt;/* 首字母大写 / 全大写 / 全小写 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;text-overflow溢出处理css3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#text-overflow溢出处理css3&#34;&gt;#&lt;/a&gt; text-overflow: 溢出处理 (css3)&lt;/h2&gt;
&lt;p&gt;用于设置文本超过显示范围时的处理&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 该属性需要搭配另外两个属性使用 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;white-space&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; nowrap&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;overflow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; hidden&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;text-overflow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; clip/ellipsis/string &lt;span class=&#34;token comment&#34;&gt;/* 单纯的剪切文本 / 以省略号省略超出的文本 / 以自定义字符省略超出的文本 (仅火狐有效) */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以设置 hover 来显示处理掉的文本&lt;/p&gt;
&lt;h2 id=&#34;white-space空白处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#white-space空白处理&#34;&gt;#&lt;/a&gt; white-space: 空白处理&lt;/h2&gt;
&lt;p&gt;用于设置文本换行&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;white-space&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; pre/nowrap &lt;span class=&#34;token comment&#34;&gt;/* 保留空格 / 文本不会换行 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;white-space&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; pre-warp/pre-line &lt;span class=&#34;token comment&#34;&gt;/* 保留空格，正常换行 / 不保留空格，保留换行符 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;标签显示模式display&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标签显示模式display&#34;&gt;#&lt;/a&gt; 标签显示模式 (display)&lt;/h1&gt;
&lt;p&gt;标签的类型 (显示模式)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;html&lt;/code&gt;  标签一般分为块标签和行内标签两种，它们也称为块元素和行内元素&lt;/p&gt;
&lt;h2 id=&#34;块元素block-level&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#块元素block-level&#34;&gt;#&lt;/a&gt; 块元素 (block-level)&lt;/h2&gt;
&lt;p&gt;每个块元素都会占一整行或多整行，可对其设置属性&lt;/p&gt;
&lt;p&gt;常见的块元素有 &lt;code&gt;&amp;lt;h1&amp;gt;-&amp;lt;h6&amp;gt;、&amp;lt;p&amp;gt;、&amp;lt;div&amp;gt;、&amp;lt;ul&amp;gt;、&amp;lt;li&amp;gt;&lt;/code&gt;  等&lt;/p&gt;
&lt;p&gt;块元素的特点：总是从新行开始、高，行高，内外边距都可以控制、宽度默认容器百分百、可收纳内行元素和其他块元素&lt;/p&gt;
&lt;h2 id=&#34;行内元素inline-level&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行内元素inline-level&#34;&gt;#&lt;/a&gt; 行内元素 (inline-level)&lt;/h2&gt;
&lt;p&gt;行内元素也称内联元素，不占有独立区域，仅靠自身字体大小和图像尺寸来控制大小，通常不对其设置属性&lt;/p&gt;
&lt;p&gt;常见的行内元素有 &lt;code&gt;&amp;lt;a&amp;gt;、&amp;lt;span&amp;gt;&lt;/code&gt;  等&lt;/p&gt;
&lt;p&gt;行内元素的特点：和相邻行内元素处于同一行、高宽无效，但水平方向的 &lt;code&gt;margin&lt;/code&gt;  和 &lt;code&gt;padding&lt;/code&gt;  可以设置，垂直方向则不行、默认宽度就是内容本身、行内元素只能容纳文本或其他行内元素（ &lt;code&gt;a&lt;/code&gt;  除外）&lt;/p&gt;
&lt;h2 id=&#34;行内块元素inline-block&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行内块元素inline-block&#34;&gt;#&lt;/a&gt; 行内块元素 (inline-block)&lt;/h2&gt;
&lt;p&gt;有几个特殊的标签，如 &lt;code&gt;&amp;lt;img /&amp;gt;、&amp;lt;input /&amp;gt;、&amp;lt;td&amp;gt;&lt;/code&gt; ，可以对其设置属性，会被称为行内块元素&lt;/p&gt;
&lt;p&gt;行内块元素的特点：和相邻行内元素 (行内块) 在同一行上，但之间有空白间隙、默认宽度就是自己本身内容宽度、高，行高，内外边距都可以控制&lt;/p&gt;
&lt;h2 id=&#34;注意的点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意的点&#34;&gt;#&lt;/a&gt; 注意的点&lt;/h2&gt;
&lt;p&gt;只有文字才能组成段落， &lt;code&gt;p&lt;/code&gt;  标签内不能放块元素，同理还有 &lt;code&gt;&amp;lt;h1&amp;gt;-&amp;lt;h6&amp;gt;&lt;/code&gt; ，这些都是文字类块元素，里面不能放其他块元素&lt;/p&gt;
&lt;p&gt;链接不可套娃&lt;/p&gt;
&lt;h2 id=&#34;三种模式转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三种模式转换&#34;&gt;#&lt;/a&gt; 三种模式转换&lt;/h2&gt;
&lt;p&gt;三种模式之间可以使用 &lt;code&gt;display&lt;/code&gt;  属性来进行转换&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; inline/block/inline-block &lt;span class=&#34;token comment&#34;&gt;/* 块转行 / 行转块 / 块和行转行内块 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;css背景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css背景&#34;&gt;#&lt;/a&gt; CSS 背景&lt;/h1&gt;
&lt;p&gt;CSS 可以添加背景颜色和背景图片以及进行图片设置&lt;/p&gt;
&lt;h2 id=&#34;定义背景效果有五种基础属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义背景效果有五种基础属性&#34;&gt;#&lt;/a&gt; 定义背景效果有五种基础属性&lt;/h2&gt;
&lt;h3 id=&#34;background-color背景颜色&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#background-color背景颜色&#34;&gt;#&lt;/a&gt; background-color: 背景颜色&lt;/h3&gt;
&lt;p&gt;颜色取值同字体颜色一致&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;background-image背景图片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#background-image背景图片&#34;&gt;#&lt;/a&gt; background-image: 背景图片&lt;/h3&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;/*图片路径*/&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;background-repeat背景重复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#background-repeat背景重复&#34;&gt;#&lt;/a&gt; background-repeat: 背景重复&lt;/h3&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-repeat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; repeat/repeat-x/repeat-y/no-repeat &lt;span class=&#34;token comment&#34;&gt;/* 重复 / 水平重复 / 垂直重复 / 不重复 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;background-position背景位置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#background-position背景位置&#34;&gt;#&lt;/a&gt; background-position: 背景位置&lt;/h3&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-position&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 位置/x% y%/0px 0px/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 8 种方位，下方列出 / 后面两种值，第一个值是水平位置，第二个是垂直，两种可以混合使用 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;left top/left center/left bottom/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;center top/center center/center bottom/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;right top/right center/right bottom/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 如果只设置一个属性，另一个默认 center */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;background-attachment背景滚动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#background-attachment背景滚动&#34;&gt;#&lt;/a&gt; background-attachment: 背景滚动&lt;/h3&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-attachment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; scroll/fixed/local/initial&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 背景图片随页面滚动 / 背景图片不会滚动 / 背景图片随元素内容滚动 / 不会被其他效果影响 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;背景简写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景简写&#34;&gt;#&lt;/a&gt; 背景简写&lt;/h2&gt;
&lt;p&gt;背景也可以像 &lt;code&gt;font&lt;/code&gt;  一样连写属性，不过顺序并没有强制，但建议还是按以下写&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;而在-css3-中新增了四种属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#而在-css3-中新增了四种属性&#34;&gt;#&lt;/a&gt; 而在 CSS3 中，新增了四种属性&lt;/h2&gt;
&lt;h3 id=&#34;背景透明css3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景透明css3&#34;&gt;#&lt;/a&gt; 背景透明 (css3)&lt;/h3&gt;
&lt;p&gt;CSS3 支持背景半透明&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rgba&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0.5&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 CSS3 中，背景图片可以多张叠放，类似于 PS 的图层&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;，&lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-repeat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; no-repeat，repeat&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以给不同的图片设置不同的属性&lt;/p&gt;
&lt;h3 id=&#34;background-size背景大小css3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#background-size背景大小css3&#34;&gt;#&lt;/a&gt; background-size: 背景大小 (css3)&lt;/h3&gt;
&lt;p&gt;CSS1 中，背景图片大小只能用图片本身大小，而在 CSS3 中，可以进行修改了&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; contain/cover/0px 0px/50% 50% &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 自动缩放比例，保证图片始终完整显示在背景 / 自动缩放比例，保证图片始终填满背景，如有溢出则隐藏 / 长和宽 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;background-origin定位图片css3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#background-origin定位图片css3&#34;&gt;#&lt;/a&gt; background-origin: 定位图片 (css3)&lt;/h3&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-origin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; padding-box/border-box/content-box&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 靠近边框 / 紧贴边框 / 紧贴内容 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;background-clip背景裁剪css3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#background-clip背景裁剪css3&#34;&gt;#&lt;/a&gt; background-clip: 背景裁剪 (css3)&lt;/h3&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-clip&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; padding-box/border-box/content-box&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 背景外 / 背景内 / 剪成内容大小 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;css渐变css3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css渐变css3&#34;&gt;#&lt;/a&gt; CSS 渐变 (css3)&lt;/h2&gt;
&lt;p&gt;渐变可以让你在两个或多个指定的颜色之间显示平稳的过渡&lt;/p&gt;
&lt;p&gt;渐变有两种类型&lt;/p&gt;
&lt;h3 id=&#34;线性渐变&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性渐变&#34;&gt;#&lt;/a&gt; 线性渐变&lt;/h3&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;linear-gradient&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;颜色1，颜色2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 默认从上到下 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;linear-gradient&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;to right，颜色1，颜色2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 从左到右 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;linear-gradient&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;to bottom right，颜色1，颜色2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 从左上到右下 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;linear-gradient&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;90deg，颜色1，颜色2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 指定角度 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;linear-gradient&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;to bottom right，&lt;span class=&#34;token function&#34;&gt;rgba&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;255&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;，&lt;span class=&#34;token function&#34;&gt;rgba&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;255&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 带透明度的渐变 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;45deg，yellow 10%，red 20%&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 重复渐变 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;径向渐变&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#径向渐变&#34;&gt;#&lt;/a&gt; 径向渐变&lt;/h3&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;radial-gradient&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;red&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; yellow&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; green&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 颜色分布均匀 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;radial-gradient&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;red 5%&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; yellow 15%&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; green 60%&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 颜色分布不均匀 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;radial-gradient&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;circle/ellipse&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; yellow&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; green&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 带形状的渐变，C 表示圆形，e 表示椭圆，默认椭圆 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;radial-gradient&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;closest-side at 60% 55%&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; yellow&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; black&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 不同尺寸的形状 值有 closest-side，farthest-side，closest-corner，farthest-corner */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;repeating-radial-gradient&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;red&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; yellow 10%&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; green 15%&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 重复渐变 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;css盒子模型重点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css盒子模型重点&#34;&gt;#&lt;/a&gt; CSS 盒子模型 (重点)&lt;/h1&gt;
&lt;p&gt;所有 HTML 元素可以看作盒子，CSS 盒模型本质上是一个盒子，也是一个盛装内容的容器，封装周围的 HTML 元素，它包括：边距，边框，填充，和实际内容，盒模型允许我们在其它元素和周围元素边框之间的空间放置元素&lt;/p&gt;
&lt;h2 id=&#34;盒子模型的四部分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#盒子模型的四部分&#34;&gt;#&lt;/a&gt; 盒子模型的四部分&lt;/h2&gt;
&lt;h3 id=&#34;盒子边框border&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#盒子边框border&#34;&gt;#&lt;/a&gt; 盒子边框（border）&lt;/h3&gt;
&lt;p&gt;盒子边框就是一层水果皮，苹果皮，橙子皮，有三种样式&lt;/p&gt;
&lt;h4 id=&#34;边框样式用于定义边框风格&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#边框样式用于定义边框风格&#34;&gt;#&lt;/a&gt; 边框样式，用于定义边框风格&lt;/h4&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border-style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; none/dotted/dashed/solid/double/hidden &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 无边框 / 点线 / 虚线 / 实线 / 双实线 / 隐藏边框 这类是常用标签 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;groove/ridge/inset/outset &lt;span class=&#34;token comment&#34;&gt;/* 凹槽边框 / 垄状边框 / 嵌入边框 / 外凸边框 这是不常用的标签 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;不常用的标签名词解释是不是很难懂，我来翻译成容易理解的话&lt;/p&gt;
&lt;p&gt;凹槽边框，就是定义 &lt;strong&gt;左边，上边的外边框和右边，下边的内边框&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;垄状边框，就是定义 &lt;strong&gt;左边，上边的内边框和右边，下边的外边框&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嵌入边框，就是定义 &lt;strong&gt;左边，上边的整个边框&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;外凸边框，就是定义 &lt;strong&gt;右边，下边的整个边框&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;边框宽度用于定义边框大小&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#边框宽度用于定义边框大小&#34;&gt;#&lt;/a&gt; 边框宽度，用于定义边框大小&lt;/h4&gt;
&lt;p&gt;此属性需要配合边框样式使用&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border-width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0px/thick/medium/thin &lt;span class=&#34;token comment&#34;&gt;/* 任意单位 / 三种关键字，关键字可自定义宽度 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;边框颜色用于定义边框颜色&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#边框颜色用于定义边框颜色&#34;&gt;#&lt;/a&gt; 边框颜色，用于定义边框颜色&lt;/h4&gt;
&lt;p&gt;此属性需要配合边框样式使用&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border-color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red/transparent &lt;span class=&#34;token comment&#34;&gt;/* 颜色，十六进制，RGB 值都可用 / 透明颜色 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;单独设置不同方向的边框&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单独设置不同方向的边框&#34;&gt;#&lt;/a&gt; 单独设置不同方向的边框&lt;/h4&gt;
&lt;p&gt;除了 &lt;code&gt;style&lt;/code&gt; ，其余两个也可以单独设置&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border-top-style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; solid&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border-top-color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border-top-width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 5px&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border-right-style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; dotted&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border-bottom-style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; double&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border-left-style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; dashed&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果你觉得一个个设置很麻烦，也可以简写一下&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border-style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; dotted solid double dashed &lt;span class=&#34;token comment&#34;&gt;/* 四个边框自定义 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border-style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; dotted solid double &lt;span class=&#34;token comment&#34;&gt;/* 上 左右 下 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border-style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; dotted solid &lt;span class=&#34;token comment&#34;&gt;/* 上下 左右 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;边框简写属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#边框简写属性&#34;&gt;#&lt;/a&gt; 边框简写属性&lt;/h4&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 5px solid red &lt;span class=&#34;token comment&#34;&gt;/* 大小 / 线型 / 颜色 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;表格细线边框&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表格细线边框&#34;&gt;#&lt;/a&gt; 表格细线边框&lt;/h4&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;border-collapse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; collapse&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 合并边框 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;圆角边框css3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#圆角边框css3&#34;&gt;#&lt;/a&gt; 圆角边框 (css3)&lt;/h4&gt;
&lt;p&gt;桌子有矩形桌子，也有防撞角的圆角桌子，盒子也同理，具有圆角边框&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border-radius&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 5px 5px 5px 5px &lt;span class=&#34;token comment&#34;&gt;/* 值的写法与上方同理 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;外边距margin&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#外边距margin&#34;&gt;#&lt;/a&gt; 外边距（margin）&lt;/h3&gt;
&lt;p&gt;外边距指的是 &lt;strong&gt;边框与其他边框的距离&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设置外边距会在元素之间创建空白，这段空白通常不能放置其他内容&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 25px 25px &lt;span class=&#34;token comment&#34;&gt;/* 简写属性，同盒子边框 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;margin-top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 25px &lt;span class=&#34;token comment&#34;&gt;/* 上外边距 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;margin-right&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 25px &lt;span class=&#34;token comment&#34;&gt;/* 右外边距 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;margin-bottom&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 25px &lt;span class=&#34;token comment&#34;&gt;/* 下外边距 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;margin-left&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 25px &lt;span class=&#34;token comment&#34;&gt;/* 左外边距 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;盒子水平居中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#盒子水平居中&#34;&gt;#&lt;/a&gt; 盒子水平居中&lt;/h4&gt;
&lt;p&gt;外边距可以让一个盒子水平居中&lt;/p&gt;
&lt;p&gt;首先要满足是块元素，其次盒子指定了宽度&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.hezi&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 300px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0 auto&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 上下为 0，左右自动 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;清除默认内外边框&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#清除默认内外边框&#34;&gt;#&lt;/a&gt; 清除默认内外边框&lt;/h4&gt;
&lt;p&gt;行内元素是只有内外边距，没有上下内外边距，内边距在 ie6 等超低版本浏览器会出问题（但现在最低都是 ie8 把）&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;外边距合并&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#外边距合并&#34;&gt;#&lt;/a&gt; 外边距合并&lt;/h4&gt;
&lt;p&gt;在使用 &lt;code&gt;margin&lt;/code&gt;  定义块元素的垂直外边距时，可能会出现外边距合并的问题&lt;/p&gt;
&lt;h5 id=&#34;相邻块元素垂直外边距合并&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相邻块元素垂直外边距合并&#34;&gt;#&lt;/a&gt; 相邻块元素垂直外边距合并&lt;/h5&gt;
&lt;p&gt;上下相邻的两个块元素相遇，此时如果上方的块元素有设置下外边距，下方的块元素有设置上外边距，则他们之间的垂直距离不是两个外边距相加之和，而是之中最大者。这种情况称为外边距塌陷&lt;/p&gt;
&lt;p&gt;要解决这种方法除了避免同时设置上下外边距之外，还可以使用 &lt;code&gt;BFC&lt;/code&gt;  解决&lt;/p&gt;
&lt;h5 id=&#34;嵌套块元素垂直外边距合并&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#嵌套块元素垂直外边距合并&#34;&gt;#&lt;/a&gt; 嵌套块元素垂直外边距合并&lt;/h5&gt;
&lt;p&gt;两个有嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的最大者，即使父元素的上外边距为 0&lt;/p&gt;
&lt;p&gt;解决方法有两种&lt;/p&gt;
&lt;p&gt;一是给父元素添加 1 像素的上边框或上内边距 (padding)&lt;/p&gt;
&lt;p&gt;二是给父元素添加 &lt;code&gt;overflow:hidden&lt;/code&gt; ，溢出消除&lt;/p&gt;
&lt;h3 id=&#34;bfcblock-formatting-context&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bfcblock-formatting-context&#34;&gt;#&lt;/a&gt; BFC（Block Formatting Context）&lt;/h3&gt;
&lt;p&gt;即块级格式化上下文，官方文档是这样介绍的：一个 &lt;code&gt;BFC&lt;/code&gt;  区域包含创建该上下文元素的所有子元素，但不包括创建了新的 &lt;code&gt;BFC&lt;/code&gt;  的子元素的内部元素，它是页面中一块独立的渲染区域，并且有一套属于自己的渲染规则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部的盒子会在垂直方向上一个接一个的放置&lt;/li&gt;
&lt;li&gt;对于同一个 BFC 的俩个相邻的盒子的 margin 会发生重叠，与方向无关。&lt;/li&gt;
&lt;li&gt;每个元素的左外边距与包含块的左边界相接触（从左到右），即使浮动元素也是如此&lt;/li&gt;
&lt;li&gt;BFC 的区域不会与 float 的元素区域重叠&lt;/li&gt;
&lt;li&gt;计算 BFC 的高度时，浮动子元素也参与计算&lt;/li&gt;
&lt;li&gt;BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能你看了上面一脸懵逼，下面代码解释&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;box1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;box2&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;box3&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;box4&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;box5&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;假设 box1 和 box4 是两个 BFC 区域，那么按照上面说法就是，box1 这个 BFC 区域包含了子元素 box2、box3 和 box4，但不包含 box5，而 box4 这个 BFC 区域包含了子元素 box5&lt;/p&gt;
&lt;p&gt;每一个 BFC 区域只包括其子元素，不包括子元素的子元素&lt;/p&gt;
&lt;p&gt;每一个 BFC 区域都是独立的，互相不影响&lt;/p&gt;
&lt;p&gt;触发 &lt;code&gt;BFC&lt;/code&gt;  的条件包括不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根元素，即 HTML 元素&lt;/li&gt;
&lt;li&gt;浮动元素，float 值为 left、right&lt;/li&gt;
&lt;li&gt;overflow 值不为 visible，为 auto、scroll、hidden&lt;/li&gt;
&lt;li&gt;display 的值为 inline-block、inltable-cell、table-caption、table、inline-table、flex、inline-flex、grid、inline-grid&lt;/li&gt;
&lt;li&gt;position 的值为 absolute 或 fixed&lt;/li&gt;
&lt;li&gt;弹性布局 flex&lt;/li&gt;
&lt;li&gt;表格单元格，table-cell&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;bfc能解决的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bfc能解决的问题&#34;&gt;#&lt;/a&gt; BFC 能解决的问题&lt;/h4&gt;
&lt;h5 id=&#34;1解决外边距塌陷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1解决外边距塌陷&#34;&gt;#&lt;/a&gt; 1. 解决外边距塌陷&lt;/h5&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;.box&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 200px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 200px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;background-color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;box&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;box&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;你会发现，上述两个盒子之前应该是相距 200px，但你发现之间只有 100px 间距，这就是上述的相邻块元素垂直外边距合并问题&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;.box&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 200px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 200px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;background-color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;.box_f&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;overflow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;hidden&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;box_f&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;box&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;box_f&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;box&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;给两个盒子添加父元素，并为父元素触发 &lt;code&gt;BFC&lt;/code&gt; ，间距也变成 200px，目的是使两个盒子之间独立&lt;/p&gt;
&lt;h5 id=&#34;2包含塌陷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2包含塌陷&#34;&gt;#&lt;/a&gt; 2. 包含塌陷&lt;/h5&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token selector&#34;&gt;.father&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 300px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 300px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token property&#34;&gt;background-color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token property&#34;&gt;overflow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;hidden&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 加上我 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;.son&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token property&#34;&gt;background-color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; blue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token property&#34;&gt;margin-top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 50px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;father&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;son&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上述代码你可能会想子元素距离父元素 50px，但你会发现父元素距离浏览器 50px，除了用 padding 可以解决，用 &lt;code&gt;BFC&lt;/code&gt;  也可以，只需要给父元素加上一行代码&lt;/p&gt;
&lt;h5 id=&#34;3清除浮动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3清除浮动&#34;&gt;#&lt;/a&gt; 3. 清除浮动&lt;/h5&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;.par&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;border&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 5px solid #fcc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 300px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;overflow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; hidden&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 加上我 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;.child&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;border&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 5px solid #f66&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; left&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;par&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;child&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;child&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;BFC&lt;/code&gt;  在计算高度时，浮动元素也会参与，我们可以使父元素生成 &lt;code&gt;BFC&lt;/code&gt; ，其内部浮动元素计算高度时候也会计算&lt;/p&gt;
&lt;h5 id=&#34;4自适应多栏布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4自适应多栏布局&#34;&gt;#&lt;/a&gt; 4. 自适应多栏布局&lt;/h5&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 300px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; relative&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;.aside&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 150px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; left&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; #f66&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;.main&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 200px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; #fcc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;overflow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; hidden&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 加上我 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;aside&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;main&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;每个元素的左外边距与包含块的左边界相接触，虽然给 &lt;code&gt;aside&lt;/code&gt;  元素添加了浮动，但是 &lt;code&gt;main&lt;/code&gt;  的左边依然会与包含块的左边相接触&lt;/p&gt;
&lt;p&gt;通过给 &lt;code&gt;main&lt;/code&gt;  元素变为 &lt;code&gt;BFC&lt;/code&gt; ，会变成适应两栏的布局&lt;/p&gt;
&lt;p&gt;这时候，新的 &lt;code&gt;BFC&lt;/code&gt;  不会与浮动的 &lt;code&gt;.aside&lt;/code&gt;  元素重叠。因此会根据包含块的宽度，和 &lt;code&gt;.aside&lt;/code&gt;  的宽度，自动变窄缩放&lt;/p&gt;
&lt;h3 id=&#34;内边距padding&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内边距padding&#34;&gt;#&lt;/a&gt; 内边距（padding）&lt;/h3&gt;
&lt;p&gt;内边距指的是 &lt;strong&gt;边框与内容之间的距离&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设置内边框会在边框与内容之间创建空白，这段空白会被背景填充&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 25px 25px &lt;span class=&#34;token comment&#34;&gt;/* 简写属性。同盒子边框 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;padding-top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 25px &lt;span class=&#34;token comment&#34;&gt;/* 上内边距 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;padding-right&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 25px &lt;span class=&#34;token comment&#34;&gt;/* 右内边距 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;padding-bottom&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 25px &lt;span class=&#34;token comment&#34;&gt;/* 下内边距 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;padding-left&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 25px &lt;span class=&#34;token comment&#34;&gt;/* 左内边距 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;盒子内容content&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#盒子内容content&#34;&gt;#&lt;/a&gt; 盒子内容（Content）&lt;/h3&gt;
&lt;p&gt;单纯的只是盒子里的内容，如文本，图像&lt;/p&gt;
&lt;h3 id=&#34;轮廓outline&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#轮廓outline&#34;&gt;#&lt;/a&gt; 轮廓 (outline)&lt;/h3&gt;
&lt;p&gt;轮廓位于边框外围，主要是突出元素作用&lt;/p&gt;
&lt;p&gt;轮廓的属性同边框一致&lt;/p&gt;
&lt;p&gt;一般都是取消轮廓的&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;outline&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; outline-color outline-style outline-width/0 &lt;span class=&#34;token comment&#34;&gt;/* 颜色 样式 宽度 / 去掉轮廓 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;轮廓是不占空间的，既不会增加额外的 width 或者 height（这样不会导致浏览器渲染时出现 reflow 或是 repaint）&lt;/p&gt;
&lt;p&gt;轮廓有可能是非矩形的（火狐浏览器下）&lt;/p&gt;
&lt;h2 id=&#34;content宽度和高度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#content宽度和高度&#34;&gt;#&lt;/a&gt; content 宽度和高度&lt;/h2&gt;
&lt;p&gt;使用宽度和高度属性可以对盒子大小进行控制&lt;/p&gt;
&lt;p&gt;大多数浏览器都采用了 W3C 规范，符合 CSS 规范的盒子模型和总宽度和总高度的计算是&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;外盒尺寸计算（元素空间尺寸）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Element空间高度/宽度 = content height/width + padding + border + margin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;内盒尺寸计算（元素大小）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Element内容高度/宽度 = content height/width + padding + border&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;宽度属性和高度属性仅适用块元素，对行内元素无效（img 和 input 除外）&lt;/p&gt;
&lt;p&gt;计算盒子模型的总高度时，还要考虑上下两个盒子的外边距塌陷问题&lt;/p&gt;
&lt;p&gt;如果一个盒子没有给宽 / 高度或继承父元素的宽 / 高度，则 &lt;code&gt;padding&lt;/code&gt;  不会影响本盒子大小&lt;/p&gt;
&lt;h2 id=&#34;盒子模型布局稳定性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#盒子模型布局稳定性&#34;&gt;#&lt;/a&gt; 盒子模型布局稳定性&lt;/h2&gt;
&lt;p&gt;根据稳定性来分优先程度&lt;/p&gt;
&lt;p&gt;优先使用 &lt;strong&gt;宽度&lt;/strong&gt; 其次使用 &lt;strong&gt;内边距&lt;/strong&gt; 再次 &lt;strong&gt;外边距&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么这样排？&lt;/p&gt;
&lt;p&gt;外边距会有外边距合并问题、内边距会影响盒子大小，需要进行计算&lt;/p&gt;
&lt;p&gt;这样来看宽度就会好用很多&lt;/p&gt;
&lt;h2 id=&#34;盒模型box-sizing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#盒模型box-sizing&#34;&gt;#&lt;/a&gt; 盒模型 box-sizing&lt;/h2&gt;
&lt;p&gt;在 CSS3 中可以通过 &lt;code&gt;box-sizing&lt;/code&gt;  指定盒模型&lt;/p&gt;
&lt;p&gt;分为两种情况&lt;/p&gt;
&lt;p&gt;1. &lt;code&gt;border-box&lt;/code&gt; ，默认值，盒子大小为 &lt;code&gt;width+padding+border&lt;/code&gt; ，让元素维持 W3C 的标准 Box Mode&lt;/p&gt;
&lt;p&gt;2. &lt;code&gt;border-box&lt;/code&gt; ，这个值会将盒子大小固定为宽度的值， &lt;code&gt;padding&lt;/code&gt;  和 &lt;code&gt;border&lt;/code&gt;  包含在宽度里&lt;/p&gt;
&lt;h2 id=&#34;盒子阴影css3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#盒子阴影css3&#34;&gt;#&lt;/a&gt; 盒子阴影 (css3)&lt;/h2&gt;
&lt;p&gt;用于设置 div 元素框的阴影&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;box-shadow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 10px 10px 5px 5px #888888 inset &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 水平阴影位置 垂直阴影位置 模糊距离 阴影大小 阴影颜色 最后一个直接打，作用是阴影从框内部开始 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;浮动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浮动&#34;&gt;#&lt;/a&gt; 浮动&lt;/h1&gt;
&lt;p&gt;浮动就是 &lt;code&gt;float&lt;/code&gt;  属性，属于 CSS 中的定位机制，而 CSS 中有三种定位机制&lt;/p&gt;
&lt;h2 id=&#34;普通流标准流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#普通流标准流&#34;&gt;#&lt;/a&gt; 普通流（标准流）&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;html&lt;/code&gt;  中另外的一个重要概念 — 标准流，又称普通流或文档流&lt;/p&gt;
&lt;p&gt;普通流实际上就是一个网页内标签元素正常由上到下，从左到右排列布局&lt;/p&gt;
&lt;p&gt;如块元素会占一行，行内元素会按顺序依次前后排列，按照这种大前提的布局下绝对不会出现例外的情况叫做普通流布局&lt;/p&gt;
&lt;h2 id=&#34;浮动-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浮动-2&#34;&gt;#&lt;/a&gt; 浮动&lt;/h2&gt;
&lt;p&gt;浮动指设置了浮动属性的元素会脱离普通流的控制，移动到其父元素中指定位置&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; left/right &lt;span class=&#34;token comment&#34;&gt;/* 左浮动 / 右浮动 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;浮动会脱离标准流，不占位置，会影响标准流，且浮动只有左右浮动&lt;/p&gt;
&lt;p&gt;浮动首先创建包含块的慨念（包裹），浮动的元素总是找理它最近的父元素对齐，但不会超出内边距范围&lt;/p&gt;
&lt;p&gt;浮动的元素排列位置，跟上一个块元素有关。如果上一个元素有浮动，则 A 元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则 A 元素的顶部会和上一个元素的底部对齐&lt;/p&gt;
&lt;p&gt;一个父盒子里的子盒子，如果其中一个子级有浮动的话，其他子级都需要浮动，才能在同一行&lt;/p&gt;
&lt;p&gt;元素添加了浮动后，会具有行内块元素特性。元素大小取决于定义的大小或其内容多少&lt;/p&gt;
&lt;p&gt;浮动根据元素书写的位置来显示相应的浮动&lt;/p&gt;
&lt;h3 id=&#34;清除浮动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#清除浮动&#34;&gt;#&lt;/a&gt; 清除浮动&lt;/h3&gt;
&lt;p&gt;由于浮动元素不再占用原文档流位置，所以会对后面的元素排版产生影响，于是，清除浮动就显得重要&lt;/p&gt;
&lt;p&gt;准确来说，是清除浮动后造成的影响&lt;/p&gt;
&lt;p&gt;清除浮动主要是为了解决父元素因为子级浮动引起内部高度为 0 的问题&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; left/right/both &lt;span class=&#34;token comment&#34;&gt;/* 清除左浮动 / 右浮动 / 左右都清除 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;清除浮动有四种方法&lt;/p&gt;
&lt;h4 id=&#34;额外标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#额外标签&#34;&gt;#&lt;/a&gt; 额外标签&lt;/h4&gt;
&lt;p&gt;在浮动元素的下方添加一个空的标签（是标签就行），如 &lt;code&gt;&amp;lt;div style=&amp;quot;clear:both&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;（三种样式表都可以用）&lt;/code&gt; ，这样写确实方便，但一般不推荐这样写&lt;/p&gt;
&lt;h4 id=&#34;父级添加属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#父级添加属性&#34;&gt;#&lt;/a&gt; 父级添加属性&lt;/h4&gt;
&lt;p&gt;给浮动元素的父级添加 &lt;code&gt;overflow&lt;/code&gt; （什么值都行）&lt;/p&gt;
&lt;p&gt;这样写代码可读性高，但内容多的时候容易造成不会自动换行导致内容被隐藏&lt;/p&gt;
&lt;h4 id=&#34;after伪元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#after伪元素&#34;&gt;#&lt;/a&gt; after 伪元素&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;:after&lt;/code&gt;  为额外标签升级版，自然不需要单独添加标签&lt;/p&gt;
&lt;p&gt;符合闭合浮动思路，解构语义化也正确，就是不支持 IE6 和 7&lt;/p&gt;
&lt;p&gt;百度、淘宝等均使用这种方法&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.clearbox:after&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;.&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 内容不限 */&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; block&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 变为块元素 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 清除高度 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; both&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 清除浮动 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;visibility&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; hidden&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 隐藏盒子 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* IE6、7 专用 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.clearbox&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    *&lt;span class=&#34;token property&#34;&gt;zoom&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* * 号为 ie6 7 识别的特殊符号 zoom 是 ie6 7 清除浮动方法 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;双伪元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#双伪元素&#34;&gt;#&lt;/a&gt; 双伪元素&lt;/h4&gt;
&lt;p&gt;小米、腾讯等均使用这种方法&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.clearbox:before,clearbox:after&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; table&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 触发 BFC */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.clearbox:after&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token property&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; both&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.clearbox&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	*&lt;span class=&#34;token property&#34;&gt;zoom&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定位&#34;&gt;#&lt;/a&gt; 定位&lt;/h2&gt;
&lt;p&gt;元素的定位主要包括定位模式和边偏移&lt;/p&gt;
&lt;h3 id=&#34;边偏移&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#边偏移&#34;&gt;#&lt;/a&gt; 边偏移&lt;/h3&gt;
&lt;p&gt;这个和 &lt;code&gt;margin``padding&lt;/code&gt;  差不多&lt;/p&gt;
&lt;p&gt;上下左右偏移量，相对于父元素上下左右边线距离&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0px&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;bottom&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0px&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0px&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0px&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;static静态定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#static静态定位&#34;&gt;#&lt;/a&gt; static: 静态定位&lt;/h3&gt;
&lt;p&gt;一句话：网页中所有元素都默认是静态定位，就是标准流的特性&lt;/p&gt;
&lt;p&gt;在此定位下，无法通过边偏移改变元素位置&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; static&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;relative相对定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#relative相对定位&#34;&gt;#&lt;/a&gt; relative: 相对定位&lt;/h3&gt;
&lt;p&gt;此定位可以将元素定位于相对位置，可以被边偏移改变元素位置，但是在文档流的位置依然不变（身体变了灵魂没变）&lt;/p&gt;
&lt;p&gt;每次移动都是根据元素左上角基点移动&lt;/p&gt;
&lt;p&gt;浮动的主要目的是让多个块元素一行显示，那么定位就是移动位置，让盒子到我们想要的位置上去&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; relative&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;fixed固定定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fixed固定定位&#34;&gt;#&lt;/a&gt; fixed: 固定定位&lt;/h3&gt;
&lt;p&gt;这是一个特殊的定位模式，类似于正方形是一个特殊的矩形&lt;/p&gt;
&lt;p&gt;此定位以浏览器窗口作为参照物来定义网页元素&lt;/p&gt;
&lt;p&gt;对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置，不管浏览器滚动也不管浏览器窗口变化，始终显示在固定位置&lt;/p&gt;
&lt;p&gt;此定位跟父元素没有任何关系，只认浏览器&lt;/p&gt;
&lt;p&gt;此定位会将元素改为行内块模式&lt;/p&gt;
&lt;p&gt;(网页常见的广告就是这样定位的)&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; fixed&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;absolute绝对定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#absolute绝对定位&#34;&gt;#&lt;/a&gt; absolute: 绝对定位&lt;/h3&gt;
&lt;p&gt;此定位可以将元素定位于绝对位置，可以被边偏移改变元素位置，在文档流的位置会改变（身心都跑了）&lt;/p&gt;
&lt;p&gt;如果文档可以滚动，此定位会随着它滚动，因为元素最终会相对于正常流的某一部分定位&lt;/p&gt;
&lt;p&gt;此定位会将元素改为行内块模式&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; absolute&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果父级没有定位，元素则会以浏览器为准对齐&lt;/p&gt;
&lt;p&gt;如果父级有定位，元素会依据最近的已经定位的父元素进行定位&lt;/p&gt;
&lt;p&gt;子元素是绝对定位的话，父元素就要用相对定位&lt;/p&gt;
&lt;p&gt;绝对定位下的如何盒子水平 / 垂直居中，有一个算法可以做到&lt;/p&gt;
&lt;p&gt;首先将子盒子设置父盒子宽度的一半，然后减去自己子盒子的宽度一半&lt;/p&gt;
&lt;p&gt;当然熟悉的直接写结果，不需要写两个值&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.father&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 800px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 400px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; relative&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.son&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; absolute&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 350px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 最终计算是 350px 是由父元素宽度一半 400px 减去自身宽度一半 50 得到的 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;sticky粘性定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sticky粘性定位&#34;&gt;#&lt;/a&gt; sticky: 粘性定位&lt;/h3&gt;
&lt;p&gt;此定位基于用户的滚动位置来定位&lt;/p&gt;
&lt;p&gt;简单说，它会随着你的浏览器滚动而滚动位置，一旦超出了它的滚动范围，它就是固定在哪里&lt;/p&gt;
&lt;p&gt;在相对定位和固定定位之间切换&lt;/p&gt;
&lt;p&gt;比如一些网站的导航栏就是使用这种定位&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; sticky&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;重叠元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重叠元素&#34;&gt;#&lt;/a&gt; 重叠元素&lt;/h3&gt;
&lt;p&gt;在使用定位时，你会发现元素重叠，而有些时候你需要一些在上一些在下，这时候需要重叠元素了&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;z-index&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 取值可以正负 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;默认值为 0，值越大，元素层叠越上&lt;/p&gt;
&lt;p&gt;如果取值相同，则根据书写顺序后来居上&lt;/p&gt;
&lt;p&gt;相对定位、绝对定位和固定定位可设置此属性，其余不可&lt;/p&gt;
&lt;h1 id=&#34;元素的显示与隐藏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#元素的显示与隐藏&#34;&gt;#&lt;/a&gt; 元素的显示与隐藏&lt;/h1&gt;
&lt;p&gt;CSS 中有三个显示和隐藏的属性&lt;/p&gt;
&lt;h2 id=&#34;display显示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#display显示&#34;&gt;#&lt;/a&gt; display: 显示&lt;/h2&gt;
&lt;p&gt;设置或检索对象是否显示及如何显示&lt;/p&gt;
&lt;p&gt;被隐藏的对象不会占用空间&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; none/block &lt;span class=&#34;token comment&#34;&gt;/* 隐藏对象 / 显示对象并转换为块元素 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;visibility可见性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#visibility可见性&#34;&gt;#&lt;/a&gt; visibility: 可见性&lt;/h2&gt;
&lt;p&gt;设置或检索是否显示对象&lt;/p&gt;
&lt;p&gt;被隐藏的对象会继续占用空间&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;visibility&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; hidden/collapse &lt;span class=&#34;token comment&#34;&gt;/* 隐藏元素 / 删除表格一行或一列 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;overflow溢出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#overflow溢出&#34;&gt;#&lt;/a&gt; overflow: 溢出&lt;/h2&gt;
&lt;p&gt;设置或检索当对象的内容超过其指定高度及宽度时如何管理内容&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;overflow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; auto/hidden/scroll &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 超出内容自动显示滚动条，不超则不显示 / 隐藏超出的内容 / 总是显示滚动条 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;css用户界面样式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css用户界面样式&#34;&gt;#&lt;/a&gt; CSS 用户界面样式&lt;/h1&gt;
&lt;p&gt;界面样式就是改变一些用户操作样式&lt;/p&gt;
&lt;h2 id=&#34;鼠标样式cursor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#鼠标样式cursor&#34;&gt;#&lt;/a&gt; 鼠标样式:cursor&lt;/h2&gt;
&lt;p&gt;更改移动到对象上的鼠标指针样式&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;cursor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; crosshair 光标呈现为十字线&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pointer 	此光标指示链接的指针（一只手）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;move		此光标指示某对象可被移动&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;e-resize	此光标指示矩形框的边缘可被向右（东）移动&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ne-resize	此光标指示矩形框的边缘可被向上及向右移动（北/东）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;nw-resize	此光标指示矩形框的边缘可被向上及向左移动（北/西）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;n-resize	此光标指示矩形框的边缘可被向上（北）移动&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;se-resize	此光标指示矩形框的边缘可被向下及向右移动（南/东）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sw-resize	此光标指示矩形框的边缘可被向下及向左移动（南/西）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;s-resize	此光标指示矩形框的边缘可被向下移动（南）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;w-resize	此光标指示矩形框的边缘可被向左移动（西）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;text		此光标指示文本&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;wait		此光标指示程序正忙（通常是一只表或沙漏）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;help		此光标指示可用的帮助（通常是一个问号或一个气球）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;防止拖拽文本域resizecss3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防止拖拽文本域resizecss3&#34;&gt;#&lt;/a&gt; 防止拖拽文本域:resize (css3)&lt;/h2&gt;
&lt;p&gt;可以设置用户能否拖动文本域&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; none/both/horizontai/vertical &lt;span class=&#34;token comment&#34;&gt;/* 禁止拖放 / 可调整高宽 / 可调整宽度 / 可调整高度 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;css过渡css3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css过渡css3&#34;&gt;#&lt;/a&gt; CSS 过渡 (css3)&lt;/h1&gt;
&lt;p&gt;CSS3 中，我们为了添加某种效果可以从一种样式转变到另一个的时候，无需使用 Flash 动画或 JavaScript&lt;/p&gt;
&lt;p&gt;在一些个人博客中的加载页面就是这样做成的&lt;/p&gt;
&lt;p&gt;CSS3 过渡是元素从一种样式逐渐改变为另一种的效果&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 需要过渡的CSS名称 过渡时间 过渡速度 过渡几时开始 &lt;span class=&#34;token comment&#34;&gt;/* 简写属性 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;transition-property&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all/property &lt;span class=&#34;token comment&#34;&gt;/* 所有属性过渡 / 指定属性过渡 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;transition-duration&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 5s &lt;span class=&#34;token comment&#34;&gt;/* 完成过渡效果时间，以秒和毫秒计算 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;transition-timing-function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; linear/ease/ease-in/ease-out/ease-in-out/&lt;span class=&#34;token function&#34;&gt;cubic-bezier&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 正常速度 / 由慢变快 / 慢速开始 / 慢速结束 / 慢速开始和结束 / 自定义 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;transition-delay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 2s &lt;span class=&#34;token comment&#34;&gt;/* 延时开始时间，以秒和毫秒计算 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* Safari 浏览器专用 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-transition-property&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;width&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-transition-duration&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;1s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-transition-timing-function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-transition-delay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;2s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;2d变形css3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2d变形css3&#34;&gt;#&lt;/a&gt; 2D 变形 (css3)&lt;/h1&gt;
&lt;p&gt;2D 变形可以实现元素的位移、旋转、倾斜、缩放等方式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;translate&lt;/code&gt;  方法，根据左 (X 轴) 和顶部 (Y 轴) 位置给定的参数，从当前元素位置移动&lt;/p&gt;
&lt;p&gt;可单独设置 x 轴和 y 轴，均可负值&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;50px，100px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 从左边元素移动 50 个像素，并从顶部移动 100 像素 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-ms-transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;50px&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;100px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* IE 9 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;50px&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;100px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari and Chrome */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;50%&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 走自己宽度的一半 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;transform-origin&lt;/code&gt;  方法是上一个方法中的附加，设置旋转元素的基点（旋转点）&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;transform-origin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 20% 40%&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 改变元素原点到 x 轴百分之 20，y 轴百分之 40 位置 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-ms-transform-origin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 20% 40%&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* IE 9 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-transform-origin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 20% 40%&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari and Chrome */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;transform-style&lt;/code&gt;  方式是让嵌套元素是怎样在三维空间中呈现&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;transform-style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; flat/preserve-3d &lt;span class=&#34;token comment&#34;&gt;/* 2D 展示 / 3D 展示 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-transform-style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; preserve-3d&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari and Chrome */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;rotate&lt;/code&gt;  方法，在一个给定度数顺时针旋转的元素。负值是允许的，这样是元素逆时针旋转&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rotate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;30deg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 顺时针旋转 30 度 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-ms-transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rotate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;30deg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* IE 9 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rotate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;30deg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari and Chrome */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;scale&lt;/code&gt;  方法，该元素增加或减少的大小，取决于宽度（X 轴）和高度（Y 轴）的参数&lt;/p&gt;
&lt;p&gt;可单独设置 x 轴和 y 轴，均可负值&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-ms-transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* IE 9 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 转变宽度为原来的大小的 2 倍，和其原始大小 3 倍的高度 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;skew&lt;/code&gt;  方法，根据 X 轴和 Y 轴位置给定的参数，使元素倾斜&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;skew&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;30deg&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;20deg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 元素在 X 轴和 Y 轴上倾斜 20 度 30 度 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-ms-transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;skew&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;30deg&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;20deg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* IE 9 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;skew&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;30deg&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;20deg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari and Chrome */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;skewX&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&amp;lt;angle&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;/* 表示只在 X 轴 (水平方向) 倾斜 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;skewY&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&amp;lt;angle&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;/* 表示只在 Y 轴 (垂直方向) 倾斜 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;matrix&lt;/code&gt;  方法和 2D 变换方法合并成一个&lt;/p&gt;
&lt;p&gt;有六个参数，包含旋转，缩放，移动（平移）和倾斜功能&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;0.866&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0.5&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;-0.5&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0.866&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 旋转 30 度 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-ms-transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;0.866&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0.5&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;-0.5&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0.866&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* IE 9 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;0.866&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0.5&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;-0.5&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0.866&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari and Chrome */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;3d变形css3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3d变形css3&#34;&gt;#&lt;/a&gt; 3D 变形 (css3)&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;rotateX&lt;/code&gt;  方法，沿着 X 立体旋转&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rotateX&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;120deg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rotateX&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;120deg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari 与 Chrome */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;rotateY&lt;/code&gt;  方法，沿着 Y 立体旋转&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rotateY&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;130deg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rotateY&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;130deg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari 与 Chrome */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;rotateZ&lt;/code&gt;  方法，沿着 Z 立体旋转&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rotateZ&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;140deg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rotateZ&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;140deg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari 与 Chrome */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;rotate3d&lt;/code&gt;  是上面三种的缩写&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;rotate3d&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;z&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;translate3d&lt;/code&gt;  是 2D 变形的升级，多了 Z 轴&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;translate3d&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;z&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;scale3d&lt;/code&gt;  也是 2D 变形的升级，多了 Z 轴&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;scale3d&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;z&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;prespective&lt;/code&gt;  方法，透视元素&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;perspective&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 500px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-perspective&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 500px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari and Chrome */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;prespective-origin&lt;/code&gt;  方法，改变 3D 元素底部位置&lt;/p&gt;
&lt;p&gt;需搭配上一个方法使用&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;perspective-origin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 10% 10%&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-perspective-origin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 10% 10%&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari and Chrome */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;backface-visibility&lt;/code&gt;  方法，定义元素在不面对屏幕时是否可见&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;backface-visibility&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; visible/hidden&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 可见 / 不可见 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-backface-visibility&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; hidden&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Chrome 、Safari */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-moz-backface-visibility&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; hidden&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Firefox */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-ms-backface-visibility&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; hidden&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Internet Explorer */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;css3动画&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css3动画&#34;&gt;#&lt;/a&gt; CSS3 动画&lt;/h1&gt;
&lt;p&gt;CSS3 可以创建动画，通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@keyframes&lt;/code&gt;  属性是创建动画&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;@keyframes mymove &lt;span class=&#34;token comment&#34;&gt;/* 此处的 mymove 是动画名称，由 animation 创造 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;0%&lt;/span&gt;   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;0px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;		&lt;span class=&#34;token comment&#34;&gt;/* 动画持续过程 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;25%&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;200px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;50%&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;75%&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;200px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;100%&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;0px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;@-webkit-keyframes mymove &lt;span class=&#34;token comment&#34;&gt;/* Safari and Chrome */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;0%&lt;/span&gt;   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;0px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;25%&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;200px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;50%&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;75%&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;200px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;100%&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;0px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;animation&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; animation-name animation-duration animation-timing-function animation-fill-mode animation-delay animation-iteration-count animation-direction&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;animation-name&lt;/code&gt;  规定 @keyframes 动画名称&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-duration: 1s&lt;/code&gt;  规定动画完成一次的时间，值为秒或毫秒&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-timing-function&lt;/code&gt;  规定动画播放速度，同 CSS3 过渡的 &lt;code&gt;transition-timing-function&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-fill-mode: forwards/backwards/both&lt;/code&gt;  规定动画不播放时的状态&lt;/p&gt;
&lt;p&gt;&lt;code&gt;forwards&lt;/code&gt;  为动画结束后应用什么状态（状态由 animation-iteration-count 提供）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;backwards&lt;/code&gt;  动画将应用在 animation-delay 定义期间启动动画的第一次迭代的关键帧中定义的属性值。这些都是 from 关键帧中的值（当 animation-direction 为 &amp;quot;normal&amp;quot; 或 &amp;quot;alternate&amp;quot; 时）或 to 关键帧中的值（当 animation-direction 为 &amp;quot;reverse&amp;quot; 或 &amp;quot;alternate-reverse&amp;quot; 时）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;both&lt;/code&gt;  动画遵循 forwards 和 backwards 的规则。也就是说，动画会在两个方向上扩展动画属性&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-delay: 1s&lt;/code&gt;  定义动画什么时候开始，值为秒或毫秒，允许负值，但负值在首次播放会跳过设置的秒数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-iteration-count: 1&lt;/code&gt;  定义动画应该播放多少次&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-play-state: paused/running&lt;/code&gt;  指定动画是否正在运行或已暂停，一般用不上&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;animation-name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; myfirst&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;animation-duration&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;animation-timing-function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; linear&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;animation-delay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 2s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;animation-iteration-count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; infinite&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;animation-direction&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; alternate&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;animation-play-state&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; running&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* Safari 与 Chrome: */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-animation-name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; myfirst&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-animation-duration&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-animation-timing-function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; linear&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-animation-delay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 2s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-animation-iteration-count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; infinite&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-animation-direction&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; alternate&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-animation-play-state&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; running&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 缩写 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;animation&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; myfirst 5s linear 2s infinite alternate&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* Safari 与 Chrome: */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-animation&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; myfirst 5s linear 2s infinite alternate&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;css3多列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css3多列&#34;&gt;#&lt;/a&gt; CSS3 多列&lt;/h1&gt;
&lt;p&gt;创建多列&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;column-count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 3&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 讲文本分为几列 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-column-count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 3&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Chrome, Safari, Opera */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-moz-column-count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 3&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Firefox */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;column-gap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 40px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 每列之间的距离 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-column-gap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 40px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Chrome, Safari, Opera */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-moz-column-gap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 40px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Firefox */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;column-rule-style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; solid &lt;span class=&#34;token comment&#34;&gt;/* 每列之间的边框样式 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-column-rule-style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; solid&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Chrome, Safari, Opera */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-moz-column-rule-style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; solid&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Firefox */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;column-rule-width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 1px &lt;span class=&#34;token comment&#34;&gt;/* 每列之间的边框厚度 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-column-rule-width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 1px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Chrome, Safari, Opera */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-moz-column-rule-width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 1px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Firefox */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;column-rule-color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red &lt;span class=&#34;token comment&#34;&gt;/* 每列之间的边框颜色 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-column-rule-color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; lightblue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Chrome, Safari, Opera */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-moz-column-rule-color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; lightblue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Firefox */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;column-rule-*&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 1px solid red &lt;span class=&#34;token comment&#34;&gt;/* 上三个属性的缩写 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-column-rule&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 1px solid red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Chrome, Safari, Opera */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-moz-column-rule&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 1px solid red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Firefox */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;column-span&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 1/all &lt;span class=&#34;token comment&#34;&gt;/* 某个元素应该跨越多少列 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-column-span&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 1/all&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari and Chrome */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;column-width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 指定列的宽度 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-moz-column-width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Firefox */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-column-width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari and Chrome */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px 3&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 指定列的宽度和列数 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-columns&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;100px 3&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari and Chrome */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-moz-columns&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;100px 3&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Firefox */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;css布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css布局&#34;&gt;#&lt;/a&gt; CSS 布局&lt;/h1&gt;
&lt;h2 id=&#34;flex布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flex布局&#34;&gt;#&lt;/a&gt; flex 布局&lt;/h2&gt;
&lt;p&gt;传统布局兼容性好，但布局繁琐，有局限性而且不适应移动端，现在的前端都要求适应移动端，那么传统布局就不适合了&lt;/p&gt;
&lt;p&gt;flex 布局操作方便，布局简单，移动端应用广泛，但对 PC 端的浏览器支持较差，对 IE11 或更低的只支持部分甚至不支持&lt;/p&gt;
&lt;p&gt;flex 布局原理：给父盒子添加 flex 属性来控制子盒子的位置和排列方式&lt;/p&gt;
&lt;p&gt;当我们为父盒子设为 flex 布局后，子元素的 &lt;code&gt;float&lt;/code&gt; 、 &lt;code&gt;clear&lt;/code&gt;  和 &lt;code&gt;vertical-align&lt;/code&gt;  会失效&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; flex&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; -webkit-flex&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;主轴与侧轴&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主轴与侧轴&#34;&gt;#&lt;/a&gt; 主轴与侧轴&lt;/h3&gt;
&lt;p&gt;在 flex 布局中，分为主轴与侧轴两个方向，也叫行和列，xy 轴&lt;/p&gt;
&lt;p&gt;默认主轴方向为 x 轴，水平向右&lt;/p&gt;
&lt;p&gt;默认侧轴方向为 y 轴，水平向下&lt;/p&gt;
&lt;h3 id=&#34;flex布局属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flex布局属性&#34;&gt;#&lt;/a&gt; flex 布局属性&lt;/h3&gt;
&lt;h4 id=&#34;flex分配空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flex分配空间&#34;&gt;#&lt;/a&gt; flex: 分配空间&lt;/h4&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;flex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; flex-grow flex-shrink flex-basis&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 常见属性有&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flex: 1 = flex: 1 1 0%&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flex: 2 = flex: 2 1 0%&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flex: auto = flex: 1 1 auto&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flex: none = flex: 0 0 auto，常用于固定尺寸不伸缩&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;*/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 项目将相对于其他灵活的项目进行扩展的量 / 规定项目将相对于其他灵活的项目进行收缩的量 / 项目长度 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;flex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; auto &lt;span class=&#34;token comment&#34;&gt;/* 相当于 1 1 auto */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;flex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; none &lt;span class=&#34;token comment&#34;&gt;/* 相当于 0 0 auto */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;flex-direction设置主轴方向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flex-direction设置主轴方向&#34;&gt;#&lt;/a&gt; flex-direction: 设置主轴方向&lt;/h4&gt;
&lt;p&gt;此属性决定主轴的方向（项目的排列方向）&lt;/p&gt;
&lt;p&gt;主轴和侧轴是会变化的，就是看此属性设置谁为主，剩下为侧，子元素根据主轴来排列&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;flex-direction&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; row/row-reverse/column/column-reverse &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			   &lt;span class=&#34;token comment&#34;&gt;/* 默认从左到右 / 从右到左 / 从上到下 / 从上到下 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;flex-wrap设置子元素换行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flex-wrap设置子元素换行&#34;&gt;#&lt;/a&gt; flex-wrap: 设置子元素换行&lt;/h4&gt;
&lt;p&gt;默认情况下，项目都排在一条线上（轴线），flex 布局默认是不换行的，如果需要换行就需要设置此属性&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;flex-wrap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; wrap/wrap-reverse &lt;span class=&#34;token comment&#34;&gt;/* 换行 / 相反换行 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-flex-wrap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; wrap&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;flex-flow复合属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flex-flow复合属性&#34;&gt;#&lt;/a&gt; flex-flow: 复合属性&lt;/h4&gt;
&lt;p&gt;此属性是上两个属性的合并&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;flex-flow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; row wrap&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-flex-flow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; row-reverse wrap&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari 6.1+ */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;flex-grow&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flex-grow&#34;&gt;#&lt;/a&gt; flex-grow&lt;/h4&gt;
&lt;p&gt;当容器不换行时，容器宽度会不够分，弹性元素会根据此元素决定&lt;/p&gt;
&lt;p&gt;定义项目的放大比例（容器宽度 &amp;gt; 元素总宽度时如何伸展）&lt;/p&gt;
&lt;p&gt;默认为 0，既如果有剩余空间也不放大&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;flex-grow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果所有项目的 &lt;code&gt;flex-grow&lt;/code&gt;  属性都为 1，则它们将等分剩余空间（如果有的话）&lt;/p&gt;
&lt;p&gt;如果一个项目的 &lt;code&gt;flex-grow&lt;/code&gt;  属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍&lt;/p&gt;
&lt;p&gt;弹性容器的宽度正好等于元素宽度总和，无多余宽度，此时无论 &lt;code&gt;flex-grow&lt;/code&gt;  是什么值都不会生效&lt;/p&gt;
&lt;h4 id=&#34;flex-shrink&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flex-shrink&#34;&gt;#&lt;/a&gt; flex-shrink&lt;/h4&gt;
&lt;p&gt;定义了项目的缩小比例（容器宽度 &amp;lt; 元素总宽度时如何收缩），默认为 1，即如果空间不足，该项目将缩小&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;flex-shrink&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果所有项目的 &lt;code&gt;flex-shrink&lt;/code&gt;  属性都为 1，当空间不足时，都将等比例缩小&lt;/p&gt;
&lt;p&gt;如果一个项目的 &lt;code&gt;flex-shrink&lt;/code&gt;  属性为 0，其他项目都为 1，则空间不足时，前者不缩小&lt;/p&gt;
&lt;p&gt;在容器宽度有剩余时， &lt;code&gt;flex-shrink&lt;/code&gt;  也是不会生效的&lt;/p&gt;
&lt;h4 id=&#34;flex-basis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flex-basis&#34;&gt;#&lt;/a&gt; flex-basis&lt;/h4&gt;
&lt;p&gt;设置的是元素在主轴上的初始尺寸，所谓的初始尺寸就是元素在 &lt;code&gt;flex-grow&lt;/code&gt;  和 &lt;code&gt;flex-shrink&lt;/code&gt;  生效前的尺寸&lt;/p&gt;
&lt;p&gt;浏览器根据这个属性，计算主轴是否有多余空间，默认值为 &lt;code&gt;auto&lt;/code&gt; ，即项目的本来大小，如设置了 &lt;code&gt;width&lt;/code&gt;  则元素尺寸由 &lt;code&gt;width/height&lt;/code&gt;  决定（主轴方向），没有设置则由内容决定&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;flex-basis&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0/auto&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当设置为 0 的是，会根据内容撑开&lt;/p&gt;
&lt;p&gt;可以设为跟 &lt;code&gt;width&lt;/code&gt;  或 &lt;code&gt;height&lt;/code&gt;  属性一样的值（比如 350px），则项目将占据固定空间&lt;/p&gt;
&lt;h4 id=&#34;justify-content设置主轴上的子元素排列方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#justify-content设置主轴上的子元素排列方式&#34;&gt;#&lt;/a&gt; justify-content: 设置主轴上的子元素排列方式&lt;/h4&gt;
&lt;p&gt;使用前要确定好主轴&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; center&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;/* 居中排列 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; start&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;/* 从行首开始排列 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; end&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;token comment&#34;&gt;/* 从行尾开始排列 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; flex-start&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 从行首起始位置开始排列 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; flex-end&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;/* 从行尾位置开始排列 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; left&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;/* 一个挨一个在对齐容器得左边缘 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; right&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;/* 元素以容器右边缘为基准，一个挨着一个对齐，*/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; space-around&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari 6.1+ */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 基线对齐 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; baseline&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; first baseline&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; last baseline&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 分配弹性元素方式 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; space-between&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;/* 均匀排列每个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                   首个元素放置于起点，末尾元素放置于终点 */&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; space-around&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;/* 均匀排列每个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                   每个元素周围分配相同的空间 */&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; space-evenly&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;/* 均匀排列每个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                   每个元素之间的间隔相等 */&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; stretch&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;/* 均匀排列每个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                   &#39;auto&#39;-sized 的元素会被拉伸以适应容器的大小 */&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 溢出对齐方式 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; safe center&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; unsafe center&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 全局值 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; inherit&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; initial&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;justify-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; unset&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;align-items设置侧轴上的单行子元素排列方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#align-items设置侧轴上的单行子元素排列方式&#34;&gt;#&lt;/a&gt; align-items: 设置侧轴上的单行子元素排列方式&lt;/h4&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-items&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; stretch	&lt;span class=&#34;token comment&#34;&gt;/* 默认值，元素拉伸适应屏幕 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-items&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; center		&lt;span class=&#34;token comment&#34;&gt;/* 垂直居中 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-items&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; flex-start &lt;span class=&#34;token comment&#34;&gt;/* 位于容器最上方 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-items&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; flex-end	&lt;span class=&#34;token comment&#34;&gt;/* 位于容器最下方 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-items&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; baseline 	&lt;span class=&#34;token comment&#34;&gt;/* 位于容器的基线上 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-align-items&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; center&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari 7.0+ */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;align-content设置侧轴上的多行子元素排列方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#align-content设置侧轴上的多行子元素排列方式&#34;&gt;#&lt;/a&gt; align-content: 设置侧轴上的多行子元素排列方式&lt;/h4&gt;
&lt;p&gt;父元素设置了 flex 属性并且设置了 &lt;code&gt;flex-direction:row&lt;/code&gt;  和 &lt;code&gt;flex-wrap:wrap&lt;/code&gt; ，此属性才生效&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; stretch		 &lt;span class=&#34;token comment&#34;&gt;/* 默认值，元素拉伸适应屏幕 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; center		 &lt;span class=&#34;token comment&#34;&gt;/* 垂直居中 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; flex-start	 &lt;span class=&#34;token comment&#34;&gt;/* 位于容器最上方 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; flex-end		 &lt;span class=&#34;token comment&#34;&gt;/* 位于容器最下方 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; space-between &lt;span class=&#34;token comment&#34;&gt;/* 均匀排列每个元素，首个元素放置于起点，末尾元素放置于终点 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; space-around	 &lt;span class=&#34;token comment&#34;&gt;/* 均匀排列每个元素，每个元素周围分配相同的空间 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-align-content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; center&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari 7.0+ */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;align-self设置侧轴上的某个子元素排列方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#align-self设置侧轴上的某个子元素排列方式&#34;&gt;#&lt;/a&gt; align-self: 设置侧轴上的某个子元素排列方式&lt;/h4&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-self&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; auto		&lt;span class=&#34;token comment&#34;&gt;/* 默认值，继承父容器 align-items，没有父容器则 stretch */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-self&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; stretch		&lt;span class=&#34;token comment&#34;&gt;/* 元素拉伸适应屏幕 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-self&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; center		&lt;span class=&#34;token comment&#34;&gt;/* 垂直居中 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-self&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; flex-start	&lt;span class=&#34;token comment&#34;&gt;/* 位于容器最上方 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-self&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; flex-end	&lt;span class=&#34;token comment&#34;&gt;/* 位于容器最下方 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;align-self&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; baseline	&lt;span class=&#34;token comment&#34;&gt;/* 位于容器的基线上 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-align-items&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; flex-start&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* Safari 7.0+ */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;order子元素排列顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#order子元素排列顺序&#34;&gt;#&lt;/a&gt; order: 子元素排列顺序&lt;/h4&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 1 &lt;span class=&#34;token comment&#34;&gt;/* 值越大则该元素越往后，可以为负值 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;-webkit-order&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;grid布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#grid布局&#34;&gt;#&lt;/a&gt; Grid 布局&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;flex&lt;/code&gt;  布局是轴线布局，只能指定项目针对轴线的位置，可以看作是一维布局&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grid&lt;/code&gt;  布局则是讲容器划分成行或列，产生单元格，指定项目所在单元格，可以看作是二维布局&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fr&lt;/code&gt;  属性是此布局的专属单位，代表布局的剩余空间&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; grid&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;grid-template-areas&lt;/code&gt;  属性用于设置网格布局&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grid-area&lt;/code&gt;  属性用于对网格元素命名&lt;/p&gt;
&lt;p&gt;命名过后的网格元素可以被第一个属性阴用，每行由单引号 &lt;code&gt;&#39;&#39;&lt;/code&gt;  定义，空格分隔， &lt;code&gt;.&lt;/code&gt;  号为没有名称的网格项&lt;/p&gt;
&lt;p&gt;下方一个实例&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.item1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;grid-area&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; myArea&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.grid-container&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; grid&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;grid-template-areas&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;myArea myArea . . .&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;grid-gap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 10px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;background-color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; #2196F3&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 10px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.grid-container &gt; div&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;background-color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rgba&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;255&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 255&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 255&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 0.8&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;text-align&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; center&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 20px 0&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 30px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;grid-area 属性&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;你可以使用 &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;em&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;grid-area&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;em&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; 属性来命名网格元素。&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;命名的网格元素可以通过容器的 grid-template-areas 属性来引用。&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;以下实例 item1 命名为 &#34;myArea&#34;, 并跨越 2 列：&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;grid-container&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;item1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;item2&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;2&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;item3&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;3&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;item4&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;4&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;item5&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;5&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;item6&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;6&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;item7&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;7&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;item8&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;8&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;item9&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;9&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;  属性用于设置网格容器中的列数和宽度&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 20px 30px auto 40px &lt;span class=&#34;token comment&#34;&gt;/* 一个 4 列的网格容器，并每列设置尺寸 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;grid-auto-columns&lt;/code&gt;  属性用于设置网格容器中的默认列宽度&lt;/p&gt;
&lt;p&gt;会被上面属性覆盖&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;grid-auto-columns&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 50px &lt;span class=&#34;token comment&#34;&gt;/* 每个网格容器列宽 50px */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;grid-template-rows&lt;/code&gt;  属性用于设置网格容器中的每行高度&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 50px 50px 50px &lt;span class=&#34;token comment&#34;&gt;/* 每个值对应一行，每行 50px */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;grid-auto-rows&lt;/code&gt;  属性用于设置网格容器中的默认行高度&lt;/p&gt;
&lt;p&gt;会被上面属性覆盖&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;grid-auto-rows&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 150px &lt;span class=&#34;token comment&#34;&gt;/* 每个网格容器 150px 高度 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;grid-auto-flow&lt;/code&gt;  属性用于设置网格容器中的元素排列布局&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;grid-auto-flow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; row			&lt;span class=&#34;token comment&#34;&gt;/* 默认值，填充满每一行，可能会增加新列 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;grid-auto-flow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; column		&lt;span class=&#34;token comment&#34;&gt;/* 默认值，填充满每一列，可能会增加新列 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;grid-auto-flow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; dense		&lt;span class=&#34;token comment&#34;&gt;/* 如果后面出现了稍小的元素，则会试图去填充网格中前面留下的空白。这样做会								 填上稍大元素留下的空白，但同时也可能导致原来出现的次序被打乱 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;grid-auto-flow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; row dense	&lt;span class=&#34;token comment&#34;&gt;/* 按行来填充网格中前面留下的空白 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;grid-auto-flow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; column dense&lt;span class=&#34;token comment&#34;&gt;/* 按列来填充网格中前面留下的空白 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;row-gap&lt;/code&gt;  属性用于设置网格行间距&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;row-gap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 50px&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;column-gap&lt;/code&gt;  属性用于设置网格列间距&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;column-gap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 20px&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;gap&lt;/code&gt;  属性用于设置网格行与列间距&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;gap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 20px&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;grid&lt;/code&gt;  属性的布局对齐方式与 &lt;code&gt;flex&lt;/code&gt;  类似，使用 &lt;code&gt;flex&lt;/code&gt;  的对齐属性&lt;/p&gt;
&lt;h1 id=&#34;css3多媒体查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css3多媒体查询&#34;&gt;#&lt;/a&gt; CSS3 多媒体查询&lt;/h1&gt;
&lt;p&gt;多媒体查询在 CSS2 就有，是针对不同的媒体类型 (包括显示器、便携设备、电视机，等等) 设置不同的样式规则，但对于很多设备上支持不友好&lt;/p&gt;
&lt;p&gt;CSS3 的多媒体查询继承了 CSS2 的多媒体类型，取代了查找设备类型，CSS3 根据设置自适应设备显示&lt;/p&gt;
&lt;p&gt;媒体查询可以做很多事，如 &lt;code&gt;viewport&lt;/code&gt;  高宽，设备的高宽，手机横屏竖屏，分辨率等&lt;/p&gt;
&lt;h2 id=&#34;语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语法&#34;&gt;#&lt;/a&gt; 语法&lt;/h2&gt;
&lt;p&gt;由多种媒体组成，可以包含一个或多个表达式，表达式根据条件是否成立返回 true 或 false&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@media&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt;|&lt;span class=&#34;token keyword&#34;&gt;only&lt;/span&gt; mediatype &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mediafeature &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt;|&lt;span class=&#34;token keyword&#34;&gt;or&lt;/span&gt;|&lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; mediafeature&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  CSS-Code&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;not:&lt;/strong&gt;  not 运算符用于否定媒体查询，如果不满足这个条件则返回 true，否则返回 false。 如果出现在以逗号分隔的查询列表中，它将仅否定应用了该查询的特定查询。 如果使用 not 运算符，则还必须指定媒体类型，比如 @media not print（非打印设备）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;only:&lt;/strong&gt; only 运算符仅在整个查询匹配时才用于应用样式，并且对于防止较早的浏览器应用所选样式很有用。 当不使用 only 时，旧版本的浏览器会将 screen and (max-width: 500px) 简单地解释为 screen，忽略查询的其余部分，并将其样式应用于所有屏幕。 如果使用 only 运算符，则还必须指定媒体类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;,:&lt;/strong&gt; 逗号用于将多个媒体查询合并为一个规则。 逗号分隔列表中的每个查询都与其他查询分开处理。 因此，如果列表中的任何查询为 true，则整个 media 语句均返回 true。 换句话说，列表的行为类似于逻辑或 or 运算符&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;and&lt;/strong&gt;: and 操作符用于将多个媒体查询规则组合成单条媒体查询，当每个查询规则都为真时则该条媒体查询为真，它还用于将媒体功能与媒体类型结合在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 在不同媒体上用不同文件 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 宽度大于 900px 的屏幕使用该样式 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;stylesheet&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;media&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;screen and (min-width: 900px)&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;widescreen.css&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 宽度小于或等于 600px 的屏幕使用该样式 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;stylesheet&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;media&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;screen and (max-width: 600px)&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;smallscreen.css&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;css3-多媒体类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css3-多媒体类型&#34;&gt;#&lt;/a&gt; CSS3 多媒体类型&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;值&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;all&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于所有多媒体类型设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;print&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于打印机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;screen&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于电脑屏幕，平板，智能手机等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;speech&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于屏幕阅读器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在屏幕可视窗口尺寸小于 480 像素的设备上修改背景颜色&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@media&lt;/span&gt; screen &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;max-width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 480px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;background-color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; lightgreen&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;不同类型的判定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不同类型的判定&#34;&gt;#&lt;/a&gt; 不同类型的判定&lt;/h2&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 超小设备 (手机，600px 以下屏幕设备) */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@media&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;only&lt;/span&gt; screen &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;max-width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 600px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;.example&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 小设备 (平板电脑和大型手机，600 像素及以上) */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@media&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;only&lt;/span&gt; screen &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;min-width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 600px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;.example&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; green&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 中型设备（平板电脑，768 像素及以上） */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@media&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;only&lt;/span&gt; screen &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;min-width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 768px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;.example&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; blue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 大型设备（笔记本电脑 / 台式机，992 像素及以上） */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@media&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;only&lt;/span&gt; screen &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;min-width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 992px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;.example&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; orange&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 超大型设备（大型笔记本电脑和台式机，1200 像素及以上） */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@media&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;only&lt;/span&gt; screen &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;min-width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 1200px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;.example&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; pink&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;calp函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#calp函数&#34;&gt;#&lt;/a&gt; calp () 函数&lt;/h1&gt;
&lt;p&gt;这个是一个值，运用在尺寸计算上&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;calc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;100% + 100px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;calc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;100% - 100px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;calc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;100% * 100px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;calc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;100% / 100px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上述代码意思是，使元素在百分百宽度基础上加减乘除 100px&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/Symbol/</guid>
            <title>Symbol</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/Symbol/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h2&gt;
&lt;p&gt;ES6 引入了一种新的原始数据类型 Symbol ，表示独一无二的值，最大的用法是用来定义对象的唯一属性名&lt;/p&gt;
&lt;p&gt;ES6 数据类型除了 Number 、 String 、 Boolean 、 Object、 null 和 undefined ，还新增了 Symbol&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;基本用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本用法&#34;&gt;#&lt;/a&gt; 基本用法&lt;/h2&gt;
&lt;p&gt;Symbol 函数栈不能用 new 命令，因为 Symbol 是原始数据类型，不是对象。可以接受一个字符串作为参数，为新创建的 Symbol 提供描述，用来显示在控制台或者作为字符串的时候使用，便于区分&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let sy = Symbol(&#34;KK&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console.log(sy);   // Symbol(KK)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;typeof(sy);        // &#34;symbol&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// 相同参数 Symbol() 返回的值不相等&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let sy1 = Symbol(&#34;kk&#34;); &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sy === sy1;       // false&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;使用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用场景&#34;&gt;#&lt;/a&gt; 使用场景&lt;/h2&gt;
&lt;h3 id=&#34;作为属性名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作为属性名&#34;&gt;#&lt;/a&gt; 作为属性名&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;用法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于每一个 Symbol 的值都是不相等的，所以 Symbol 作为对象的属性名，可以保证属性不重名&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let sy = Symbol(&#34;key1&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// 写法1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let syObject = &amp;#123;&amp;#125;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;syObject[sy] = &#34;kk&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console.log(syObject);    // &amp;#123;Symbol(key1): &#34;kk&#34;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// 写法2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let syObject = &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  [sy]: &#34;kk&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console.log(syObject);    // &amp;#123;Symbol(key1): &#34;kk&#34;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// 写法3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let syObject = &amp;#123;&amp;#125;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object.defineProperty(syObject, sy, &amp;#123;value: &#34;kk&#34;&amp;#125;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console.log(syObject);   // &amp;#123;Symbol(key1): &#34;kk&#34;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Symbol 作为对象属性名时不能用。运算符，要用方括号。因为。运算符后面是字符串，所以取到的是字符串 sy 属性，而不是 Symbol 值 sy 属性&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let syObject = &amp;#123;&amp;#125;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;syObject[sy] = &#34;kk&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;syObject[sy];  // &#34;kk&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;syObject.sy;   // undefined&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;注意点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意点&#34;&gt;#&lt;/a&gt; 注意点&lt;/h3&gt;
&lt;p&gt;Symbol 值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问。但是不会出现在 for...in 、 for...of 的循环中，也不会被 Object.keys () 、 Object.getOwnPropertyNames () 返回。如果要读取到一个对象的 Symbol 属性，可以通过 Object.getOwnPropertySymbols () 和 Reflect.ownKeys () 取到&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let syObject = &amp;#123;&amp;#125;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;syObject[sy] = &#34;kk&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console.log(syObject);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;for (let i in syObject) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  console.log(i);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;    // 无输出&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object.keys(syObject);                     // []&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object.getOwnPropertySymbols(syObject);    // [Symbol(key1)]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Reflect.ownKeys(syObject);                 // [Symbol(key1)]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;定义常量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义常量&#34;&gt;#&lt;/a&gt; 定义常量&lt;/h3&gt;
&lt;p&gt;在 ES5 使用字符串表示常量。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_RED = &#34;red&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_YELLOW = &#34;yellow&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_BLUE = &#34;blue&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;但是用字符串不能保证常量是独特的，这样会引起一些问题：&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_RED = &#34;red&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_YELLOW = &#34;yellow&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_BLUE = &#34;blue&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const MY_BLUE = &#34;blue&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;function ColorException(message) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   this.message = message;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   this.name = &#34;ColorException&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;function getConstantName(color) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    switch (color) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        case COLOR_RED :&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            return &#34;COLOR_RED&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        case COLOR_YELLOW :&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            return &#34;COLOR_YELLOW &#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        case COLOR_BLUE:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            return &#34;COLOR_BLUE&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        case MY_BLUE:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            return &#34;MY_BLUE&#34;;         &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        default:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            throw new ColorException(&#34;Can&#39;t find this color&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;try &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   var color = &#34;green&#34;; // green 引发异常&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   var colorName = getConstantName(color);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125; catch (e) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   var colorName = &#34;unknown&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   console.log(e.message, e.name); // 传递异常对象到错误处理&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;但是使用 Symbol 定义常量，这样就可以保证这一组常量的值都不相等。用 Symbol 来修改上面的例子&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_RED = Symbol(&#34;red&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_YELLOW = Symbol(&#34;yellow&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_BLUE = Symbol(&#34;blue&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;function ColorException(message) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   this.message = message;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   this.name = &#34;ColorException&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;function getConstantName(color) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    switch (color) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        case COLOR_RED :&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            return &#34;COLOR_RED&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        case COLOR_YELLOW :&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            return &#34;COLOR_YELLOW &#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        case COLOR_BLUE:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            return &#34;COLOR_BLUE&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        default:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            throw new ColorException(&#34;Can&#39;t find this color&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;try &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   var color = &#34;green&#34;; // green 引发异常&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   var colorName = getConstantName(color);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125; catch (e) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   var colorName = &#34;unknown&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   console.log(e.message, e.name); // 传递异常对象到错误处理&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Symbol 的值是唯一的，所以不会出现相同值得常量，即可以保证 switch 按照代码预想的方式执行&lt;/p&gt;
&lt;h3 id=&#34;symbolfor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#symbolfor&#34;&gt;#&lt;/a&gt; Symbol.for()&lt;/h3&gt;
&lt;p&gt;Symbol.for () 类似单例模式，首先会在全局搜索被登记的 Symbol 中是否有该字符串参数作为名称的 Symbol 值，如果有即返回该 Symbol 值，若没有则新建并返回一个以该字符串参数为名称的 Symbol 值，并登记在全局环境中供搜索&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let yellow = Symbol(&#34;Yellow&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let yellow1 = Symbol.for(&#34;Yellow&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yellow === yellow1;      // false&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let yellow2 = Symbol.for(&#34;Yellow&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yellow1 === yellow2;     // true&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;symbolkeyfor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#symbolkeyfor&#34;&gt;#&lt;/a&gt; Symbol.keyFor()&lt;/h3&gt;
&lt;p&gt;Symbol.keyFor () 返回一个已登记的 Symbol 类型值的 key ，用来检测该字符串参数作为名称的 Symbol 值是否已被登记&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let yellow1 = Symbol.for(&#34;Yellow&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Symbol.keyFor(yellow1);    // &#34;Yellow&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/Reflect%E4%B8%8EProxy/</guid>
            <title>Reflect与Proxy</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/Reflect%E4%B8%8EProxy/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:22:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h2&gt;
&lt;p&gt;Proxy 与 Reflect 是 ES6 为了操作对象引入的 API 。&lt;/p&gt;
&lt;p&gt;Proxy 可以对目标对象的读取、函数调用等操作进行拦截，然后进行操作处理。它不直接操作对象，而是像代理模式，通过对象的代理对象进行操作，在进行这些操作时，可以添加一些需要的额外操作。&lt;/p&gt;
&lt;p&gt;Reflect 可以用于获取目标对象的行为，它与 Object 类似，但是更易读，为操作对象提供了一种更优雅的方式。它的方法与 Proxy 是对应的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;基本用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本用法&#34;&gt;#&lt;/a&gt; 基本用法&lt;/h2&gt;
&lt;h3 id=&#34;proxy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#proxy&#34;&gt;#&lt;/a&gt; Proxy&lt;/h3&gt;
&lt;p&gt;一个 Proxy 对象由两个部分组成： target 、 handler 。在通过 Proxy 构造函数生成实例对象时，需要提供这两个参数。 target 即目标对象， handler 是一个对象，声明了代理 target 的指定行为。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let target = &amp;#123;
    name: &#39;Tom&#39;,
    age: 24
&amp;#125;
let handler = &amp;#123;
    get: function(target, key) &amp;#123;
        console.log(&#39;getting &#39;+key);
        return target[key]; // 不是target.key
    &amp;#125;,
    set: function(target, key, value) &amp;#123;
        console.log(&#39;setting &#39;+key);
        target[key] = value;
    &amp;#125;
&amp;#125;
let proxy = new Proxy(target, handler)
proxy.name     // 实际执行 handler.get
proxy.age = 25 // 实际执行 handler.set
// getting name
// setting age
// 25
 
// target 可以为空对象
let targetEpt = &amp;#123;&amp;#125;
let proxyEpt = new Proxy(targetEpt, handler)
// 调用 get 方法，此时目标对象为空，没有 name 属性
proxyEpt.name // getting name
// 调用 set 方法，向目标对象中添加了 name 属性
proxyEpt.name = &#39;Tom&#39;
// setting name
// &amp;quot;Tom&amp;quot;
// 再次调用 get ，此时已经存在 name 属性
proxyEpt.name
// getting name
// &amp;quot;Tom&amp;quot;
 
// 通过构造函数新建实例时其实是对目标对象进行了浅拷贝，因此目标对象与代理对象会互相
// 影响
targetEpt
// &amp;#123;name: &amp;quot;Tom&amp;quot;&amp;#125;
 
// handler 对象也可以为空，相当于不设置拦截操作，直接访问目标对象
let targetEmpty = &amp;#123;&amp;#125;
let proxyEmpty = new Proxy(targetEmpty,&amp;#123;&amp;#125;)
proxyEmpty.name = &amp;quot;Tom&amp;quot;
targetEmpty // &amp;#123;name: &amp;quot;Tom&amp;quot;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;实例方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实例方法&#34;&gt;#&lt;/a&gt; 实例方法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;get(target, propKey, receiver)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于 target 对象上 propKey 读取操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let exam =&amp;#123;
    name: &amp;quot;Tom&amp;quot;,
    age: 24
&amp;#125;
let proxy = new Proxy(exam, &amp;#123;
  get(target, propKey, receiver) &amp;#123;
    console.log(&#39;Getting &#39; + propKey);
    return target[propKey];
  &amp;#125;
&amp;#125;)
proxy.name 
// Getting name
// &amp;quot;Tom&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get () 方法可以继承&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let proxy = new Proxy(&amp;#123;&amp;#125;, &amp;#123;
  get(target, propKey, receiver) &amp;#123;
      // 实现私有属性读取保护
      if(propKey[0] === &#39;_&#39;)&amp;#123;
          throw new Erro(`Invalid attempt to get private     &amp;quot;$&amp;#123;propKey&amp;#125;&amp;quot;`);
      &amp;#125;
      console.log(&#39;Getting &#39; + propKey);
      return target[propKey];
  &amp;#125;
&amp;#125;);
 
let obj = Object.create(proxy);
obj.name
// Getting name
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;set(target,propKey,value,receiver)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于拦截 target 对象上的 propKey 的赋值操作。如果目标对象自身的某个属性，不可写且不可配置，那么 set 方法不起作用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let validator = &amp;#123;
    set: function(obj, prop, value) &amp;#123;
        if (prop === &#39;age&#39;) &amp;#123;
            if (!Number.isInteger(value)) &amp;#123;
                throw new TypeError(&#39;The age is not an integer&#39;);
            &amp;#125;
            if (value &amp;gt; 200) &amp;#123;
                throw new RangeError(&#39;The age seems invalid&#39;);
            &amp;#125;
        &amp;#125;
        // 对于满足条件的 age 属性以及其他属性，直接保存
        obj[prop] = value;
    &amp;#125;
&amp;#125;;
let proxy= new Proxy(&amp;#123;&amp;#125;, validator)
proxy.age = 100;
proxy.age           // 100
proxy.age = &#39;oppps&#39; // 报错
proxy.age = 300     // 报错
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第四个参数 receiver 表示原始操作行为所在对象，一般是 Proxy 实例本身&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const handler = &amp;#123;
    set: function(obj, prop, value, receiver) &amp;#123;
        obj[prop] = receiver;
    &amp;#125;
&amp;#125;;
const proxy = new Proxy(&amp;#123;&amp;#125;, handler);
proxy.name= &#39;Tom&#39;;
proxy.name=== proxy // true
 
const exam = &amp;#123;&amp;#125;
Object.setPrototypeOf(exam, proxy)
exam.name = &amp;quot;Tom&amp;quot;
exam.name === exam // true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意，严格模式下，set 代理如果没有返回 true，就会报错&lt;/p&gt;
&lt;h3 id=&#34;applytarget-ctx-args&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#applytarget-ctx-args&#34;&gt;#&lt;/a&gt; apply(target, ctx, args)&lt;/h3&gt;
&lt;p&gt;用于拦截函数的调用、call 和 reply 操作。target 表示目标对象，ctx 表示目标对象上下文，args 表示目标对象的参数数组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function sub(a, b)&amp;#123;
    return a - b;
&amp;#125;
let handler = &amp;#123;
    apply: function(target, ctx, args)&amp;#123;
        console.log(&#39;handle apply&#39;);
        return Reflect.apply(...arguments);
    &amp;#125;
&amp;#125;
let proxy = new Proxy(sub, handler)
proxy(2, 1) 
// handle apply
// 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;has(target, propKey)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于拦截 HasProperty 操作，即在判断 target 对象是否存在 propKey 属性时，会被这个方法拦截。此方法不判断一个属性是对象自身的属性，还是继承的属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let  handler = &amp;#123;
    has: function(target, propKey)&amp;#123;
        console.log(&amp;quot;handle has&amp;quot;);
        return propKey in target;
    &amp;#125;
&amp;#125;
let exam = &amp;#123;name: &amp;quot;Tom&amp;quot;&amp;#125;
let proxy = new Proxy(exam, handler)
&#39;name&#39; in proxy
// handle has
// true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：此方法不拦截 for ... in 循环。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;construct(target, args)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于拦截 new 命令。返回值必须为对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let handler = &amp;#123;
    construct: function (target, args, newTarget) &amp;#123;
        console.log(&#39;handle construct&#39;)
        return Reflect.construct(target, args, newTarget)  
    &amp;#125;
&amp;#125;
class Exam &amp;#123; 
    constructor (name) &amp;#123;  
        this.name = name 
    &amp;#125;
&amp;#125;
let ExamProxy = new Proxy(Exam, handler)
let proxyObj = new ExamProxy(&#39;Tom&#39;)
console.log(proxyObj)
// handle construct
// exam &amp;#123;name: &amp;quot;Tom&amp;quot;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;deleteProperty(target, propKey)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于拦截 delete 操作，如果这个方法抛出错误或者返回 false ，propKey 属性就无法被 delete 命令删除。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defineProperty(target, propKey, propDesc)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于拦截 Object.definePro 若目标对象不可扩展，增加目标对象上不存在的属性会报错；若属性不可写或不可配置，则不能改变这些属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let handler = &amp;#123;
    defineProperty: function(target, propKey, propDesc)&amp;#123;
        console.log(&amp;quot;handle defineProperty&amp;quot;);
        return true;
    &amp;#125;
&amp;#125;
let target = &amp;#123;&amp;#125;
let proxy = new Proxy(target, handler)
proxy.name = &amp;quot;Tom&amp;quot;
// handle defineProperty
target
// &amp;#123;name: &amp;quot;Tom&amp;quot;&amp;#125;
 
// defineProperty 返回值为false，添加属性操作无效
let handler1 = &amp;#123;
    defineProperty: function(target, propKey, propDesc)&amp;#123;
        console.log(&amp;quot;handle defineProperty&amp;quot;);
        return false;
    &amp;#125;
&amp;#125;
let target1 = &amp;#123;&amp;#125;
let proxy1 = new Proxy(target1, handler1)
proxy1.name = &amp;quot;Jerry&amp;quot;
target1
// &amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;erty 操作&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getOwnPropertyDescriptor(target, propKey)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于拦截 Object.getOwnPropertyD () 返回值为属性描述对象或者 undefined&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let handler = &amp;#123;
    getOwnPropertyDescriptor: function(target, propKey)&amp;#123;
        return Object.getOwnPropertyDescriptor(target, propKey);
    &amp;#125;
&amp;#125;
let target = &amp;#123;name: &amp;quot;Tom&amp;quot;&amp;#125;
let proxy = new Proxy(target, handler)
Object.getOwnPropertyDescriptor(proxy, &#39;name&#39;)
// &amp;#123;value: &amp;quot;Tom&amp;quot;, writable: true, enumerable: true, configurable: 
// true&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;ptor 属性&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getPrototypeOf(target)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主要用于拦截获取对象原型的操作。包括以下操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- Object.prototype._proto_
- Object.prototype.isPrototypeOf()
- Object.getPrototypeOf()
- Reflect.getPrototypeOf()
- instanceof
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;let exam = &amp;#123;&amp;#125;
let proxy = new Proxy(&amp;#123;&amp;#125;,&amp;#123;
    getPrototypeOf: function(target)&amp;#123;
        return exam;
    &amp;#125;
&amp;#125;)
Object.getPrototypeOf(proxy) // &amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意，返回值必须是对象或者 null ，否则报错。另外，如果目标对象不可扩展（non-extensible），getPrototypeOf 方法必须返回目标对象的原型对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let proxy = new Proxy(&amp;#123;&amp;#125;,&amp;#123;
    getPrototypeOf: function(target)&amp;#123;
        return true;
    &amp;#125;
&amp;#125;)
Object.getPrototypeOf(proxy)
// TypeError: &#39;getPrototypeOf&#39; on proxy: trap returned neither object // nor null
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;isExtensible(target)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于拦截 Object.isExtensible 操作。&lt;/p&gt;
&lt;p&gt;该方法只能返回布尔值，否则返回值会被自动转为布尔值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let proxy = new Proxy(&amp;#123;&amp;#125;,&amp;#123;
    isExtensible:function(target)&amp;#123;
        return true;
    &amp;#125;
&amp;#125;)
Object.isExtensible(proxy) // true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：它的返回值必须与目标对象的 isExtensible 属性保持一致，否则会抛出错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let proxy = new Proxy(&amp;#123;&amp;#125;,&amp;#123;
    isExtensible:function(target)&amp;#123;
        return false;
    &amp;#125;
&amp;#125;)
Object.isExtensible(proxy)
// TypeError: &#39;isExtensible&#39; on proxy: trap result does not reflect 
// extensibility of proxy target (which is &#39;true&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ownKeys(target)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于拦截对象自身属性的读取操作。主要包括以下操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- Object.getOwnPropertyNames()
- Object.getOwnPropertySymbols()
- Object.keys()
- or...in
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;方法返回的数组成员，只能是字符串或 Symbol 值，否则会报错。&lt;/p&gt;
&lt;p&gt;若目标对象中含有不可配置的属性，则必须将这些属性在结果中返回，否则就会报错。&lt;/p&gt;
&lt;p&gt;若目标对象不可扩展，则必须全部返回且只能返回目标对象包含的所有属性，不能包含不存在的属性，否则也会报错。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let proxy = new Proxy( &amp;#123;
  name: &amp;quot;Tom&amp;quot;,
  age: 24
&amp;#125;, &amp;#123;
    ownKeys(target) &amp;#123;
        return [&#39;name&#39;];
    &amp;#125;
&amp;#125;);
Object.keys(proxy)
// [ &#39;name&#39; ]f返回结果中，三类属性会被过滤：
//          - 目标对象上没有的属性
//          - 属性名为 Symbol 值的属性
//          - 不可遍历的属性
 
let target = &amp;#123;
  name: &amp;quot;Tom&amp;quot;,
  [Symbol.for(&#39;age&#39;)]: 24,
&amp;#125;;
// 添加不可遍历属性 &#39;gender&#39;
Object.defineProperty(target, &#39;gender&#39;, &amp;#123;
  enumerable: false,
  configurable: true,
  writable: true,
  value: &#39;male&#39;
&amp;#125;);
let handler = &amp;#123;
    ownKeys(target) &amp;#123;
        return [&#39;name&#39;, &#39;parent&#39;, Symbol.for(&#39;age&#39;), &#39;gender&#39;];
    &amp;#125;
&amp;#125;;
let proxy = new Proxy(target, handler);
Object.keys(proxy)
// [&#39;name&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;preventExtensions(target)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;拦截 Object.preventExtensions 操作。&lt;/p&gt;
&lt;p&gt;该方法必须返回一个布尔值，否则会自动转为布尔值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 只有目标对象不可扩展时（即 Object.isExtensible(proxy) 为 false ），
// proxy.preventExtensions 才能返回 true ，否则会报错
var proxy = new Proxy(&amp;#123;&amp;#125;, &amp;#123;
  preventExtensions: function(target) &amp;#123;
    return true;
  &amp;#125;
&amp;#125;);
// 由于 proxy.preventExtensions 返回 true，此处也会返回 true，因此会报错
Object.preventExtensions(proxy) 被// TypeError: &#39;preventExtensions&#39; on proxy: trap returned truish but // the proxy target is extensible
 
// 解决方案
 var proxy = new Proxy(&amp;#123;&amp;#125;, &amp;#123;
  preventExtensions: function(target) &amp;#123;
    // 返回前先调用 Object.preventExtensions
    Object.preventExtensions(target);
    return true;
  &amp;#125;
&amp;#125;);
Object.preventExtensions(proxy)
// Proxy &amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;setPrototypeOf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主要用来拦截 Object.setPrototypeOf 方法。&lt;/p&gt;
&lt;p&gt;返回值必须为布尔值，否则会被自动转为布尔值。&lt;/p&gt;
&lt;p&gt;若目标对象不可扩展，setPrototypeOf 方法不得改变目标对象的原型。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let proto = &amp;#123;&amp;#125;
let proxy = new Proxy(function () &amp;#123;&amp;#125;, &amp;#123;
    setPrototypeOf: function(target, proto) &amp;#123;
        console.log(&amp;quot;setPrototypeOf&amp;quot;);
        return true;
    &amp;#125;
&amp;#125;
);
Object.setPrototypeOf(proxy, proto);
// setPrototypeOf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Proxy.revocable()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于返回一个可取消的 Proxy 实例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let &amp;#123;proxy, revoke&amp;#125; = Proxy.revocable(&amp;#123;&amp;#125;, &amp;#123;&amp;#125;);
proxy.name = &amp;quot;Tom&amp;quot;;
revoke();
proxy.name 
// TypeError: Cannot perform &#39;get&#39; on a proxy that has been revoked
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reflect&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reflect&#34;&gt;#&lt;/a&gt; Reflect&lt;/h3&gt;
&lt;p&gt;ES6 中将 Object 的一些明显属于语言内部的方法移植到了 Reflect 对象上（当前某些方法会同时存在于 Object 和 Reflect 对象上），未来的新方法会只部署在 Reflect 对象上。&lt;/p&gt;
&lt;p&gt;Reflect 对象对某些方法的返回结果进行了修改，使其更合理。&lt;/p&gt;
&lt;p&gt;Reflect 对象使用函数的方式实现了 Object 的命令式操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;静态方法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Reflect.get(target, name, receiver)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查找并返回 target 对象的 name 属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let exam = &amp;#123;
    name: &amp;quot;Tom&amp;quot;,
    age: 24,
    get info()&amp;#123;
        return this.name + this.age;
    &amp;#125;
&amp;#125;
Reflect.get(exam, &#39;name&#39;); // &amp;quot;Tom&amp;quot;
 
// 当 target 对象中存在 name 属性的 getter 方法， getter 方法的 this 会绑定 // receiver
let receiver = &amp;#123;
    name: &amp;quot;Jerry&amp;quot;,
    age: 20
&amp;#125;
Reflect.get(exam, &#39;info&#39;, receiver); // Jerry20
 
// 当 name 为不存在于 target 对象的属性时，返回 undefined
Reflect.get(exam, &#39;birth&#39;); // undefined
 
// 当 target 不是对象时，会报错
Reflect.get(1, &#39;name&#39;); // TypeError
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.set(target, name, value, receiver)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将 target 的 name 属性设置为 value。返回值为 boolean ，true 表示修改成功，false 表示失败。当 target 为不存在的对象时，会报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let exam = &amp;#123;
    name: &amp;quot;Tom&amp;quot;,
    age: 24,
    set info(value)&amp;#123;
        return this.age = value;
    &amp;#125;
&amp;#125;
exam.age; // 24
Reflect.set(exam, &#39;age&#39;, 25); // true
exam.age; // 25
 
// value 为空时会将 name 属性清除
Reflect.set(exam, &#39;age&#39;, ); // true
exam.age; // undefined
 
// 当 target 对象中存在 name 属性 setter 方法时，setter 方法中的 this 会绑定 // receiver , 所以修改的实际上是 receiver 的属性,
let receiver = &amp;#123;
    age: 18
&amp;#125;
Reflect.set(exam, &#39;info&#39;, 1, receiver); // true
receiver.age; // 1
 
let receiver1 = &amp;#123;
    name: &#39;oppps&#39;
&amp;#125;
Reflect.set(exam, &#39;info&#39;, 1, receiver1);
receiver1.age; // 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.has(obj, name)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;是 name in obj 指令的函数化，用于查找 name 属性在 obj 对象中是否存在。返回值为 boolean。如果 obj 不是对象则会报错 TypeError&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let exam = &amp;#123;
    name: &amp;quot;Tom&amp;quot;,
    age: 24
&amp;#125;
Reflect.has(exam, &#39;name&#39;); // true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.deleteProperty(obj, property)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;是 delete obj [property] 的函数化，用于删除 obj 对象的 property 属性，返回值为 boolean。如果 obj 不是对象则会报错 TypeError&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let exam = &amp;#123;
    name: &amp;quot;Tom&amp;quot;,
    age: 24
&amp;#125;
Reflect.deleteProperty(exam , &#39;name&#39;); // true
exam // &amp;#123;age: 24&amp;#125; 
// property 不存在时，也会返回 true
Reflect.deleteProperty(exam , &#39;name&#39;); // true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.construct(obj, args)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等同于 new target (...args)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function exam(name)&amp;#123;
    this.name = name;
&amp;#125;
Reflect.construct(exam, [&#39;Tom&#39;]); // exam &amp;#123;name: &amp;quot;Tom&amp;quot;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.getPrototypeOf(obj)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于读取 obj 的 &lt;em&gt;proto&lt;/em&gt; 属性。在 obj 不是对象时不会像 Object 一样把 obj 转为对象，而是会报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Exam&amp;#123;&amp;#125;
let obj = new Exam()
Reflect.getPrototypeOf(obj) === Exam.prototype // true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.setPrototypeOf(obj, newProto)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于设置目标对象的 prototype。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let obj =&amp;#123;&amp;#125;
Reflect.setPrototypeOf(obj, Array.prototype); // true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.apply(func, thisArg, args)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等同于 Function.prototype.apply.call (func, thisArg, args) 。func 表示目标函数；thisArg 表示目标函数绑定的 this 对象；args 表示目标函数调用时传入的参数列表，可以是数组或类似数组的对象。若目标函数无法调用，会抛出 TypeError&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Reflect.apply(Math.max, Math, [1, 3, 5, 3, 1]); // 5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.defineProperty(target, propertyKey, attributes)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于为目标对象定义属性。如果 target 不是对象，会抛出错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let myDate= &amp;#123;&amp;#125;
Reflect.defineProperty(MyDate, &#39;now&#39;, &amp;#123;
  value: () =&amp;gt; Date.now()
&amp;#125;); // true
 
const student = &amp;#123;&amp;#125;;
Reflect.defineProperty(student, &amp;quot;name&amp;quot;, &amp;#123;value: &amp;quot;Mike&amp;quot;&amp;#125;); // true
student.name; // &amp;quot;Mike&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.getOwnPropertyDescriptor(target, propertyKey)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于得到 target 对象的 propertyKey 属性的描述对象。在 target 不是对象时，会抛出错误表示参数非法，不会将非对象转换为对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var exam = &amp;#123;&amp;#125;
Reflect.defineProperty(exam, &#39;name&#39;, &amp;#123;
  value: true,
  enumerable: false,
&amp;#125;)
Reflect.getOwnPropertyDescriptor(exam, &#39;name&#39;)
// &amp;#123; configurable: false, enumerable: false, value: true, writable:
// false&amp;#125;
 
 
// propertyKey 属性在 target 对象中不存在时，返回 undefined
Reflect.getOwnPropertyDescriptor(exam, &#39;age&#39;) // undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.isExtensible(target)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于判断 target 对象是否可扩展。返回值为 boolean 。如果 target 参数不是对象，会抛出错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let exam = &amp;#123;&amp;#125;
Reflect.isExtensible(exam) // true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.preventExtensions(target)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于让 target 对象变为不可扩展。如果 target 参数不是对象，会抛出错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let exam = &amp;#123;&amp;#125;
Reflect.preventExtensions(exam) // true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.ownKeys(target)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于返回 target 对象的所有属性，等同于 Object.getOwnPropertyNames 与 Object.getOwnPropertySymbols 之和&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var exam = &amp;#123;
  name: 1,
  [Symbol.for(&#39;age&#39;)]: 4
&amp;#125;
Reflect.ownKeys(exam) // [&amp;quot;name&amp;quot;, Symbol(age)]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;组合使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组合使用&#34;&gt;#&lt;/a&gt; 组合使用&lt;/h2&gt;
&lt;p&gt;Reflect 对象的方法与 Proxy 对象的方法是一一对应的。所以 Proxy 对象的方法可以通过调用 Reflect 对象的方法获取默认行为，然后进行额外操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let exam = &amp;#123;
    name: &amp;quot;Tom&amp;quot;,
    age: 24
&amp;#125;
let handler = &amp;#123;
    get: function(target, key)&amp;#123;
        console.log(&amp;quot;getting &amp;quot;+key);
        return Reflect.get(target,key);
    &amp;#125;,
    set: function(target, key, value)&amp;#123;
        console.log(&amp;quot;setting &amp;quot;+key+&amp;quot; to &amp;quot;+value)
        Reflect.set(target, key, value);
    &amp;#125;
&amp;#125;
let proxy = new Proxy(exam, handler)
proxy.name = &amp;quot;Jerry&amp;quot;
proxy.name
// setting name to Jerry
// getting name
// &amp;quot;Jerry&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;使用场景拓展&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用场景拓展&#34;&gt;#&lt;/a&gt; 使用场景拓展&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;实现观察者模式&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 定义 Set 集合
const queuedObservers = new Set();
// 把观察者函数都放入 Set 集合中
const observe = fn =&amp;gt; queuedObservers.add(fn);
// observable 返回原始对象的代理，拦截赋值操作
const observable = obj =&amp;gt; new Proxy(obj, &amp;#123;set&amp;#125;);
function set(target, key, value, receiver) &amp;#123;
  // 获取对象的赋值操作
  const result = Reflect.set(target, key, value, receiver);
  // 执行所有观察者
  queuedObservers.forEach(observer =&amp;gt; observer());
  // 执行赋值操作
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;fn =&amp;gt; queuedObservers.add(fn)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等于：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function(fn)&amp;#123; 
    return queuedObservers.add(fn) ;
&amp;#125;;
obj =&amp;gt; new Proxy(obj, &amp;#123;set&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等于：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function(obj)&amp;#123;
    return new Proxy(obj, &amp;#123;set&amp;#125;);
&amp;#125;
observer =&amp;gt; observer()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等于：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function(observer )&amp;#123;
    return observer()
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/JS-Promise%E5%AF%B9%E8%B1%A1/</guid>
            <title>JS-Promise对象</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/JS-Promise%E5%AF%B9%E8%B1%A1/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:21:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;ECMAscript 6 原生提供了 Promise 对象。&lt;/p&gt;
&lt;p&gt;Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。&lt;/p&gt;
&lt;h3 id=&#34;promise-对象有以下两个特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promise-对象有以下两个特点&#34;&gt;#&lt;/a&gt; Promise 对象有以下两个特点:&lt;/h3&gt;
&lt;p&gt;1、对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pending: 初始状态，不是成功或失败状态。&lt;/li&gt;
&lt;li&gt;fulfilled: 意味着操作成功完成。&lt;/li&gt;
&lt;li&gt;rejected: 意味着操作失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 Promise 这个名字的由来，它的英语意思就是「承诺」，表示其他手段无法改变。&lt;/p&gt;
&lt;p&gt;2、一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。&lt;/p&gt;
&lt;h3 id=&#34;promise-优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promise-优缺点&#34;&gt;#&lt;/a&gt; Promise 优缺点&lt;/h3&gt;
&lt;p&gt;有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise 对象提供统一的接口，使得控制异步操作更加容易。&lt;/p&gt;
&lt;p&gt;Promise 也有一些缺点。首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 Pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。&lt;/p&gt;
&lt;h3 id=&#34;promise-创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promise-创建&#34;&gt;#&lt;/a&gt; Promise 创建&lt;/h3&gt;
&lt;p&gt;要想创建一个 promise 对象、可以使用 new 来调用 Promise 的构造器来进行实例化。&lt;/p&gt;
&lt;p&gt;下面是创建 promise 的步骤：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var promise = new Promise(function(resolve, reject) &amp;#123;
    // 异步处理
    // 处理结束后、调用resolve 或 reject
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Promise 构造函数包含一个参数和一个带有 resolve（解析）和 reject（拒绝）两个参数的回调。在回调中执行一些操作（例如异步），如果一切都正常，则调用 resolve，否则调用 reject。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myFirstPromise = new Promise(function(resolve, reject)&amp;#123;
    //当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)
    //在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.
    setTimeout(function()&amp;#123;
        resolve(&amp;quot;成功!&amp;quot;); //代码正常执行！
    &amp;#125;, 250);
&amp;#125;);
 
myFirstPromise.then(function(successMessage)&amp;#123;
    //successMessage的值是上面调用resolve(...)方法传入的值.
    //successMessage参数不一定非要是字符串类型，这里只是举个例子
    document.write(&amp;quot;Yay! &amp;quot; + successMessage);
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于已经实例化过的 promise 对象可以调用 promise.then () 方法，传递 resolve 和 reject 方法作为回调。&lt;/p&gt;
&lt;p&gt;promise.then () 是 promise 最为常用的方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;promise.then(onFulfilled, onRejected)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;promise 简化了对 error 的处理，上面的代码我们也可以这样写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;promise.then(onFulfilled).catch(onRejected)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;promise-ajax&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promise-ajax&#34;&gt;#&lt;/a&gt; Promise Ajax&lt;/h2&gt;
&lt;p&gt;下面是一个用 Promise 对象实现的 Ajax 操作的例子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function ajax(URL) &amp;#123;
    return new Promise(function (resolve, reject) &amp;#123;
        var req = new XMLHttpRequest(); 
        req.open(&#39;GET&#39;, URL, true);
        req.onload = function () &amp;#123;
        if (req.status === 200) &amp;#123; 
                resolve(req.responseText);
            &amp;#125; else &amp;#123;
                reject(new Error(req.statusText));
            &amp;#125; 
        &amp;#125;;
        req.onerror = function () &amp;#123;
            reject(new Error(req.statusText));
        &amp;#125;;
        req.send(); 
    &amp;#125;);
&amp;#125;
var URL = &amp;quot;/try/ajax/testpromise.php&amp;quot;; 
ajax(URL).then(function onFulfilled(value)&amp;#123;
    document.write(&#39;内容是：&#39; + value); 
&amp;#125;).catch(function onRejected(error)&amp;#123;
    document.write(&#39;错误：&#39; + error); 
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码中，resolve 方法和 reject 方法调用时，都带有参数。它们的参数会被传递给回调函数。reject 方法的参数通常是 Error 对象的实例，而 resolve 方法的参数除了正常的值以外，还可能是另一个 Promise 实例，比如像下面这样。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var p1 = new Promise(function(resolve, reject)&amp;#123;
  // ... some code
&amp;#125;);
 
var p2 = new Promise(function(resolve, reject)&amp;#123;
  // ... some code
  resolve(p1);
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码中，p1 和 p2 都是 Promise 的实例，但是 p2 的 resolve 方法将 p1 作为参数，这时 p1 的状态就会传递给 p2。如果调用的时候，p1 的状态是 pending，那么 p2 的回调函数就会等待 p1 的状态改变；如果 p1 的状态已经是 fulfilled 或者 rejected，那么 p2 的回调函数将会立刻执行。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;promiseprototypethen方法链式操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promiseprototypethen方法链式操作&#34;&gt;#&lt;/a&gt; Promise.prototype.then 方法：链式操作&lt;/h2&gt;
&lt;p&gt;Promise.prototype.then 方法返回的是一个新的 Promise 对象，因此可以采用链式写法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getJSON(&amp;quot;/posts.json&amp;quot;).then(function(json) &amp;#123;
  return json.post;
&amp;#125;).then(function(post) &amp;#123;
  // proceed
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的代码使用 then 方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。&lt;/p&gt;
&lt;p&gt;如果前一个回调函数返回的是 Promise 对象，这时后一个回调函数就会等待该 Promise 对象有了运行结果，才会进一步调用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getJSON(&amp;quot;/post/1.json&amp;quot;).then(function(post) &amp;#123;
  return getJSON(post.commentURL);
&amp;#125;).then(function(comments) &amp;#123;
  // 对comments进行处理
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这种设计使得嵌套的异步操作，可以被很容易得改写，从回调函数的 &amp;quot;横向发展&amp;quot; 改为 &amp;quot;向下发展&amp;quot;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;promiseprototypecatch方法捕捉错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promiseprototypecatch方法捕捉错误&#34;&gt;#&lt;/a&gt; Promise.prototype.catch 方法：捕捉错误&lt;/h2&gt;
&lt;p&gt;Promise.prototype.catch 方法是 Promise.prototype.then (null, rejection) 的别名，用于指定发生错误时的回调函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getJSON(&amp;quot;/posts.json&amp;quot;).then(function(posts) &amp;#123;
  // some code
&amp;#125;).catch(function(error) &amp;#123;
  // 处理前一个回调函数运行时发生的错误
  console.log(&#39;发生错误！&#39;, error);
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Promise 对象的错误具有 &amp;quot;冒泡&amp;quot; 性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个 catch 语句捕获&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getJSON(&amp;quot;/post/1.json&amp;quot;).then(function(post) &amp;#123;
  return getJSON(post.commentURL);
&amp;#125;).then(function(comments) &amp;#123;
  // some code
&amp;#125;).catch(function(error) &amp;#123;
  // 处理前两个回调函数的错误
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;promiseall方法promiserace方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promiseall方法promiserace方法&#34;&gt;#&lt;/a&gt; Promise.all 方法，Promise.race 方法&lt;/h2&gt;
&lt;p&gt;Promise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var p = Promise.all([p1,p2,p3]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码中，Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 对象的实例。（Promise.all 方法的参数不一定是数组，但是必须具有 iterator 接口，且返回的每个成员都是 Promise 实例。）&lt;/p&gt;
&lt;p&gt;p 的状态由 p1、p2、p3 决定，分成两种情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（1）只有 p1、p2、p3 的状态都变成 fulfilled，p 的状态才会变成 fulfilled，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。&lt;/li&gt;
&lt;li&gt;（2）只要 p1、p2、p3 之中有一个被 rejected，p 的状态就变成 rejected，此时第一个被 reject 的实例的返回值，会传递给 p 的回调函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一个具体的例子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 生成一个Promise对象的数组
var promises = [2, 3, 5, 7, 11, 13].map(function(id)&amp;#123;
  return getJSON(&amp;quot;/post/&amp;quot; + id + &amp;quot;.json&amp;quot;);
&amp;#125;);
 
Promise.all(promises).then(function(posts) &amp;#123;
  // ...  
&amp;#125;).catch(function(reason)&amp;#123;
  // ...
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Promise.race 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var p = Promise.race([p1,p2,p3]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码中，只要 p1、p2、p3 之中有一个实例率先改变状态，p 的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 p 的返回值。&lt;/p&gt;
&lt;p&gt;如果 Promise.all 方法和 Promise.race 方法的参数，不是 Promise 实例，就会先调用下面讲到的 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;promiseresolve-方法promisereject-方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promiseresolve-方法promisereject-方法&#34;&gt;#&lt;/a&gt; Promise.resolve 方法，Promise.reject 方法&lt;/h2&gt;
&lt;p&gt;有时需要将现有对象转为 Promise 对象，Promise.resolve 方法就起到这个作用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var jsPromise = Promise.resolve($.ajax(&#39;/whatever.json&#39;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码将 jQuery 生成 deferred 对象，转为一个新的 ES6 的 Promise 对象。&lt;/p&gt;
&lt;p&gt;如果 Promise.resolve 方法的参数，不是具有 then 方法的对象（又称 thenable 对象），则返回一个新的 Promise 对象，且它的状态为 fulfilled。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var p = Promise.resolve(&#39;Hello&#39;);
 
p.then(function (s)&amp;#123;
  console.log(s)
&amp;#125;);
// Hello
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码生成一个新的 Promise 对象的实例 p，它的状态为 fulfilled，所以回调函数会立即执行，Promise.resolve 方法的参数就是回调函数的参数。&lt;/p&gt;
&lt;p&gt;如果 Promise.resolve 方法的参数是一个 Promise 对象的实例，则会被原封不动地返回。&lt;/p&gt;
&lt;p&gt;Promise.reject (reason) 方法也会返回一个新的 Promise 实例，该实例的状态为 rejected。Promise.reject 方法的参数 reason，会被传递给实例的回调函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var p = Promise.reject(&#39;出错了&#39;);
 
p.then(null, function (s)&amp;#123;
  console.log(s)
&amp;#125;);
// 出错了
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码生成一个 Promise 对象的实例，状态为 rejected，回调函数会立即执行&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/Map%E4%B8%8ESet/</guid>
            <title>Map与Set</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/Map%E4%B8%8ESet/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:21:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;map-对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#map-对象&#34;&gt;#&lt;/a&gt; Map 对象&lt;/h2&gt;
&lt;p&gt;Map 对象保存键值对。任何值 (对象或者原始值) 都可以作为一个键或一个值。&lt;/p&gt;
&lt;h2 id=&#34;maps-和-objects-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#maps-和-objects-的区别&#34;&gt;#&lt;/a&gt; Maps 和 Objects 的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。&lt;/li&gt;
&lt;li&gt;Map 中的键值是有序的（FIFO 原则），而添加到对象中的键则不是。&lt;/li&gt;
&lt;li&gt;Map 的键值对个数可以从 size 属性获取，而 Object 的键值对个数只能手动计算。&lt;/li&gt;
&lt;li&gt;Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;map-中的-key&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#map-中的-key&#34;&gt;#&lt;/a&gt; Map 中的 key&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;key 是字符串&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myMap = new Map();
var keyString = &amp;quot;a string&amp;quot;; 
 
myMap.set(keyString, &amp;quot;和键&#39;a string&#39;关联的值&amp;quot;);
 
myMap.get(keyString);    // &amp;quot;和键&#39;a string&#39;关联的值&amp;quot;
myMap.get(&amp;quot;a string&amp;quot;);   // &amp;quot;和键&#39;a string&#39;关联的值&amp;quot;
                         // 因为 keyString === &#39;a string&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;key 是对象&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myMap = new Map();
var keyObj = &amp;#123;&amp;#125;, 
 
myMap.set(keyObj, &amp;quot;和键 keyObj 关联的值&amp;quot;);

myMap.get(keyObj); // &amp;quot;和键 keyObj 关联的值&amp;quot;
myMap.get(&amp;#123;&amp;#125;); // undefined, 因为 keyObj !== &amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;key 是函数&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myMap = new Map();
var keyFunc = function () &amp;#123;&amp;#125;, // 函数
 
myMap.set(keyFunc, &amp;quot;和键 keyFunc 关联的值&amp;quot;);
 
myMap.get(keyFunc); // &amp;quot;和键 keyFunc 关联的值&amp;quot;
myMap.get(function() &amp;#123;&amp;#125;) // undefined, 因为 keyFunc !== function () &amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;key 是 NaN&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myMap = new Map();
myMap.set(NaN, &amp;quot;not a number&amp;quot;);
 
myMap.get(NaN); // &amp;quot;not a number&amp;quot;
 
var otherNaN = Number(&amp;quot;foo&amp;quot;);
myMap.get(otherNaN); // &amp;quot;not a number&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;map-的迭代&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#map-的迭代&#34;&gt;#&lt;/a&gt; Map 的迭代&lt;/h3&gt;
&lt;p&gt;对 Map 进行遍历，以下两个最高级。&lt;/p&gt;
&lt;h3 id=&#34;forof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#forof&#34;&gt;#&lt;/a&gt; for...of&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var myMap = new Map();
myMap.set(0, &amp;quot;zero&amp;quot;);
myMap.set(1, &amp;quot;one&amp;quot;);
 
// 将会显示两个 log。 一个是 &amp;quot;0 = zero&amp;quot; 另一个是 &amp;quot;1 = one&amp;quot;
for (var [key, value] of myMap) &amp;#123;
  console.log(key + &amp;quot; = &amp;quot; + value);
&amp;#125;
for (var [key, value] of myMap.entries()) &amp;#123;
  console.log(key + &amp;quot; = &amp;quot; + value);
&amp;#125;
/* 这个 entries 方法返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的 [key, value] 数组。 */
 
// 将会显示两个log。 一个是 &amp;quot;0&amp;quot; 另一个是 &amp;quot;1&amp;quot;
for (var key of myMap.keys()) &amp;#123;
  console.log(key);
&amp;#125;
/* 这个 keys 方法返回一个新的 Iterator 对象， 它按插入顺序包含了 Map 对象中每个元素的键。 */
 
// 将会显示两个log。 一个是 &amp;quot;zero&amp;quot; 另一个是 &amp;quot;one&amp;quot;
for (var value of myMap.values()) &amp;#123;
  console.log(value);
&amp;#125;
/* 这个 values 方法返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的值。 */
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;foreach&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#foreach&#34;&gt;#&lt;/a&gt; forEach()&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var myMap = new Map();
myMap.set(0, &amp;quot;zero&amp;quot;);
myMap.set(1, &amp;quot;one&amp;quot;);
 
// 将会显示两个 logs。 一个是 &amp;quot;0 = zero&amp;quot; 另一个是 &amp;quot;1 = one&amp;quot;
myMap.forEach(function(value, key) &amp;#123;
  console.log(key + &amp;quot; = &amp;quot; + value);
&amp;#125;, myMap)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;map-对象的操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#map-对象的操作&#34;&gt;#&lt;/a&gt; Map 对象的操作&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Map 与 Array 的转换&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var kvArray = [[&amp;quot;key1&amp;quot;, &amp;quot;value1&amp;quot;], [&amp;quot;key2&amp;quot;, &amp;quot;value2&amp;quot;]];
 
// Map 构造函数可以将一个 二维 键值对数组转换成一个 Map 对象
var myMap = new Map(kvArray);
 
// 使用 Array.from 函数可以将一个 Map 对象转换成一个二维键值对数组
var outArray = Array.from(myMap);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Map 的克隆&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myMap1 = new Map([[&amp;quot;key1&amp;quot;, &amp;quot;value1&amp;quot;], [&amp;quot;key2&amp;quot;, &amp;quot;value2&amp;quot;]]);
var myMap2 = new Map(myMap1);
 
console.log(original === clone); 
// 打印 false。 Map 对象构造函数生成实例，迭代出新的对象。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Map 的合并&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var first = new Map([[1, &#39;one&#39;], [2, &#39;two&#39;], [3, &#39;three&#39;],]);
var second = new Map([[1, &#39;uno&#39;], [2, &#39;dos&#39;]]);
 
// 合并两个 Map 对象时，如果有重复的键值，则后面的会覆盖前面的，对应值即 uno，dos， three
var merged = new Map([...first, ...second]);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;set-对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#set-对象&#34;&gt;#&lt;/a&gt; Set 对象&lt;/h2&gt;
&lt;p&gt;Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。&lt;/p&gt;
&lt;h3 id=&#34;set-中的特殊值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#set-中的特殊值&#34;&gt;#&lt;/a&gt; Set 中的特殊值&lt;/h3&gt;
&lt;p&gt;Set 对象存储的值总是唯一的，所以需要判断两个值是否恒等。有几个特殊值需要特殊对待：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+0 与 -0 在存储判断唯一性的时候是恒等的，所以不重复；&lt;/li&gt;
&lt;li&gt;undefined 与 undefined 是恒等的，所以不重复；&lt;/li&gt;
&lt;li&gt;NaN 与 NaN 是不恒等的，但是在 Set 中只能存一个，不重复。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let mySet = new Set();
 
mySet.add(1); // Set(1) &amp;#123;1&amp;#125;
mySet.add(5); // Set(2) &amp;#123;1, 5&amp;#125;
mySet.add(5); // Set(2) &amp;#123;1, 5&amp;#125; 这里体现了值的唯一性
mySet.add(&amp;quot;some text&amp;quot;); 
// Set(3) &amp;#123;1, 5, &amp;quot;some text&amp;quot;&amp;#125; 这里体现了类型的多样性
var o = &amp;#123;a: 1, b: 2&amp;#125;; 
mySet.add(o);
mySet.add(&amp;#123;a: 1, b: 2&amp;#125;); 
// Set(5) &amp;#123;1, 5, &amp;quot;some text&amp;quot;, &amp;#123;…&amp;#125;, &amp;#123;…&amp;#125;&amp;#125; 
// 这里体现了对象之间引用不同不恒等，即使值相同，Set 也能存储
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;类型转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类型转换&#34;&gt;#&lt;/a&gt; 类型转换&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Array 转 Set
var mySet = new Set([&amp;quot;value1&amp;quot;, &amp;quot;value2&amp;quot;, &amp;quot;value3&amp;quot;]);
// 用...操作符，将 Set 转 Array
var myArray = [...mySet];
String
// String 转 Set
var mySet = new Set(&#39;hello&#39;);  // Set(4) &amp;#123;&amp;quot;h&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;l&amp;quot;, &amp;quot;o&amp;quot;&amp;#125;
// 注：Set 中 toString 方法是不能将 Set 转换成 String
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;set-对象作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#set-对象作用&#34;&gt;#&lt;/a&gt; Set 对象作用&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;数组去重&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var mySet = new Set([1, 2, 3, 4, 4]); [...mySet]; // [1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;并集&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = new Set([1, 2, 3]); 
var b = new Set([4, 3, 2]); 
var union = new Set([...a, ...b]); // &amp;#123;1, 2, 3, 4&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;交集&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = new Set([1, 2, 3]); 
var b = new Set([4, 3, 2]); 
var intersect = new Set([...a].filter(x =&amp;gt; b.has(x))); // &amp;#123;2, 3&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;差集&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = new Set([1, 2, 3]); 
var b = new Set([4, 3, 2]); 
var difference = new Set([...a].filter(x =&amp;gt; !b.has(x))); // &amp;#123;1&amp;#125;
var difference =new Set([...[...a].filter(x =&amp;gt; !b.has(x)),...[...b].filter(x =&amp;gt; !a.has(x))]); // &amp;#123;1,4&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1、[...a]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[...a] 就是将 set 转换成 array。以后需要将 set 转换成 array 基本都使用这种方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、[...a].filter()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Array.filter (function (x)) 把传入的函数 function (x) 依次作用于每个元素，x 为元素的值，然后根据返回值是 true 还是 false 决定保留还是丢弃该元素。&lt;/p&gt;
&lt;p&gt;意思就是遍历当前数组，当遍历到某个元素时，返回值为 false 就将该元素从数组中剔除。&lt;/p&gt;
&lt;p&gt;filter () 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、 =&amp;gt; 则是一种简写方法。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x =&amp;gt; x * x 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;相当于：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function(x)&amp;#123;return x*x&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以 &lt;strong&gt;x =&amp;gt; b.has(x)&lt;/strong&gt; 本质是一个函数相当于 &lt;strong&gt;function(x){return b.has（x)}&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、b.has(x)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Set.has (x) 是 set 中的一个方法。即判断当前 set 中是否含有 x，如果有返回 true，没有返回 false。&lt;/p&gt;
&lt;p&gt;所以这段程序也可以写成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = new Set([1, 2, 3]); 
var b = new Set([4, 3, 2]); 
var arr = [...a];            //将a转换成数组
var fArr = arr.filter(function(x)&amp;#123;    //使用filter过滤数组，并将新数组返回到fArr
    return b.has(x);        //判断b中是否含有a中的元素，没有则返回false
&amp;#125;)
var intersect = new Set(fArr);          //将fArr转换成set
console.log(fArr);
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/Promise%E5%AF%B9%E8%B1%A1/</guid>
            <title>Promise对象</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/Promise%E5%AF%B9%E8%B1%A1/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:21:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h2&gt;
&lt;p&gt;是异步编程的一种解决方案。&lt;/p&gt;
&lt;p&gt;从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。&lt;/p&gt;
&lt;h2 id=&#34;promise-状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promise-状态&#34;&gt;#&lt;/a&gt; Promise 状态&lt;/h2&gt;
&lt;h3 id=&#34;状态的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#状态的特点&#34;&gt;#&lt;/a&gt; 状态的特点&lt;/h3&gt;
&lt;p&gt;Promise 异步操作有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。除了异步操作的结果，任何其他操作都无法改变这个状态。&lt;/p&gt;
&lt;p&gt;Promise 对象只有：从 pending 变为 fulfilled 和从 pending 变为 rejected 的状态改变。只要处于 fulfilled 和 rejected ，状态就不会再变了即 resolved（已定型）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const p1 = new Promise(function(resolve,reject)&amp;#123;
    resolve(&#39;success1&#39;);
    resolve(&#39;success2&#39;);
&amp;#125;); 
const p2 = new Promise(function(resolve,reject)&amp;#123;  
    resolve(&#39;success3&#39;); 
    reject(&#39;reject&#39;);
&amp;#125;);
p1.then(function(value)&amp;#123;  
    console.log(value); // success1
&amp;#125;);
p2.then(function(value)&amp;#123; 
    console.log(value); // success3
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;状态的缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#状态的缺点&#34;&gt;#&lt;/a&gt; 状态的缺点&lt;/h3&gt;
&lt;p&gt;无法取消 Promise ，一旦新建它就会立即执行，无法中途取消。&lt;/p&gt;
&lt;p&gt;如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。&lt;/p&gt;
&lt;p&gt;当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。&lt;/p&gt;
&lt;h2 id=&#34;then-方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#then-方法&#34;&gt;#&lt;/a&gt; then 方法&lt;/h2&gt;
&lt;p&gt;then 方法接收两个函数作为参数，第一个参数是 Promise 执行成功时的回调，第二个参数是 Promise 执行失败时的回调，两个函数只会有一个被调用。&lt;/p&gt;
&lt;h3 id=&#34;then-方法的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#then-方法的特点&#34;&gt;#&lt;/a&gt; then 方法的特点&lt;/h3&gt;
&lt;p&gt;在 JavaScript 事件队列的当前运行完成之前，回调函数永远不会被调用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const p = new Promise(function(resolve,reject)&amp;#123;
  resolve(&#39;success&#39;);
&amp;#125;);
 
p.then(function(value)&amp;#123;
  console.log(value);
&amp;#125;);
 
console.log(&#39;first&#39;);
// first
// success
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过 &lt;strong&gt;.then&lt;/strong&gt; 形式添加的回调函数，不论什么时候，都会被调用。&lt;/p&gt;
&lt;p&gt;通过多次调用&lt;/p&gt;
&lt;p&gt;.then&lt;/p&gt;
&lt;p&gt;，可以添加多个回调函数，它们会按照插入顺序并且独立运行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const p = new Promise(function(resolve,reject)&amp;#123;
  resolve(1);
&amp;#125;).then(function(value)&amp;#123; // 第一个then // 1
  console.log(value);
  return value * 2;
&amp;#125;).then(function(value)&amp;#123; // 第二个then // 2
  console.log(value);
&amp;#125;).then(function(value)&amp;#123; // 第三个then // undefined
  console.log(value);
  return Promise.resolve(&#39;resolve&#39;); 
&amp;#125;).then(function(value)&amp;#123; // 第四个then // resolve
  console.log(value);
  return Promise.reject(&#39;reject&#39;); 
&amp;#125;).then(function(value)&amp;#123; // 第五个then //reject:reject
  console.log(&#39;resolve:&#39; + value);
&amp;#125;, function(err) &amp;#123;
  console.log(&#39;reject:&#39; + err);
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then 方法将返回一个 resolved 或 rejected 状态的 Promise 对象用于链式调用，且 Promise 对象的值就是这个返回值。&lt;/p&gt;
&lt;h3 id=&#34;then-方法注意点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#then-方法注意点&#34;&gt;#&lt;/a&gt; then 方法注意点&lt;/h3&gt;
&lt;p&gt;简便的 Promise 链式编程最好保持扁平化，不要嵌套 Promise。&lt;/p&gt;
&lt;p&gt;注意总是返回或终止 Promise 链。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const p1 = new Promise(function(resolve,reject)&amp;#123;
  resolve(1);
&amp;#125;).then(function(result) &amp;#123;
  p2(result).then(newResult =&amp;gt; p3(newResult));
&amp;#125;).then(() =&amp;gt; p4());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建新 Promise 但忘记返回它时，对应链条被打破，导致 p4 会与 p2 和 p3 同时进行。&lt;/p&gt;
&lt;p&gt;大多数浏览器中不能终止的 Promise 链里的 rejection，建议后面都跟上 &lt;strong&gt;.catch(error =&amp;gt; console.log(error));&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;更多文章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更多文章&#34;&gt;#&lt;/a&gt; 更多文章&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;JS-Promise%E5%AF%B9%E8%B1%A1&#34;&gt;JS-Promise 对象&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/let%E5%92%8Cconst/</guid>
            <title>let和const</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/let%E5%92%8Cconst/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:21:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;ES2015 (ES6) 新增加了两个重要的 JavaScript 关键字: &lt;strong&gt;let&lt;/strong&gt; 和 &lt;strong&gt;const&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;let 声明的变量只在 let 命令所在的代码块内有效。&lt;/p&gt;
&lt;p&gt;const 声明一个只读的常量，一旦声明，常量的值就不能改变。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;let-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#let-命令&#34;&gt;#&lt;/a&gt; let 命令&lt;/h2&gt;
&lt;p&gt;基本用法:&lt;/p&gt;
&lt;p&gt;{let a = 0;  a   // 0} a   // 报错 ReferenceError: a is not defined&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码块内有效&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;let 是在代码块内有效，var 是在全局范围内有效:&lt;/p&gt;
&lt;p&gt;{  let a = 0;  var b = 1; } a  // ReferenceError: a is not defined b  // 1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不能重复声明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;let 只能声明一次 var 可以声明多次:&lt;/p&gt;
&lt;p&gt;let a = 1; let a = 2; var b = 3; var b = 4; a  // Identifier &#39;a&#39; has already been declared b  // 4&lt;/p&gt;
&lt;p&gt;for 循环计数器很适合用 let&lt;/p&gt;
&lt;p&gt;for (var i = 0; i &amp;lt; 10; i++) {  setTimeout (function (){    console.log (i);  }) } // 输出十个 10 for (let j = 0; j &amp;lt; 10; j++) {  setTimeout (function (){    console.log (j);  }) } // 输出 0123456789&lt;/p&gt;
&lt;p&gt;变量 i 是用 var 声明的，在全局范围内有效，所以全局中只有一个变量 i, 每次循环时，setTimeout 定时器里面的 i 指的是全局变量 i ，而循环里的十个 setTimeout 是在循环结束后才执行，所以此时的 i 都是 10。&lt;/p&gt;
&lt;p&gt;变量 j 是用 let 声明的，当前的 j 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出 12345。（若每次循环的变量 j 都是重新声明的，如何知道前一个循环的值？这是因为 JavaScript 引擎内部会记住前一个循环的值）。&lt;/p&gt;
&lt;h3 id=&#34;不存在变量提升&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不存在变量提升&#34;&gt;#&lt;/a&gt; 不存在变量提升&lt;/h3&gt;
&lt;p&gt;let 不存在变量提升，var 会变量提升:&lt;/p&gt;
&lt;p&gt;console.log(a);  //ReferenceError: a is not defined let a = &amp;quot;apple&amp;quot;;  console.log(b);  //undefined var b = &amp;quot;banana&amp;quot;;&lt;/p&gt;
&lt;p&gt;变量 b 用 var 声明存在变量提升，所以当脚本开始运行的时候，b 已经存在了，但是还没有赋值，所以会输出 undefined。&lt;/p&gt;
&lt;p&gt;变量 a 用 let 声明不存在变量提升，在声明变量 a 之前，a 不存在，所以会报错。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;const-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#const-命令&#34;&gt;#&lt;/a&gt; const 命令&lt;/h2&gt;
&lt;p&gt;const 声明一个只读变量，声明之后不允许改变。意味着，一旦声明必须初始化，否则会报错。&lt;/p&gt;
&lt;p&gt;基本用法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const PI = &amp;quot;3.1415926&amp;quot;;
PI  // 3.1415926

const MY_AGE;  // SyntaxError: Missing initializer in const declaration    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;暂时性死区:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var PI = &amp;quot;a&amp;quot;;
if(true)&amp;#123;
  console.log(PI);  // ReferenceError: PI is not defined
  const PI = &amp;quot;3.1415926&amp;quot;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ES6 明确规定，代码块内如果存在 let 或者 const，代码块会对这些命令声明的变量从块的开始就形成一个封闭作用域。代码块内，在声明变量 PI 之前使用它会报错。&lt;/p&gt;
&lt;h3 id=&#34;注意要点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意要点&#34;&gt;#&lt;/a&gt; 注意要点&lt;/h3&gt;
&lt;p&gt;const 如何做到变量在声明初始化之后不允许改变的？其实 const 其实保证的不是变量的值不变，而是保证变量指向的内存地址所保存的数据不允许改动。此时，你可能已经想到，简单类型和复合类型保存值的方式是不同的。是的，对于简单类型（数值 number、字符串 string 、布尔值 boolean）, 值就保存在变量指向的那个内存地址，因此 const 声明的简单类型变量等同于常量。而复杂类型（对象 object，数组 array，函数 function），变量指向的内存地址其实是保存了一个指向实际数据的指针，所以 const 只能保证指针是固定的，至于指针指向的数据结构变不变就无法控制了，所以使用 const 声明复杂类型对象时要慎重。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/Class%E7%B1%BB/</guid>
            <title>Class类</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/Class%E7%B1%BB/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:20:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h2&gt;
&lt;p&gt;在 ES6 中，class (类) 作为对象的模板被引入，可以通过 class 关键字定义类。&lt;/p&gt;
&lt;p&gt;class 的本质是 function。&lt;/p&gt;
&lt;p&gt;它可以看作一个语法糖，让对象原型的写法更加清晰、更像面向对象编程的语法。&lt;/p&gt;
&lt;h2 id=&#34;基础用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础用法&#34;&gt;#&lt;/a&gt; 基础用法&lt;/h2&gt;
&lt;h3 id=&#34;类定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类定义&#34;&gt;#&lt;/a&gt; 类定义&lt;/h3&gt;
&lt;p&gt;类表达式可以为匿名或命名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 匿名类
let Example = class &amp;#123;
    constructor(a) &amp;#123;
        this.a = a;
    &amp;#125;
&amp;#125;
// 命名类
let Example = class Example &amp;#123;
    constructor(a) &amp;#123;
        this.a = a;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;类声明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类声明&#34;&gt;#&lt;/a&gt; 类声明&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
    constructor(a) &amp;#123;
        this.a = a;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意要点：不可重复声明&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example&amp;#123;&amp;#125;
class Example&amp;#123;&amp;#125;
// Uncaught SyntaxError: Identifier &#39;Example&#39; has already been 
// declared
 
let Example1 = class&amp;#123;&amp;#125;
class Example&amp;#123;&amp;#125;
// Uncaught SyntaxError: Identifier &#39;Example&#39; has already been 
// declared
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;注意要点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意要点&#34;&gt;#&lt;/a&gt; 注意要点&lt;/h3&gt;
&lt;p&gt;类定义不会被提升，这意味着，必须在访问前对类进行定义，否则就会报错。&lt;/p&gt;
&lt;p&gt;类中方法不需要 function 关键字。&lt;/p&gt;
&lt;p&gt;方法间不能加分号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;new Example(); 
class Example &amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;类的主体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类的主体&#34;&gt;#&lt;/a&gt; 类的主体&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;属性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;prototype&lt;/p&gt;
&lt;p&gt;ES6 中，prototype 仍旧存在，虽然可以直接自类中定义方法，但是其实方法还是定义在 prototype 上的。 覆盖方法 / 初始化时添加方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Example.prototype=&amp;#123;
    //methods
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Object.assign(Example.prototype,&amp;#123;
    //methods
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;静态属性&lt;/p&gt;
&lt;p&gt;静态属性：class 本身的属性，即直接定义在类内部的属性（ Class.propname ），不需要实例化。 ES6 中规定，Class 内部只有静态方法，没有静态属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
// 新提案
    static a = 2;
&amp;#125;
// 目前可行写法
Example.b = 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;公共属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example&amp;#123;&amp;#125;
Example.prototype.a = 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实例属性&lt;/p&gt;
&lt;p&gt;实例属性：定义在实例对象（ this ）上的属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
    a = 2;
    constructor () &amp;#123;
        console.log(this.a);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;name 属性&lt;/p&gt;
&lt;p&gt;返回跟在 class 后的类名 (存在时)。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let Example=class Exam &amp;#123;
    constructor(a) &amp;#123;
        this.a = a;
    &amp;#125;
&amp;#125;
console.log(Example.name); // Exam
 
let Example=class &amp;#123;
    constructor(a) &amp;#123;
        this.a = a;
    &amp;#125;
&amp;#125;
console.log(Example.name); // Example
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;constructor 方法&lt;/p&gt;
&lt;p&gt;constructor 方法是类的默认方法，创建类的实例化对象时被调用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example&amp;#123;
    constructor()&amp;#123;
      console.log(&#39;我是constructor&#39;);
    &amp;#125;
&amp;#125;
new Example(); // 我是constructor
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Test &amp;#123;
    constructor()&amp;#123;
        // 默认返回实例对象 this
    &amp;#125;
&amp;#125;
console.log(new Test() instanceof Test); // true
 
class Example &amp;#123;
    constructor()&amp;#123;
        // 指定返回对象
        return new Test();
    &amp;#125;
&amp;#125;
console.log(new Example() instanceof Example); // false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;静态方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example&amp;#123;
    static sum(a, b) &amp;#123;
        console.log(a+b);
    &amp;#125;
&amp;#125;
Example.sum(1, 2); // 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原型方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
    sum(a, b) &amp;#123;
        console.log(a + b);
    &amp;#125;
&amp;#125;
let exam = new Example();
exam.sum(1, 2); // 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实例方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
    constructor() &amp;#123;
        this.sum = (a, b) =&amp;gt; &amp;#123;
            console.log(a + b);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;类的实例化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类的实例化&#34;&gt;#&lt;/a&gt; 类的实例化&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;class 的实例化必须通过 new 关键字&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;&amp;#125;
 
let exam1 = Example(); 
// Class constructor Example cannot be invoked without &#39;new&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;实例化对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;共享原型对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
    constructor(a, b) &amp;#123;
        this.a = a;
        this.b = b;
        console.log(&#39;Example&#39;);
    &amp;#125;
    sum() &amp;#123;
        return this.a + this.b;
    &amp;#125;
&amp;#125;
let exam1 = new Example(2, 1);
let exam2 = new Example(3, 1);
 
// __proto__ 已废弃，不建议使用
// console.log(exam1.__proto__ == exam2.__proto__); 
 
console.log(Object.getPrototypeOf(exam1) === Object.getPrototypeOf(exam2));// true
 
Object.getPrototypeOf(exam1).sub = function() &amp;#123;
    return this.a - this.b;
&amp;#125;
console.log(exam1.sub()); // 1
console.log(exam2.sub()); // 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;decorator&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#decorator&#34;&gt;#&lt;/a&gt; decorator&lt;/h2&gt;
&lt;p&gt;decorator 是一个函数，用来修改类的行为，在代码编译时产生作用。&lt;/p&gt;
&lt;h3 id=&#34;类修饰&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类修饰&#34;&gt;#&lt;/a&gt; 类修饰&lt;/h3&gt;
&lt;p&gt;一个参数&lt;/p&gt;
&lt;p&gt;第一个参数 target，指向类本身&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function testable(target) &amp;#123;
    target.isTestable = true;
&amp;#125;
@testable
class Example &amp;#123;&amp;#125;
Example.isTestable; // true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多个参数 —— 嵌套实现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function testable(isTestable) &amp;#123;
    return function(target) &amp;#123;
        target.isTestable=isTestable;
    &amp;#125;
&amp;#125;
@testable(true)
class Example &amp;#123;&amp;#125;
Example.isTestable; // true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实例属性&lt;/p&gt;
&lt;p&gt;上面两个例子添加的是静态属性，若要添加实例属性，在类的 prototype 上操作即可。&lt;/p&gt;
&lt;h3 id=&#34;方法修饰&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法修饰&#34;&gt;#&lt;/a&gt; 方法修饰&lt;/h3&gt;
&lt;p&gt;3 个参数：target（类的原型对象）、name（修饰的属性名）、descriptor（该属性的描述对象）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
    @writable
    sum(a, b) &amp;#123;
        return a + b;
    &amp;#125;
&amp;#125;
function writable(target, name, descriptor) &amp;#123;
    descriptor.writable = false;
    return descriptor; // 必须返回
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修饰器执行顺序&lt;/p&gt;
&lt;p&gt;由外向内进入，由内向外执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
    @logMethod(1)
    @logMethod(2)
    sum(a, b)&amp;#123;
        return a + b;
    &amp;#125;
&amp;#125;
function logMethod(id) &amp;#123;
    console.log(&#39;evaluated logMethod&#39;+id);
    return (target, name, desctiptor) =&amp;gt; console.log(&#39;excuted         logMethod &#39;+id);
&amp;#125;
// evaluated logMethod 1
// evaluated logMethod 2
// excuted logMethod 2
// excuted logMethod 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;封装与继承&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#封装与继承&#34;&gt;#&lt;/a&gt; 封装与继承&lt;/h2&gt;
&lt;h3 id=&#34;getter-setter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#getter-setter&#34;&gt;#&lt;/a&gt; getter / setter&lt;/h3&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example&amp;#123;
    constructor(a, b) &amp;#123;
        this.a = a; // 实例化时调用 set 方法
        this.b = b;
    &amp;#125;
    get a()&amp;#123;
        console.log(&#39;getter&#39;);
        return this.a;
    &amp;#125;
    set a(a)&amp;#123;
        console.log(&#39;setter&#39;);
        this.a = a; // 自身递归调用
    &amp;#125;
&amp;#125;
let exam = new Example(1,2); // 不断输出 setter ，最终导致 RangeError
class Example1&amp;#123;
    constructor(a, b) &amp;#123;
        this.a = a;
        this.b = b;
    &amp;#125;
    get a()&amp;#123;
        console.log(&#39;getter&#39;);
        return this._a;
    &amp;#125;
    set a(a)&amp;#123;
        console.log(&#39;setter&#39;);
        this._a = a;
    &amp;#125;
&amp;#125;
let exam1 = new Example1(1,2); // 只输出 setter , 不会调用 getter 方法
console.log(exam1._a); // 1, 可以直接访问
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;getter 不可单独出现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
    constructor(a) &amp;#123;
        this.a = a; 
    &amp;#125;
    get a() &amp;#123;
        return this.a;
    &amp;#125;
&amp;#125;
let exam = new Example(1); // Uncaught TypeError: Cannot set property // a of #&amp;lt;Example&amp;gt; which has only a getter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;getter 与 setter 必须同级出现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Father &amp;#123;
    constructor()&amp;#123;&amp;#125;
    get a() &amp;#123;
        return this._a;
    &amp;#125;
&amp;#125;
class Child extends Father &amp;#123;
    constructor()&amp;#123;
        super();
    &amp;#125;
    set a(a) &amp;#123;
        this._a = a;
    &amp;#125;
&amp;#125;
let test = new Child();
test.a = 2;
console.log(test.a); // undefined
 
class Father1 &amp;#123;
    constructor()&amp;#123;&amp;#125;
    // 或者都放在子类中
    get a() &amp;#123;
        return this._a;
    &amp;#125;
    set a(a) &amp;#123;
        this._a = a;
    &amp;#125;
&amp;#125;
class Child1 extends Father1 &amp;#123;
    constructor()&amp;#123;
        super();
    &amp;#125;
&amp;#125;
let test1 = new Child1();
test1.a = 2;
console.log(test1.a); // 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;extends&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#extends&#34;&gt;#&lt;/a&gt; extends&lt;/h3&gt;
&lt;p&gt;通过 extends 实现类的继承&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Child extends Father &amp;#123; ... &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;super&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#super&#34;&gt;#&lt;/a&gt; super&lt;/h3&gt;
&lt;p&gt;子类 constructor 方法中必须有 super ，且必须出现在 this 之前&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Father &amp;#123;
    constructor() &amp;#123;&amp;#125;
&amp;#125;
class Child extends Father &amp;#123;
    constructor() &amp;#123;&amp;#125;
    // or 
    // constructor(a) &amp;#123;
        // this.a = a;
        // super();
    // &amp;#125;
&amp;#125;
let test = new Child(); // Uncaught ReferenceError: Must call super 
// constructor in derived class before accessing &#39;this&#39; or returning 
// from derived constructor
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调用父类构造函数，只能出现在子类的构造函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Father &amp;#123;
    test()&amp;#123;
        return 0;
    &amp;#125;
    static test1()&amp;#123;
        return 1;
    &amp;#125;
&amp;#125;
class Child extends Father &amp;#123;
    constructor()&amp;#123;
        super();
    &amp;#125;
&amp;#125;
class Child1 extends Father &amp;#123;
    test2() &amp;#123;
        super(); // Uncaught SyntaxError: &#39;super&#39; keyword unexpected     
        // here
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调用父类方法，super 作为对象，在普通方法中，指向父类的原型对象，在静态方法中，指向父类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Child2 extends Father &amp;#123;
    constructor()&amp;#123;
        super();
        // 调用父类普通方法
        console.log(super.test()); // 0
    &amp;#125;
    static test3()&amp;#123;
        // 调用父类静态方法
        return super.test1+2;
    &amp;#125;
&amp;#125;
Child2.test3(); // 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;注意要点-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意要点-2&#34;&gt;#&lt;/a&gt; 注意要点&lt;/h3&gt;
&lt;p&gt;不可继承常规对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Father = &amp;#123;
    // ...
&amp;#125;
class Child extends Father &amp;#123;
     // ...
&amp;#125;
// Uncaught TypeError: Class extends value #&amp;lt;Object&amp;gt; is not a constructor or null
 
// 解决方案
Object.setPrototypeOf(Child.prototype, Father);
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
