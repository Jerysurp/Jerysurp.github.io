<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>熵白之痕</title>
        <subtitle>以前进为目标吧</subtitle>
        <icon>https://entropywhite.com/images/favicon.ico</icon>
        <link>https://entropywhite.com</link>
        <author>
          <name>EntropyWhite</name>
        </author>
        <description>欢迎来到熵白的博客</description>
        <language>zh-CN</language>
        <pubDate>Thu, 30 Jun 2022 22:25:00 +0800</pubDate>
        <lastBuildDate>Thu, 30 Jun 2022 22:25:00 +0800</lastBuildDate>
        <category term="web" />
        <category term="前端" />
        <category term="markdown" />
        <category term="hexo" />
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/Symbol/</guid>
            <title>Symbol</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/Symbol/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h2&gt;
&lt;p&gt;ES6 引入了一种新的原始数据类型 Symbol ，表示独一无二的值，最大的用法是用来定义对象的唯一属性名&lt;/p&gt;
&lt;p&gt;ES6 数据类型除了 Number 、 String 、 Boolean 、 Object、 null 和 undefined ，还新增了 Symbol&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;基本用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本用法&#34;&gt;#&lt;/a&gt; 基本用法&lt;/h2&gt;
&lt;p&gt;Symbol 函数栈不能用 new 命令，因为 Symbol 是原始数据类型，不是对象。可以接受一个字符串作为参数，为新创建的 Symbol 提供描述，用来显示在控制台或者作为字符串的时候使用，便于区分&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let sy = Symbol(&#34;KK&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console.log(sy);   // Symbol(KK)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;typeof(sy);        // &#34;symbol&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// 相同参数 Symbol() 返回的值不相等&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let sy1 = Symbol(&#34;kk&#34;); &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sy === sy1;       // false&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;使用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用场景&#34;&gt;#&lt;/a&gt; 使用场景&lt;/h2&gt;
&lt;h3 id=&#34;作为属性名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作为属性名&#34;&gt;#&lt;/a&gt; 作为属性名&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;用法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于每一个 Symbol 的值都是不相等的，所以 Symbol 作为对象的属性名，可以保证属性不重名&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let sy = Symbol(&#34;key1&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// 写法1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let syObject = &amp;#123;&amp;#125;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;syObject[sy] = &#34;kk&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console.log(syObject);    // &amp;#123;Symbol(key1): &#34;kk&#34;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// 写法2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let syObject = &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  [sy]: &#34;kk&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console.log(syObject);    // &amp;#123;Symbol(key1): &#34;kk&#34;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// 写法3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let syObject = &amp;#123;&amp;#125;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object.defineProperty(syObject, sy, &amp;#123;value: &#34;kk&#34;&amp;#125;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console.log(syObject);   // &amp;#123;Symbol(key1): &#34;kk&#34;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Symbol 作为对象属性名时不能用。运算符，要用方括号。因为。运算符后面是字符串，所以取到的是字符串 sy 属性，而不是 Symbol 值 sy 属性&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let syObject = &amp;#123;&amp;#125;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;syObject[sy] = &#34;kk&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;syObject[sy];  // &#34;kk&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;syObject.sy;   // undefined&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;注意点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意点&#34;&gt;#&lt;/a&gt; 注意点&lt;/h3&gt;
&lt;p&gt;Symbol 值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问。但是不会出现在 for...in 、 for...of 的循环中，也不会被 Object.keys () 、 Object.getOwnPropertyNames () 返回。如果要读取到一个对象的 Symbol 属性，可以通过 Object.getOwnPropertySymbols () 和 Reflect.ownKeys () 取到&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let syObject = &amp;#123;&amp;#125;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;syObject[sy] = &#34;kk&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console.log(syObject);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;for (let i in syObject) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  console.log(i);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;    // 无输出&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object.keys(syObject);                     // []&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object.getOwnPropertySymbols(syObject);    // [Symbol(key1)]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Reflect.ownKeys(syObject);                 // [Symbol(key1)]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;定义常量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义常量&#34;&gt;#&lt;/a&gt; 定义常量&lt;/h3&gt;
&lt;p&gt;在 ES5 使用字符串表示常量。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_RED = &#34;red&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_YELLOW = &#34;yellow&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_BLUE = &#34;blue&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;但是用字符串不能保证常量是独特的，这样会引起一些问题：&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_RED = &#34;red&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_YELLOW = &#34;yellow&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_BLUE = &#34;blue&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const MY_BLUE = &#34;blue&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;function ColorException(message) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   this.message = message;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   this.name = &#34;ColorException&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;function getConstantName(color) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    switch (color) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        case COLOR_RED :&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            return &#34;COLOR_RED&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        case COLOR_YELLOW :&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            return &#34;COLOR_YELLOW &#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        case COLOR_BLUE:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            return &#34;COLOR_BLUE&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        case MY_BLUE:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            return &#34;MY_BLUE&#34;;         &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        default:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            throw new ColorException(&#34;Can&#39;t find this color&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;try &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   var color = &#34;green&#34;; // green 引发异常&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   var colorName = getConstantName(color);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125; catch (e) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   var colorName = &#34;unknown&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   console.log(e.message, e.name); // 传递异常对象到错误处理&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;但是使用 Symbol 定义常量，这样就可以保证这一组常量的值都不相等。用 Symbol 来修改上面的例子&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_RED = Symbol(&#34;red&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_YELLOW = Symbol(&#34;yellow&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const COLOR_BLUE = Symbol(&#34;blue&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;function ColorException(message) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   this.message = message;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   this.name = &#34;ColorException&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;function getConstantName(color) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    switch (color) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        case COLOR_RED :&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            return &#34;COLOR_RED&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        case COLOR_YELLOW :&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            return &#34;COLOR_YELLOW &#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        case COLOR_BLUE:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            return &#34;COLOR_BLUE&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        default:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            throw new ColorException(&#34;Can&#39;t find this color&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;try &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   var color = &#34;green&#34;; // green 引发异常&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   var colorName = getConstantName(color);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125; catch (e) &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   var colorName = &#34;unknown&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   console.log(e.message, e.name); // 传递异常对象到错误处理&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Symbol 的值是唯一的，所以不会出现相同值得常量，即可以保证 switch 按照代码预想的方式执行&lt;/p&gt;
&lt;h3 id=&#34;symbolfor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#symbolfor&#34;&gt;#&lt;/a&gt; Symbol.for()&lt;/h3&gt;
&lt;p&gt;Symbol.for () 类似单例模式，首先会在全局搜索被登记的 Symbol 中是否有该字符串参数作为名称的 Symbol 值，如果有即返回该 Symbol 值，若没有则新建并返回一个以该字符串参数为名称的 Symbol 值，并登记在全局环境中供搜索&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let yellow = Symbol(&#34;Yellow&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let yellow1 = Symbol.for(&#34;Yellow&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yellow === yellow1;      // false&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let yellow2 = Symbol.for(&#34;Yellow&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yellow1 === yellow2;     // true&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;symbolkeyfor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#symbolkeyfor&#34;&gt;#&lt;/a&gt; Symbol.keyFor()&lt;/h3&gt;
&lt;p&gt;Symbol.keyFor () 返回一个已登记的 Symbol 类型值的 key ，用来检测该字符串参数作为名称的 Symbol 值是否已被登记&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;let yellow1 = Symbol.for(&#34;Yellow&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Symbol.keyFor(yellow1);    // &#34;Yellow&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/Reflect%E4%B8%8EProxy/</guid>
            <title>Reflect与Proxy</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/Reflect%E4%B8%8EProxy/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:22:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h2&gt;
&lt;p&gt;Proxy 与 Reflect 是 ES6 为了操作对象引入的 API 。&lt;/p&gt;
&lt;p&gt;Proxy 可以对目标对象的读取、函数调用等操作进行拦截，然后进行操作处理。它不直接操作对象，而是像代理模式，通过对象的代理对象进行操作，在进行这些操作时，可以添加一些需要的额外操作。&lt;/p&gt;
&lt;p&gt;Reflect 可以用于获取目标对象的行为，它与 Object 类似，但是更易读，为操作对象提供了一种更优雅的方式。它的方法与 Proxy 是对应的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;基本用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本用法&#34;&gt;#&lt;/a&gt; 基本用法&lt;/h2&gt;
&lt;h3 id=&#34;proxy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#proxy&#34;&gt;#&lt;/a&gt; Proxy&lt;/h3&gt;
&lt;p&gt;一个 Proxy 对象由两个部分组成： target 、 handler 。在通过 Proxy 构造函数生成实例对象时，需要提供这两个参数。 target 即目标对象， handler 是一个对象，声明了代理 target 的指定行为。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let target = &amp;#123;
    name: &#39;Tom&#39;,
    age: 24
&amp;#125;
let handler = &amp;#123;
    get: function(target, key) &amp;#123;
        console.log(&#39;getting &#39;+key);
        return target[key]; // 不是target.key
    &amp;#125;,
    set: function(target, key, value) &amp;#123;
        console.log(&#39;setting &#39;+key);
        target[key] = value;
    &amp;#125;
&amp;#125;
let proxy = new Proxy(target, handler)
proxy.name     // 实际执行 handler.get
proxy.age = 25 // 实际执行 handler.set
// getting name
// setting age
// 25
 
// target 可以为空对象
let targetEpt = &amp;#123;&amp;#125;
let proxyEpt = new Proxy(targetEpt, handler)
// 调用 get 方法，此时目标对象为空，没有 name 属性
proxyEpt.name // getting name
// 调用 set 方法，向目标对象中添加了 name 属性
proxyEpt.name = &#39;Tom&#39;
// setting name
// &amp;quot;Tom&amp;quot;
// 再次调用 get ，此时已经存在 name 属性
proxyEpt.name
// getting name
// &amp;quot;Tom&amp;quot;
 
// 通过构造函数新建实例时其实是对目标对象进行了浅拷贝，因此目标对象与代理对象会互相
// 影响
targetEpt
// &amp;#123;name: &amp;quot;Tom&amp;quot;&amp;#125;
 
// handler 对象也可以为空，相当于不设置拦截操作，直接访问目标对象
let targetEmpty = &amp;#123;&amp;#125;
let proxyEmpty = new Proxy(targetEmpty,&amp;#123;&amp;#125;)
proxyEmpty.name = &amp;quot;Tom&amp;quot;
targetEmpty // &amp;#123;name: &amp;quot;Tom&amp;quot;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;实例方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实例方法&#34;&gt;#&lt;/a&gt; 实例方法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;get(target, propKey, receiver)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于 target 对象上 propKey 读取操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let exam =&amp;#123;
    name: &amp;quot;Tom&amp;quot;,
    age: 24
&amp;#125;
let proxy = new Proxy(exam, &amp;#123;
  get(target, propKey, receiver) &amp;#123;
    console.log(&#39;Getting &#39; + propKey);
    return target[propKey];
  &amp;#125;
&amp;#125;)
proxy.name 
// Getting name
// &amp;quot;Tom&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get () 方法可以继承&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let proxy = new Proxy(&amp;#123;&amp;#125;, &amp;#123;
  get(target, propKey, receiver) &amp;#123;
      // 实现私有属性读取保护
      if(propKey[0] === &#39;_&#39;)&amp;#123;
          throw new Erro(`Invalid attempt to get private     &amp;quot;$&amp;#123;propKey&amp;#125;&amp;quot;`);
      &amp;#125;
      console.log(&#39;Getting &#39; + propKey);
      return target[propKey];
  &amp;#125;
&amp;#125;);
 
let obj = Object.create(proxy);
obj.name
// Getting name
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;set(target,propKey,value,receiver)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于拦截 target 对象上的 propKey 的赋值操作。如果目标对象自身的某个属性，不可写且不可配置，那么 set 方法不起作用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let validator = &amp;#123;
    set: function(obj, prop, value) &amp;#123;
        if (prop === &#39;age&#39;) &amp;#123;
            if (!Number.isInteger(value)) &amp;#123;
                throw new TypeError(&#39;The age is not an integer&#39;);
            &amp;#125;
            if (value &amp;gt; 200) &amp;#123;
                throw new RangeError(&#39;The age seems invalid&#39;);
            &amp;#125;
        &amp;#125;
        // 对于满足条件的 age 属性以及其他属性，直接保存
        obj[prop] = value;
    &amp;#125;
&amp;#125;;
let proxy= new Proxy(&amp;#123;&amp;#125;, validator)
proxy.age = 100;
proxy.age           // 100
proxy.age = &#39;oppps&#39; // 报错
proxy.age = 300     // 报错
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第四个参数 receiver 表示原始操作行为所在对象，一般是 Proxy 实例本身&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const handler = &amp;#123;
    set: function(obj, prop, value, receiver) &amp;#123;
        obj[prop] = receiver;
    &amp;#125;
&amp;#125;;
const proxy = new Proxy(&amp;#123;&amp;#125;, handler);
proxy.name= &#39;Tom&#39;;
proxy.name=== proxy // true
 
const exam = &amp;#123;&amp;#125;
Object.setPrototypeOf(exam, proxy)
exam.name = &amp;quot;Tom&amp;quot;
exam.name === exam // true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意，严格模式下，set 代理如果没有返回 true，就会报错&lt;/p&gt;
&lt;h3 id=&#34;applytarget-ctx-args&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#applytarget-ctx-args&#34;&gt;#&lt;/a&gt; apply(target, ctx, args)&lt;/h3&gt;
&lt;p&gt;用于拦截函数的调用、call 和 reply 操作。target 表示目标对象，ctx 表示目标对象上下文，args 表示目标对象的参数数组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function sub(a, b)&amp;#123;
    return a - b;
&amp;#125;
let handler = &amp;#123;
    apply: function(target, ctx, args)&amp;#123;
        console.log(&#39;handle apply&#39;);
        return Reflect.apply(...arguments);
    &amp;#125;
&amp;#125;
let proxy = new Proxy(sub, handler)
proxy(2, 1) 
// handle apply
// 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;has(target, propKey)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于拦截 HasProperty 操作，即在判断 target 对象是否存在 propKey 属性时，会被这个方法拦截。此方法不判断一个属性是对象自身的属性，还是继承的属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let  handler = &amp;#123;
    has: function(target, propKey)&amp;#123;
        console.log(&amp;quot;handle has&amp;quot;);
        return propKey in target;
    &amp;#125;
&amp;#125;
let exam = &amp;#123;name: &amp;quot;Tom&amp;quot;&amp;#125;
let proxy = new Proxy(exam, handler)
&#39;name&#39; in proxy
// handle has
// true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：此方法不拦截 for ... in 循环。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;construct(target, args)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于拦截 new 命令。返回值必须为对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let handler = &amp;#123;
    construct: function (target, args, newTarget) &amp;#123;
        console.log(&#39;handle construct&#39;)
        return Reflect.construct(target, args, newTarget)  
    &amp;#125;
&amp;#125;
class Exam &amp;#123; 
    constructor (name) &amp;#123;  
        this.name = name 
    &amp;#125;
&amp;#125;
let ExamProxy = new Proxy(Exam, handler)
let proxyObj = new ExamProxy(&#39;Tom&#39;)
console.log(proxyObj)
// handle construct
// exam &amp;#123;name: &amp;quot;Tom&amp;quot;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;deleteProperty(target, propKey)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于拦截 delete 操作，如果这个方法抛出错误或者返回 false ，propKey 属性就无法被 delete 命令删除。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defineProperty(target, propKey, propDesc)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于拦截 Object.definePro 若目标对象不可扩展，增加目标对象上不存在的属性会报错；若属性不可写或不可配置，则不能改变这些属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let handler = &amp;#123;
    defineProperty: function(target, propKey, propDesc)&amp;#123;
        console.log(&amp;quot;handle defineProperty&amp;quot;);
        return true;
    &amp;#125;
&amp;#125;
let target = &amp;#123;&amp;#125;
let proxy = new Proxy(target, handler)
proxy.name = &amp;quot;Tom&amp;quot;
// handle defineProperty
target
// &amp;#123;name: &amp;quot;Tom&amp;quot;&amp;#125;
 
// defineProperty 返回值为false，添加属性操作无效
let handler1 = &amp;#123;
    defineProperty: function(target, propKey, propDesc)&amp;#123;
        console.log(&amp;quot;handle defineProperty&amp;quot;);
        return false;
    &amp;#125;
&amp;#125;
let target1 = &amp;#123;&amp;#125;
let proxy1 = new Proxy(target1, handler1)
proxy1.name = &amp;quot;Jerry&amp;quot;
target1
// &amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;erty 操作&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getOwnPropertyDescriptor(target, propKey)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于拦截 Object.getOwnPropertyD () 返回值为属性描述对象或者 undefined&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let handler = &amp;#123;
    getOwnPropertyDescriptor: function(target, propKey)&amp;#123;
        return Object.getOwnPropertyDescriptor(target, propKey);
    &amp;#125;
&amp;#125;
let target = &amp;#123;name: &amp;quot;Tom&amp;quot;&amp;#125;
let proxy = new Proxy(target, handler)
Object.getOwnPropertyDescriptor(proxy, &#39;name&#39;)
// &amp;#123;value: &amp;quot;Tom&amp;quot;, writable: true, enumerable: true, configurable: 
// true&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;ptor 属性&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getPrototypeOf(target)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主要用于拦截获取对象原型的操作。包括以下操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- Object.prototype._proto_
- Object.prototype.isPrototypeOf()
- Object.getPrototypeOf()
- Reflect.getPrototypeOf()
- instanceof
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;let exam = &amp;#123;&amp;#125;
let proxy = new Proxy(&amp;#123;&amp;#125;,&amp;#123;
    getPrototypeOf: function(target)&amp;#123;
        return exam;
    &amp;#125;
&amp;#125;)
Object.getPrototypeOf(proxy) // &amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意，返回值必须是对象或者 null ，否则报错。另外，如果目标对象不可扩展（non-extensible），getPrototypeOf 方法必须返回目标对象的原型对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let proxy = new Proxy(&amp;#123;&amp;#125;,&amp;#123;
    getPrototypeOf: function(target)&amp;#123;
        return true;
    &amp;#125;
&amp;#125;)
Object.getPrototypeOf(proxy)
// TypeError: &#39;getPrototypeOf&#39; on proxy: trap returned neither object // nor null
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;isExtensible(target)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于拦截 Object.isExtensible 操作。&lt;/p&gt;
&lt;p&gt;该方法只能返回布尔值，否则返回值会被自动转为布尔值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let proxy = new Proxy(&amp;#123;&amp;#125;,&amp;#123;
    isExtensible:function(target)&amp;#123;
        return true;
    &amp;#125;
&amp;#125;)
Object.isExtensible(proxy) // true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：它的返回值必须与目标对象的 isExtensible 属性保持一致，否则会抛出错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let proxy = new Proxy(&amp;#123;&amp;#125;,&amp;#123;
    isExtensible:function(target)&amp;#123;
        return false;
    &amp;#125;
&amp;#125;)
Object.isExtensible(proxy)
// TypeError: &#39;isExtensible&#39; on proxy: trap result does not reflect 
// extensibility of proxy target (which is &#39;true&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ownKeys(target)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于拦截对象自身属性的读取操作。主要包括以下操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- Object.getOwnPropertyNames()
- Object.getOwnPropertySymbols()
- Object.keys()
- or...in
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;方法返回的数组成员，只能是字符串或 Symbol 值，否则会报错。&lt;/p&gt;
&lt;p&gt;若目标对象中含有不可配置的属性，则必须将这些属性在结果中返回，否则就会报错。&lt;/p&gt;
&lt;p&gt;若目标对象不可扩展，则必须全部返回且只能返回目标对象包含的所有属性，不能包含不存在的属性，否则也会报错。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let proxy = new Proxy( &amp;#123;
  name: &amp;quot;Tom&amp;quot;,
  age: 24
&amp;#125;, &amp;#123;
    ownKeys(target) &amp;#123;
        return [&#39;name&#39;];
    &amp;#125;
&amp;#125;);
Object.keys(proxy)
// [ &#39;name&#39; ]f返回结果中，三类属性会被过滤：
//          - 目标对象上没有的属性
//          - 属性名为 Symbol 值的属性
//          - 不可遍历的属性
 
let target = &amp;#123;
  name: &amp;quot;Tom&amp;quot;,
  [Symbol.for(&#39;age&#39;)]: 24,
&amp;#125;;
// 添加不可遍历属性 &#39;gender&#39;
Object.defineProperty(target, &#39;gender&#39;, &amp;#123;
  enumerable: false,
  configurable: true,
  writable: true,
  value: &#39;male&#39;
&amp;#125;);
let handler = &amp;#123;
    ownKeys(target) &amp;#123;
        return [&#39;name&#39;, &#39;parent&#39;, Symbol.for(&#39;age&#39;), &#39;gender&#39;];
    &amp;#125;
&amp;#125;;
let proxy = new Proxy(target, handler);
Object.keys(proxy)
// [&#39;name&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;preventExtensions(target)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;拦截 Object.preventExtensions 操作。&lt;/p&gt;
&lt;p&gt;该方法必须返回一个布尔值，否则会自动转为布尔值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 只有目标对象不可扩展时（即 Object.isExtensible(proxy) 为 false ），
// proxy.preventExtensions 才能返回 true ，否则会报错
var proxy = new Proxy(&amp;#123;&amp;#125;, &amp;#123;
  preventExtensions: function(target) &amp;#123;
    return true;
  &amp;#125;
&amp;#125;);
// 由于 proxy.preventExtensions 返回 true，此处也会返回 true，因此会报错
Object.preventExtensions(proxy) 被// TypeError: &#39;preventExtensions&#39; on proxy: trap returned truish but // the proxy target is extensible
 
// 解决方案
 var proxy = new Proxy(&amp;#123;&amp;#125;, &amp;#123;
  preventExtensions: function(target) &amp;#123;
    // 返回前先调用 Object.preventExtensions
    Object.preventExtensions(target);
    return true;
  &amp;#125;
&amp;#125;);
Object.preventExtensions(proxy)
// Proxy &amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;setPrototypeOf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主要用来拦截 Object.setPrototypeOf 方法。&lt;/p&gt;
&lt;p&gt;返回值必须为布尔值，否则会被自动转为布尔值。&lt;/p&gt;
&lt;p&gt;若目标对象不可扩展，setPrototypeOf 方法不得改变目标对象的原型。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let proto = &amp;#123;&amp;#125;
let proxy = new Proxy(function () &amp;#123;&amp;#125;, &amp;#123;
    setPrototypeOf: function(target, proto) &amp;#123;
        console.log(&amp;quot;setPrototypeOf&amp;quot;);
        return true;
    &amp;#125;
&amp;#125;
);
Object.setPrototypeOf(proxy, proto);
// setPrototypeOf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Proxy.revocable()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于返回一个可取消的 Proxy 实例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let &amp;#123;proxy, revoke&amp;#125; = Proxy.revocable(&amp;#123;&amp;#125;, &amp;#123;&amp;#125;);
proxy.name = &amp;quot;Tom&amp;quot;;
revoke();
proxy.name 
// TypeError: Cannot perform &#39;get&#39; on a proxy that has been revoked
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reflect&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reflect&#34;&gt;#&lt;/a&gt; Reflect&lt;/h3&gt;
&lt;p&gt;ES6 中将 Object 的一些明显属于语言内部的方法移植到了 Reflect 对象上（当前某些方法会同时存在于 Object 和 Reflect 对象上），未来的新方法会只部署在 Reflect 对象上。&lt;/p&gt;
&lt;p&gt;Reflect 对象对某些方法的返回结果进行了修改，使其更合理。&lt;/p&gt;
&lt;p&gt;Reflect 对象使用函数的方式实现了 Object 的命令式操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;静态方法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Reflect.get(target, name, receiver)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查找并返回 target 对象的 name 属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let exam = &amp;#123;
    name: &amp;quot;Tom&amp;quot;,
    age: 24,
    get info()&amp;#123;
        return this.name + this.age;
    &amp;#125;
&amp;#125;
Reflect.get(exam, &#39;name&#39;); // &amp;quot;Tom&amp;quot;
 
// 当 target 对象中存在 name 属性的 getter 方法， getter 方法的 this 会绑定 // receiver
let receiver = &amp;#123;
    name: &amp;quot;Jerry&amp;quot;,
    age: 20
&amp;#125;
Reflect.get(exam, &#39;info&#39;, receiver); // Jerry20
 
// 当 name 为不存在于 target 对象的属性时，返回 undefined
Reflect.get(exam, &#39;birth&#39;); // undefined
 
// 当 target 不是对象时，会报错
Reflect.get(1, &#39;name&#39;); // TypeError
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.set(target, name, value, receiver)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将 target 的 name 属性设置为 value。返回值为 boolean ，true 表示修改成功，false 表示失败。当 target 为不存在的对象时，会报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let exam = &amp;#123;
    name: &amp;quot;Tom&amp;quot;,
    age: 24,
    set info(value)&amp;#123;
        return this.age = value;
    &amp;#125;
&amp;#125;
exam.age; // 24
Reflect.set(exam, &#39;age&#39;, 25); // true
exam.age; // 25
 
// value 为空时会将 name 属性清除
Reflect.set(exam, &#39;age&#39;, ); // true
exam.age; // undefined
 
// 当 target 对象中存在 name 属性 setter 方法时，setter 方法中的 this 会绑定 // receiver , 所以修改的实际上是 receiver 的属性,
let receiver = &amp;#123;
    age: 18
&amp;#125;
Reflect.set(exam, &#39;info&#39;, 1, receiver); // true
receiver.age; // 1
 
let receiver1 = &amp;#123;
    name: &#39;oppps&#39;
&amp;#125;
Reflect.set(exam, &#39;info&#39;, 1, receiver1);
receiver1.age; // 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.has(obj, name)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;是 name in obj 指令的函数化，用于查找 name 属性在 obj 对象中是否存在。返回值为 boolean。如果 obj 不是对象则会报错 TypeError&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let exam = &amp;#123;
    name: &amp;quot;Tom&amp;quot;,
    age: 24
&amp;#125;
Reflect.has(exam, &#39;name&#39;); // true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.deleteProperty(obj, property)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;是 delete obj [property] 的函数化，用于删除 obj 对象的 property 属性，返回值为 boolean。如果 obj 不是对象则会报错 TypeError&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let exam = &amp;#123;
    name: &amp;quot;Tom&amp;quot;,
    age: 24
&amp;#125;
Reflect.deleteProperty(exam , &#39;name&#39;); // true
exam // &amp;#123;age: 24&amp;#125; 
// property 不存在时，也会返回 true
Reflect.deleteProperty(exam , &#39;name&#39;); // true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.construct(obj, args)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等同于 new target (...args)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function exam(name)&amp;#123;
    this.name = name;
&amp;#125;
Reflect.construct(exam, [&#39;Tom&#39;]); // exam &amp;#123;name: &amp;quot;Tom&amp;quot;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.getPrototypeOf(obj)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于读取 obj 的 &lt;em&gt;proto&lt;/em&gt; 属性。在 obj 不是对象时不会像 Object 一样把 obj 转为对象，而是会报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Exam&amp;#123;&amp;#125;
let obj = new Exam()
Reflect.getPrototypeOf(obj) === Exam.prototype // true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.setPrototypeOf(obj, newProto)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于设置目标对象的 prototype。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let obj =&amp;#123;&amp;#125;
Reflect.setPrototypeOf(obj, Array.prototype); // true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.apply(func, thisArg, args)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等同于 Function.prototype.apply.call (func, thisArg, args) 。func 表示目标函数；thisArg 表示目标函数绑定的 this 对象；args 表示目标函数调用时传入的参数列表，可以是数组或类似数组的对象。若目标函数无法调用，会抛出 TypeError&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Reflect.apply(Math.max, Math, [1, 3, 5, 3, 1]); // 5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.defineProperty(target, propertyKey, attributes)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于为目标对象定义属性。如果 target 不是对象，会抛出错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let myDate= &amp;#123;&amp;#125;
Reflect.defineProperty(MyDate, &#39;now&#39;, &amp;#123;
  value: () =&amp;gt; Date.now()
&amp;#125;); // true
 
const student = &amp;#123;&amp;#125;;
Reflect.defineProperty(student, &amp;quot;name&amp;quot;, &amp;#123;value: &amp;quot;Mike&amp;quot;&amp;#125;); // true
student.name; // &amp;quot;Mike&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.getOwnPropertyDescriptor(target, propertyKey)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于得到 target 对象的 propertyKey 属性的描述对象。在 target 不是对象时，会抛出错误表示参数非法，不会将非对象转换为对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var exam = &amp;#123;&amp;#125;
Reflect.defineProperty(exam, &#39;name&#39;, &amp;#123;
  value: true,
  enumerable: false,
&amp;#125;)
Reflect.getOwnPropertyDescriptor(exam, &#39;name&#39;)
// &amp;#123; configurable: false, enumerable: false, value: true, writable:
// false&amp;#125;
 
 
// propertyKey 属性在 target 对象中不存在时，返回 undefined
Reflect.getOwnPropertyDescriptor(exam, &#39;age&#39;) // undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.isExtensible(target)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于判断 target 对象是否可扩展。返回值为 boolean 。如果 target 参数不是对象，会抛出错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let exam = &amp;#123;&amp;#125;
Reflect.isExtensible(exam) // true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.preventExtensions(target)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于让 target 对象变为不可扩展。如果 target 参数不是对象，会抛出错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let exam = &amp;#123;&amp;#125;
Reflect.preventExtensions(exam) // true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Reflect.ownKeys(target)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于返回 target 对象的所有属性，等同于 Object.getOwnPropertyNames 与 Object.getOwnPropertySymbols 之和&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var exam = &amp;#123;
  name: 1,
  [Symbol.for(&#39;age&#39;)]: 4
&amp;#125;
Reflect.ownKeys(exam) // [&amp;quot;name&amp;quot;, Symbol(age)]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;组合使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组合使用&#34;&gt;#&lt;/a&gt; 组合使用&lt;/h2&gt;
&lt;p&gt;Reflect 对象的方法与 Proxy 对象的方法是一一对应的。所以 Proxy 对象的方法可以通过调用 Reflect 对象的方法获取默认行为，然后进行额外操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let exam = &amp;#123;
    name: &amp;quot;Tom&amp;quot;,
    age: 24
&amp;#125;
let handler = &amp;#123;
    get: function(target, key)&amp;#123;
        console.log(&amp;quot;getting &amp;quot;+key);
        return Reflect.get(target,key);
    &amp;#125;,
    set: function(target, key, value)&amp;#123;
        console.log(&amp;quot;setting &amp;quot;+key+&amp;quot; to &amp;quot;+value)
        Reflect.set(target, key, value);
    &amp;#125;
&amp;#125;
let proxy = new Proxy(exam, handler)
proxy.name = &amp;quot;Jerry&amp;quot;
proxy.name
// setting name to Jerry
// getting name
// &amp;quot;Jerry&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;使用场景拓展&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用场景拓展&#34;&gt;#&lt;/a&gt; 使用场景拓展&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;实现观察者模式&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 定义 Set 集合
const queuedObservers = new Set();
// 把观察者函数都放入 Set 集合中
const observe = fn =&amp;gt; queuedObservers.add(fn);
// observable 返回原始对象的代理，拦截赋值操作
const observable = obj =&amp;gt; new Proxy(obj, &amp;#123;set&amp;#125;);
function set(target, key, value, receiver) &amp;#123;
  // 获取对象的赋值操作
  const result = Reflect.set(target, key, value, receiver);
  // 执行所有观察者
  queuedObservers.forEach(observer =&amp;gt; observer());
  // 执行赋值操作
  return result;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;fn =&amp;gt; queuedObservers.add(fn)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等于：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function(fn)&amp;#123; 
    return queuedObservers.add(fn) ;
&amp;#125;;
obj =&amp;gt; new Proxy(obj, &amp;#123;set&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等于：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function(obj)&amp;#123;
    return new Proxy(obj, &amp;#123;set&amp;#125;);
&amp;#125;
observer =&amp;gt; observer()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等于：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function(observer )&amp;#123;
    return observer()
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/JS-Promise%E5%AF%B9%E8%B1%A1/</guid>
            <title>JS-Promise对象</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/JS-Promise%E5%AF%B9%E8%B1%A1/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:21:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;ECMAscript 6 原生提供了 Promise 对象。&lt;/p&gt;
&lt;p&gt;Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。&lt;/p&gt;
&lt;h3 id=&#34;promise-对象有以下两个特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promise-对象有以下两个特点&#34;&gt;#&lt;/a&gt; Promise 对象有以下两个特点:&lt;/h3&gt;
&lt;p&gt;1、对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pending: 初始状态，不是成功或失败状态。&lt;/li&gt;
&lt;li&gt;fulfilled: 意味着操作成功完成。&lt;/li&gt;
&lt;li&gt;rejected: 意味着操作失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 Promise 这个名字的由来，它的英语意思就是「承诺」，表示其他手段无法改变。&lt;/p&gt;
&lt;p&gt;2、一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。&lt;/p&gt;
&lt;h3 id=&#34;promise-优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promise-优缺点&#34;&gt;#&lt;/a&gt; Promise 优缺点&lt;/h3&gt;
&lt;p&gt;有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise 对象提供统一的接口，使得控制异步操作更加容易。&lt;/p&gt;
&lt;p&gt;Promise 也有一些缺点。首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 Pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。&lt;/p&gt;
&lt;h3 id=&#34;promise-创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promise-创建&#34;&gt;#&lt;/a&gt; Promise 创建&lt;/h3&gt;
&lt;p&gt;要想创建一个 promise 对象、可以使用 new 来调用 Promise 的构造器来进行实例化。&lt;/p&gt;
&lt;p&gt;下面是创建 promise 的步骤：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var promise = new Promise(function(resolve, reject) &amp;#123;
    // 异步处理
    // 处理结束后、调用resolve 或 reject
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Promise 构造函数包含一个参数和一个带有 resolve（解析）和 reject（拒绝）两个参数的回调。在回调中执行一些操作（例如异步），如果一切都正常，则调用 resolve，否则调用 reject。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myFirstPromise = new Promise(function(resolve, reject)&amp;#123;
    //当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)
    //在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.
    setTimeout(function()&amp;#123;
        resolve(&amp;quot;成功!&amp;quot;); //代码正常执行！
    &amp;#125;, 250);
&amp;#125;);
 
myFirstPromise.then(function(successMessage)&amp;#123;
    //successMessage的值是上面调用resolve(...)方法传入的值.
    //successMessage参数不一定非要是字符串类型，这里只是举个例子
    document.write(&amp;quot;Yay! &amp;quot; + successMessage);
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于已经实例化过的 promise 对象可以调用 promise.then () 方法，传递 resolve 和 reject 方法作为回调。&lt;/p&gt;
&lt;p&gt;promise.then () 是 promise 最为常用的方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;promise.then(onFulfilled, onRejected)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;promise 简化了对 error 的处理，上面的代码我们也可以这样写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;promise.then(onFulfilled).catch(onRejected)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;promise-ajax&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promise-ajax&#34;&gt;#&lt;/a&gt; Promise Ajax&lt;/h2&gt;
&lt;p&gt;下面是一个用 Promise 对象实现的 Ajax 操作的例子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function ajax(URL) &amp;#123;
    return new Promise(function (resolve, reject) &amp;#123;
        var req = new XMLHttpRequest(); 
        req.open(&#39;GET&#39;, URL, true);
        req.onload = function () &amp;#123;
        if (req.status === 200) &amp;#123; 
                resolve(req.responseText);
            &amp;#125; else &amp;#123;
                reject(new Error(req.statusText));
            &amp;#125; 
        &amp;#125;;
        req.onerror = function () &amp;#123;
            reject(new Error(req.statusText));
        &amp;#125;;
        req.send(); 
    &amp;#125;);
&amp;#125;
var URL = &amp;quot;/try/ajax/testpromise.php&amp;quot;; 
ajax(URL).then(function onFulfilled(value)&amp;#123;
    document.write(&#39;内容是：&#39; + value); 
&amp;#125;).catch(function onRejected(error)&amp;#123;
    document.write(&#39;错误：&#39; + error); 
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码中，resolve 方法和 reject 方法调用时，都带有参数。它们的参数会被传递给回调函数。reject 方法的参数通常是 Error 对象的实例，而 resolve 方法的参数除了正常的值以外，还可能是另一个 Promise 实例，比如像下面这样。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var p1 = new Promise(function(resolve, reject)&amp;#123;
  // ... some code
&amp;#125;);
 
var p2 = new Promise(function(resolve, reject)&amp;#123;
  // ... some code
  resolve(p1);
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码中，p1 和 p2 都是 Promise 的实例，但是 p2 的 resolve 方法将 p1 作为参数，这时 p1 的状态就会传递给 p2。如果调用的时候，p1 的状态是 pending，那么 p2 的回调函数就会等待 p1 的状态改变；如果 p1 的状态已经是 fulfilled 或者 rejected，那么 p2 的回调函数将会立刻执行。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;promiseprototypethen方法链式操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promiseprototypethen方法链式操作&#34;&gt;#&lt;/a&gt; Promise.prototype.then 方法：链式操作&lt;/h2&gt;
&lt;p&gt;Promise.prototype.then 方法返回的是一个新的 Promise 对象，因此可以采用链式写法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getJSON(&amp;quot;/posts.json&amp;quot;).then(function(json) &amp;#123;
  return json.post;
&amp;#125;).then(function(post) &amp;#123;
  // proceed
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的代码使用 then 方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。&lt;/p&gt;
&lt;p&gt;如果前一个回调函数返回的是 Promise 对象，这时后一个回调函数就会等待该 Promise 对象有了运行结果，才会进一步调用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getJSON(&amp;quot;/post/1.json&amp;quot;).then(function(post) &amp;#123;
  return getJSON(post.commentURL);
&amp;#125;).then(function(comments) &amp;#123;
  // 对comments进行处理
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这种设计使得嵌套的异步操作，可以被很容易得改写，从回调函数的 &amp;quot;横向发展&amp;quot; 改为 &amp;quot;向下发展&amp;quot;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;promiseprototypecatch方法捕捉错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promiseprototypecatch方法捕捉错误&#34;&gt;#&lt;/a&gt; Promise.prototype.catch 方法：捕捉错误&lt;/h2&gt;
&lt;p&gt;Promise.prototype.catch 方法是 Promise.prototype.then (null, rejection) 的别名，用于指定发生错误时的回调函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getJSON(&amp;quot;/posts.json&amp;quot;).then(function(posts) &amp;#123;
  // some code
&amp;#125;).catch(function(error) &amp;#123;
  // 处理前一个回调函数运行时发生的错误
  console.log(&#39;发生错误！&#39;, error);
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Promise 对象的错误具有 &amp;quot;冒泡&amp;quot; 性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个 catch 语句捕获&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getJSON(&amp;quot;/post/1.json&amp;quot;).then(function(post) &amp;#123;
  return getJSON(post.commentURL);
&amp;#125;).then(function(comments) &amp;#123;
  // some code
&amp;#125;).catch(function(error) &amp;#123;
  // 处理前两个回调函数的错误
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;promiseall方法promiserace方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promiseall方法promiserace方法&#34;&gt;#&lt;/a&gt; Promise.all 方法，Promise.race 方法&lt;/h2&gt;
&lt;p&gt;Promise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var p = Promise.all([p1,p2,p3]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码中，Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 对象的实例。（Promise.all 方法的参数不一定是数组，但是必须具有 iterator 接口，且返回的每个成员都是 Promise 实例。）&lt;/p&gt;
&lt;p&gt;p 的状态由 p1、p2、p3 决定，分成两种情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（1）只有 p1、p2、p3 的状态都变成 fulfilled，p 的状态才会变成 fulfilled，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。&lt;/li&gt;
&lt;li&gt;（2）只要 p1、p2、p3 之中有一个被 rejected，p 的状态就变成 rejected，此时第一个被 reject 的实例的返回值，会传递给 p 的回调函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一个具体的例子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 生成一个Promise对象的数组
var promises = [2, 3, 5, 7, 11, 13].map(function(id)&amp;#123;
  return getJSON(&amp;quot;/post/&amp;quot; + id + &amp;quot;.json&amp;quot;);
&amp;#125;);
 
Promise.all(promises).then(function(posts) &amp;#123;
  // ...  
&amp;#125;).catch(function(reason)&amp;#123;
  // ...
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Promise.race 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var p = Promise.race([p1,p2,p3]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码中，只要 p1、p2、p3 之中有一个实例率先改变状态，p 的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 p 的返回值。&lt;/p&gt;
&lt;p&gt;如果 Promise.all 方法和 Promise.race 方法的参数，不是 Promise 实例，就会先调用下面讲到的 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;promiseresolve-方法promisereject-方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promiseresolve-方法promisereject-方法&#34;&gt;#&lt;/a&gt; Promise.resolve 方法，Promise.reject 方法&lt;/h2&gt;
&lt;p&gt;有时需要将现有对象转为 Promise 对象，Promise.resolve 方法就起到这个作用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var jsPromise = Promise.resolve($.ajax(&#39;/whatever.json&#39;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码将 jQuery 生成 deferred 对象，转为一个新的 ES6 的 Promise 对象。&lt;/p&gt;
&lt;p&gt;如果 Promise.resolve 方法的参数，不是具有 then 方法的对象（又称 thenable 对象），则返回一个新的 Promise 对象，且它的状态为 fulfilled。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var p = Promise.resolve(&#39;Hello&#39;);
 
p.then(function (s)&amp;#123;
  console.log(s)
&amp;#125;);
// Hello
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码生成一个新的 Promise 对象的实例 p，它的状态为 fulfilled，所以回调函数会立即执行，Promise.resolve 方法的参数就是回调函数的参数。&lt;/p&gt;
&lt;p&gt;如果 Promise.resolve 方法的参数是一个 Promise 对象的实例，则会被原封不动地返回。&lt;/p&gt;
&lt;p&gt;Promise.reject (reason) 方法也会返回一个新的 Promise 实例，该实例的状态为 rejected。Promise.reject 方法的参数 reason，会被传递给实例的回调函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var p = Promise.reject(&#39;出错了&#39;);
 
p.then(null, function (s)&amp;#123;
  console.log(s)
&amp;#125;);
// 出错了
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码生成一个 Promise 对象的实例，状态为 rejected，回调函数会立即执行&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/Map%E4%B8%8ESet/</guid>
            <title>Map与Set</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/Map%E4%B8%8ESet/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:21:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;map-对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#map-对象&#34;&gt;#&lt;/a&gt; Map 对象&lt;/h2&gt;
&lt;p&gt;Map 对象保存键值对。任何值 (对象或者原始值) 都可以作为一个键或一个值。&lt;/p&gt;
&lt;h2 id=&#34;maps-和-objects-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#maps-和-objects-的区别&#34;&gt;#&lt;/a&gt; Maps 和 Objects 的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。&lt;/li&gt;
&lt;li&gt;Map 中的键值是有序的（FIFO 原则），而添加到对象中的键则不是。&lt;/li&gt;
&lt;li&gt;Map 的键值对个数可以从 size 属性获取，而 Object 的键值对个数只能手动计算。&lt;/li&gt;
&lt;li&gt;Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;map-中的-key&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#map-中的-key&#34;&gt;#&lt;/a&gt; Map 中的 key&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;key 是字符串&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myMap = new Map();
var keyString = &amp;quot;a string&amp;quot;; 
 
myMap.set(keyString, &amp;quot;和键&#39;a string&#39;关联的值&amp;quot;);
 
myMap.get(keyString);    // &amp;quot;和键&#39;a string&#39;关联的值&amp;quot;
myMap.get(&amp;quot;a string&amp;quot;);   // &amp;quot;和键&#39;a string&#39;关联的值&amp;quot;
                         // 因为 keyString === &#39;a string&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;key 是对象&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myMap = new Map();
var keyObj = &amp;#123;&amp;#125;, 
 
myMap.set(keyObj, &amp;quot;和键 keyObj 关联的值&amp;quot;);

myMap.get(keyObj); // &amp;quot;和键 keyObj 关联的值&amp;quot;
myMap.get(&amp;#123;&amp;#125;); // undefined, 因为 keyObj !== &amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;key 是函数&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myMap = new Map();
var keyFunc = function () &amp;#123;&amp;#125;, // 函数
 
myMap.set(keyFunc, &amp;quot;和键 keyFunc 关联的值&amp;quot;);
 
myMap.get(keyFunc); // &amp;quot;和键 keyFunc 关联的值&amp;quot;
myMap.get(function() &amp;#123;&amp;#125;) // undefined, 因为 keyFunc !== function () &amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;key 是 NaN&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myMap = new Map();
myMap.set(NaN, &amp;quot;not a number&amp;quot;);
 
myMap.get(NaN); // &amp;quot;not a number&amp;quot;
 
var otherNaN = Number(&amp;quot;foo&amp;quot;);
myMap.get(otherNaN); // &amp;quot;not a number&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;map-的迭代&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#map-的迭代&#34;&gt;#&lt;/a&gt; Map 的迭代&lt;/h3&gt;
&lt;p&gt;对 Map 进行遍历，以下两个最高级。&lt;/p&gt;
&lt;h3 id=&#34;forof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#forof&#34;&gt;#&lt;/a&gt; for...of&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var myMap = new Map();
myMap.set(0, &amp;quot;zero&amp;quot;);
myMap.set(1, &amp;quot;one&amp;quot;);
 
// 将会显示两个 log。 一个是 &amp;quot;0 = zero&amp;quot; 另一个是 &amp;quot;1 = one&amp;quot;
for (var [key, value] of myMap) &amp;#123;
  console.log(key + &amp;quot; = &amp;quot; + value);
&amp;#125;
for (var [key, value] of myMap.entries()) &amp;#123;
  console.log(key + &amp;quot; = &amp;quot; + value);
&amp;#125;
/* 这个 entries 方法返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的 [key, value] 数组。 */
 
// 将会显示两个log。 一个是 &amp;quot;0&amp;quot; 另一个是 &amp;quot;1&amp;quot;
for (var key of myMap.keys()) &amp;#123;
  console.log(key);
&amp;#125;
/* 这个 keys 方法返回一个新的 Iterator 对象， 它按插入顺序包含了 Map 对象中每个元素的键。 */
 
// 将会显示两个log。 一个是 &amp;quot;zero&amp;quot; 另一个是 &amp;quot;one&amp;quot;
for (var value of myMap.values()) &amp;#123;
  console.log(value);
&amp;#125;
/* 这个 values 方法返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的值。 */
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;foreach&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#foreach&#34;&gt;#&lt;/a&gt; forEach()&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var myMap = new Map();
myMap.set(0, &amp;quot;zero&amp;quot;);
myMap.set(1, &amp;quot;one&amp;quot;);
 
// 将会显示两个 logs。 一个是 &amp;quot;0 = zero&amp;quot; 另一个是 &amp;quot;1 = one&amp;quot;
myMap.forEach(function(value, key) &amp;#123;
  console.log(key + &amp;quot; = &amp;quot; + value);
&amp;#125;, myMap)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;map-对象的操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#map-对象的操作&#34;&gt;#&lt;/a&gt; Map 对象的操作&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Map 与 Array 的转换&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var kvArray = [[&amp;quot;key1&amp;quot;, &amp;quot;value1&amp;quot;], [&amp;quot;key2&amp;quot;, &amp;quot;value2&amp;quot;]];
 
// Map 构造函数可以将一个 二维 键值对数组转换成一个 Map 对象
var myMap = new Map(kvArray);
 
// 使用 Array.from 函数可以将一个 Map 对象转换成一个二维键值对数组
var outArray = Array.from(myMap);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Map 的克隆&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myMap1 = new Map([[&amp;quot;key1&amp;quot;, &amp;quot;value1&amp;quot;], [&amp;quot;key2&amp;quot;, &amp;quot;value2&amp;quot;]]);
var myMap2 = new Map(myMap1);
 
console.log(original === clone); 
// 打印 false。 Map 对象构造函数生成实例，迭代出新的对象。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Map 的合并&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var first = new Map([[1, &#39;one&#39;], [2, &#39;two&#39;], [3, &#39;three&#39;],]);
var second = new Map([[1, &#39;uno&#39;], [2, &#39;dos&#39;]]);
 
// 合并两个 Map 对象时，如果有重复的键值，则后面的会覆盖前面的，对应值即 uno，dos， three
var merged = new Map([...first, ...second]);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;set-对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#set-对象&#34;&gt;#&lt;/a&gt; Set 对象&lt;/h2&gt;
&lt;p&gt;Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。&lt;/p&gt;
&lt;h3 id=&#34;set-中的特殊值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#set-中的特殊值&#34;&gt;#&lt;/a&gt; Set 中的特殊值&lt;/h3&gt;
&lt;p&gt;Set 对象存储的值总是唯一的，所以需要判断两个值是否恒等。有几个特殊值需要特殊对待：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+0 与 -0 在存储判断唯一性的时候是恒等的，所以不重复；&lt;/li&gt;
&lt;li&gt;undefined 与 undefined 是恒等的，所以不重复；&lt;/li&gt;
&lt;li&gt;NaN 与 NaN 是不恒等的，但是在 Set 中只能存一个，不重复。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let mySet = new Set();
 
mySet.add(1); // Set(1) &amp;#123;1&amp;#125;
mySet.add(5); // Set(2) &amp;#123;1, 5&amp;#125;
mySet.add(5); // Set(2) &amp;#123;1, 5&amp;#125; 这里体现了值的唯一性
mySet.add(&amp;quot;some text&amp;quot;); 
// Set(3) &amp;#123;1, 5, &amp;quot;some text&amp;quot;&amp;#125; 这里体现了类型的多样性
var o = &amp;#123;a: 1, b: 2&amp;#125;; 
mySet.add(o);
mySet.add(&amp;#123;a: 1, b: 2&amp;#125;); 
// Set(5) &amp;#123;1, 5, &amp;quot;some text&amp;quot;, &amp;#123;…&amp;#125;, &amp;#123;…&amp;#125;&amp;#125; 
// 这里体现了对象之间引用不同不恒等，即使值相同，Set 也能存储
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;类型转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类型转换&#34;&gt;#&lt;/a&gt; 类型转换&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Array 转 Set
var mySet = new Set([&amp;quot;value1&amp;quot;, &amp;quot;value2&amp;quot;, &amp;quot;value3&amp;quot;]);
// 用...操作符，将 Set 转 Array
var myArray = [...mySet];
String
// String 转 Set
var mySet = new Set(&#39;hello&#39;);  // Set(4) &amp;#123;&amp;quot;h&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;l&amp;quot;, &amp;quot;o&amp;quot;&amp;#125;
// 注：Set 中 toString 方法是不能将 Set 转换成 String
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;set-对象作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#set-对象作用&#34;&gt;#&lt;/a&gt; Set 对象作用&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;数组去重&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var mySet = new Set([1, 2, 3, 4, 4]); [...mySet]; // [1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;并集&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = new Set([1, 2, 3]); 
var b = new Set([4, 3, 2]); 
var union = new Set([...a, ...b]); // &amp;#123;1, 2, 3, 4&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;交集&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = new Set([1, 2, 3]); 
var b = new Set([4, 3, 2]); 
var intersect = new Set([...a].filter(x =&amp;gt; b.has(x))); // &amp;#123;2, 3&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;差集&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = new Set([1, 2, 3]); 
var b = new Set([4, 3, 2]); 
var difference = new Set([...a].filter(x =&amp;gt; !b.has(x))); // &amp;#123;1&amp;#125;
var difference =new Set([...[...a].filter(x =&amp;gt; !b.has(x)),...[...b].filter(x =&amp;gt; !a.has(x))]); // &amp;#123;1,4&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1、[...a]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[...a] 就是将 set 转换成 array。以后需要将 set 转换成 array 基本都使用这种方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、[...a].filter()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Array.filter (function (x)) 把传入的函数 function (x) 依次作用于每个元素，x 为元素的值，然后根据返回值是 true 还是 false 决定保留还是丢弃该元素。&lt;/p&gt;
&lt;p&gt;意思就是遍历当前数组，当遍历到某个元素时，返回值为 false 就将该元素从数组中剔除。&lt;/p&gt;
&lt;p&gt;filter () 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、 =&amp;gt; 则是一种简写方法。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x =&amp;gt; x * x 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;相当于：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function(x)&amp;#123;return x*x&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以 &lt;strong&gt;x =&amp;gt; b.has(x)&lt;/strong&gt; 本质是一个函数相当于 &lt;strong&gt;function(x){return b.has（x)}&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、b.has(x)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Set.has (x) 是 set 中的一个方法。即判断当前 set 中是否含有 x，如果有返回 true，没有返回 false。&lt;/p&gt;
&lt;p&gt;所以这段程序也可以写成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = new Set([1, 2, 3]); 
var b = new Set([4, 3, 2]); 
var arr = [...a];            //将a转换成数组
var fArr = arr.filter(function(x)&amp;#123;    //使用filter过滤数组，并将新数组返回到fArr
    return b.has(x);        //判断b中是否含有a中的元素，没有则返回false
&amp;#125;)
var intersect = new Set(fArr);          //将fArr转换成set
console.log(fArr);
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/Promise%E5%AF%B9%E8%B1%A1/</guid>
            <title>Promise对象</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/Promise%E5%AF%B9%E8%B1%A1/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:21:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h2&gt;
&lt;p&gt;是异步编程的一种解决方案。&lt;/p&gt;
&lt;p&gt;从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。&lt;/p&gt;
&lt;h2 id=&#34;promise-状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promise-状态&#34;&gt;#&lt;/a&gt; Promise 状态&lt;/h2&gt;
&lt;h3 id=&#34;状态的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#状态的特点&#34;&gt;#&lt;/a&gt; 状态的特点&lt;/h3&gt;
&lt;p&gt;Promise 异步操作有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。除了异步操作的结果，任何其他操作都无法改变这个状态。&lt;/p&gt;
&lt;p&gt;Promise 对象只有：从 pending 变为 fulfilled 和从 pending 变为 rejected 的状态改变。只要处于 fulfilled 和 rejected ，状态就不会再变了即 resolved（已定型）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const p1 = new Promise(function(resolve,reject)&amp;#123;
    resolve(&#39;success1&#39;);
    resolve(&#39;success2&#39;);
&amp;#125;); 
const p2 = new Promise(function(resolve,reject)&amp;#123;  
    resolve(&#39;success3&#39;); 
    reject(&#39;reject&#39;);
&amp;#125;);
p1.then(function(value)&amp;#123;  
    console.log(value); // success1
&amp;#125;);
p2.then(function(value)&amp;#123; 
    console.log(value); // success3
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;状态的缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#状态的缺点&#34;&gt;#&lt;/a&gt; 状态的缺点&lt;/h3&gt;
&lt;p&gt;无法取消 Promise ，一旦新建它就会立即执行，无法中途取消。&lt;/p&gt;
&lt;p&gt;如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。&lt;/p&gt;
&lt;p&gt;当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。&lt;/p&gt;
&lt;h2 id=&#34;then-方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#then-方法&#34;&gt;#&lt;/a&gt; then 方法&lt;/h2&gt;
&lt;p&gt;then 方法接收两个函数作为参数，第一个参数是 Promise 执行成功时的回调，第二个参数是 Promise 执行失败时的回调，两个函数只会有一个被调用。&lt;/p&gt;
&lt;h3 id=&#34;then-方法的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#then-方法的特点&#34;&gt;#&lt;/a&gt; then 方法的特点&lt;/h3&gt;
&lt;p&gt;在 JavaScript 事件队列的当前运行完成之前，回调函数永远不会被调用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const p = new Promise(function(resolve,reject)&amp;#123;
  resolve(&#39;success&#39;);
&amp;#125;);
 
p.then(function(value)&amp;#123;
  console.log(value);
&amp;#125;);
 
console.log(&#39;first&#39;);
// first
// success
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过 &lt;strong&gt;.then&lt;/strong&gt; 形式添加的回调函数，不论什么时候，都会被调用。&lt;/p&gt;
&lt;p&gt;通过多次调用&lt;/p&gt;
&lt;p&gt;.then&lt;/p&gt;
&lt;p&gt;，可以添加多个回调函数，它们会按照插入顺序并且独立运行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const p = new Promise(function(resolve,reject)&amp;#123;
  resolve(1);
&amp;#125;).then(function(value)&amp;#123; // 第一个then // 1
  console.log(value);
  return value * 2;
&amp;#125;).then(function(value)&amp;#123; // 第二个then // 2
  console.log(value);
&amp;#125;).then(function(value)&amp;#123; // 第三个then // undefined
  console.log(value);
  return Promise.resolve(&#39;resolve&#39;); 
&amp;#125;).then(function(value)&amp;#123; // 第四个then // resolve
  console.log(value);
  return Promise.reject(&#39;reject&#39;); 
&amp;#125;).then(function(value)&amp;#123; // 第五个then //reject:reject
  console.log(&#39;resolve:&#39; + value);
&amp;#125;, function(err) &amp;#123;
  console.log(&#39;reject:&#39; + err);
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then 方法将返回一个 resolved 或 rejected 状态的 Promise 对象用于链式调用，且 Promise 对象的值就是这个返回值。&lt;/p&gt;
&lt;h3 id=&#34;then-方法注意点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#then-方法注意点&#34;&gt;#&lt;/a&gt; then 方法注意点&lt;/h3&gt;
&lt;p&gt;简便的 Promise 链式编程最好保持扁平化，不要嵌套 Promise。&lt;/p&gt;
&lt;p&gt;注意总是返回或终止 Promise 链。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const p1 = new Promise(function(resolve,reject)&amp;#123;
  resolve(1);
&amp;#125;).then(function(result) &amp;#123;
  p2(result).then(newResult =&amp;gt; p3(newResult));
&amp;#125;).then(() =&amp;gt; p4());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建新 Promise 但忘记返回它时，对应链条被打破，导致 p4 会与 p2 和 p3 同时进行。&lt;/p&gt;
&lt;p&gt;大多数浏览器中不能终止的 Promise 链里的 rejection，建议后面都跟上 &lt;strong&gt;.catch(error =&amp;gt; console.log(error));&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;更多文章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更多文章&#34;&gt;#&lt;/a&gt; 更多文章&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;JS-Promise%E5%AF%B9%E8%B1%A1&#34;&gt;JS-Promise 对象&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/let%E5%92%8Cconst/</guid>
            <title>let和const</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/let%E5%92%8Cconst/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:21:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;ES2015 (ES6) 新增加了两个重要的 JavaScript 关键字: &lt;strong&gt;let&lt;/strong&gt; 和 &lt;strong&gt;const&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;let 声明的变量只在 let 命令所在的代码块内有效。&lt;/p&gt;
&lt;p&gt;const 声明一个只读的常量，一旦声明，常量的值就不能改变。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;let-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#let-命令&#34;&gt;#&lt;/a&gt; let 命令&lt;/h2&gt;
&lt;p&gt;基本用法:&lt;/p&gt;
&lt;p&gt;{let a = 0;  a   // 0} a   // 报错 ReferenceError: a is not defined&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码块内有效&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;let 是在代码块内有效，var 是在全局范围内有效:&lt;/p&gt;
&lt;p&gt;{  let a = 0;  var b = 1; } a  // ReferenceError: a is not defined b  // 1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不能重复声明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;let 只能声明一次 var 可以声明多次:&lt;/p&gt;
&lt;p&gt;let a = 1; let a = 2; var b = 3; var b = 4; a  // Identifier &#39;a&#39; has already been declared b  // 4&lt;/p&gt;
&lt;p&gt;for 循环计数器很适合用 let&lt;/p&gt;
&lt;p&gt;for (var i = 0; i &amp;lt; 10; i++) {  setTimeout (function (){    console.log (i);  }) } // 输出十个 10 for (let j = 0; j &amp;lt; 10; j++) {  setTimeout (function (){    console.log (j);  }) } // 输出 0123456789&lt;/p&gt;
&lt;p&gt;变量 i 是用 var 声明的，在全局范围内有效，所以全局中只有一个变量 i, 每次循环时，setTimeout 定时器里面的 i 指的是全局变量 i ，而循环里的十个 setTimeout 是在循环结束后才执行，所以此时的 i 都是 10。&lt;/p&gt;
&lt;p&gt;变量 j 是用 let 声明的，当前的 j 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出 12345。（若每次循环的变量 j 都是重新声明的，如何知道前一个循环的值？这是因为 JavaScript 引擎内部会记住前一个循环的值）。&lt;/p&gt;
&lt;h3 id=&#34;不存在变量提升&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不存在变量提升&#34;&gt;#&lt;/a&gt; 不存在变量提升&lt;/h3&gt;
&lt;p&gt;let 不存在变量提升，var 会变量提升:&lt;/p&gt;
&lt;p&gt;console.log(a);  //ReferenceError: a is not defined let a = &amp;quot;apple&amp;quot;;  console.log(b);  //undefined var b = &amp;quot;banana&amp;quot;;&lt;/p&gt;
&lt;p&gt;变量 b 用 var 声明存在变量提升，所以当脚本开始运行的时候，b 已经存在了，但是还没有赋值，所以会输出 undefined。&lt;/p&gt;
&lt;p&gt;变量 a 用 let 声明不存在变量提升，在声明变量 a 之前，a 不存在，所以会报错。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;const-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#const-命令&#34;&gt;#&lt;/a&gt; const 命令&lt;/h2&gt;
&lt;p&gt;const 声明一个只读变量，声明之后不允许改变。意味着，一旦声明必须初始化，否则会报错。&lt;/p&gt;
&lt;p&gt;基本用法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const PI = &amp;quot;3.1415926&amp;quot;;
PI  // 3.1415926

const MY_AGE;  // SyntaxError: Missing initializer in const declaration    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;暂时性死区:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var PI = &amp;quot;a&amp;quot;;
if(true)&amp;#123;
  console.log(PI);  // ReferenceError: PI is not defined
  const PI = &amp;quot;3.1415926&amp;quot;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ES6 明确规定，代码块内如果存在 let 或者 const，代码块会对这些命令声明的变量从块的开始就形成一个封闭作用域。代码块内，在声明变量 PI 之前使用它会报错。&lt;/p&gt;
&lt;h3 id=&#34;注意要点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意要点&#34;&gt;#&lt;/a&gt; 注意要点&lt;/h3&gt;
&lt;p&gt;const 如何做到变量在声明初始化之后不允许改变的？其实 const 其实保证的不是变量的值不变，而是保证变量指向的内存地址所保存的数据不允许改动。此时，你可能已经想到，简单类型和复合类型保存值的方式是不同的。是的，对于简单类型（数值 number、字符串 string 、布尔值 boolean）, 值就保存在变量指向的那个内存地址，因此 const 声明的简单类型变量等同于常量。而复杂类型（对象 object，数组 array，函数 function），变量指向的内存地址其实是保存了一个指向实际数据的指针，所以 const 只能保证指针是固定的，至于指针指向的数据结构变不变就无法控制了，所以使用 const 声明复杂类型对象时要慎重。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/Class%E7%B1%BB/</guid>
            <title>Class类</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/Class%E7%B1%BB/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:20:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h2&gt;
&lt;p&gt;在 ES6 中，class (类) 作为对象的模板被引入，可以通过 class 关键字定义类。&lt;/p&gt;
&lt;p&gt;class 的本质是 function。&lt;/p&gt;
&lt;p&gt;它可以看作一个语法糖，让对象原型的写法更加清晰、更像面向对象编程的语法。&lt;/p&gt;
&lt;h2 id=&#34;基础用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础用法&#34;&gt;#&lt;/a&gt; 基础用法&lt;/h2&gt;
&lt;h3 id=&#34;类定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类定义&#34;&gt;#&lt;/a&gt; 类定义&lt;/h3&gt;
&lt;p&gt;类表达式可以为匿名或命名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 匿名类
let Example = class &amp;#123;
    constructor(a) &amp;#123;
        this.a = a;
    &amp;#125;
&amp;#125;
// 命名类
let Example = class Example &amp;#123;
    constructor(a) &amp;#123;
        this.a = a;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;类声明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类声明&#34;&gt;#&lt;/a&gt; 类声明&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
    constructor(a) &amp;#123;
        this.a = a;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意要点：不可重复声明&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example&amp;#123;&amp;#125;
class Example&amp;#123;&amp;#125;
// Uncaught SyntaxError: Identifier &#39;Example&#39; has already been 
// declared
 
let Example1 = class&amp;#123;&amp;#125;
class Example&amp;#123;&amp;#125;
// Uncaught SyntaxError: Identifier &#39;Example&#39; has already been 
// declared
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;注意要点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意要点&#34;&gt;#&lt;/a&gt; 注意要点&lt;/h3&gt;
&lt;p&gt;类定义不会被提升，这意味着，必须在访问前对类进行定义，否则就会报错。&lt;/p&gt;
&lt;p&gt;类中方法不需要 function 关键字。&lt;/p&gt;
&lt;p&gt;方法间不能加分号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;new Example(); 
class Example &amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;类的主体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类的主体&#34;&gt;#&lt;/a&gt; 类的主体&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;属性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;prototype&lt;/p&gt;
&lt;p&gt;ES6 中，prototype 仍旧存在，虽然可以直接自类中定义方法，但是其实方法还是定义在 prototype 上的。 覆盖方法 / 初始化时添加方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Example.prototype=&amp;#123;
    //methods
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Object.assign(Example.prototype,&amp;#123;
    //methods
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;静态属性&lt;/p&gt;
&lt;p&gt;静态属性：class 本身的属性，即直接定义在类内部的属性（ Class.propname ），不需要实例化。 ES6 中规定，Class 内部只有静态方法，没有静态属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
// 新提案
    static a = 2;
&amp;#125;
// 目前可行写法
Example.b = 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;公共属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example&amp;#123;&amp;#125;
Example.prototype.a = 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实例属性&lt;/p&gt;
&lt;p&gt;实例属性：定义在实例对象（ this ）上的属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
    a = 2;
    constructor () &amp;#123;
        console.log(this.a);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;name 属性&lt;/p&gt;
&lt;p&gt;返回跟在 class 后的类名 (存在时)。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let Example=class Exam &amp;#123;
    constructor(a) &amp;#123;
        this.a = a;
    &amp;#125;
&amp;#125;
console.log(Example.name); // Exam
 
let Example=class &amp;#123;
    constructor(a) &amp;#123;
        this.a = a;
    &amp;#125;
&amp;#125;
console.log(Example.name); // Example
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;constructor 方法&lt;/p&gt;
&lt;p&gt;constructor 方法是类的默认方法，创建类的实例化对象时被调用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example&amp;#123;
    constructor()&amp;#123;
      console.log(&#39;我是constructor&#39;);
    &amp;#125;
&amp;#125;
new Example(); // 我是constructor
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Test &amp;#123;
    constructor()&amp;#123;
        // 默认返回实例对象 this
    &amp;#125;
&amp;#125;
console.log(new Test() instanceof Test); // true
 
class Example &amp;#123;
    constructor()&amp;#123;
        // 指定返回对象
        return new Test();
    &amp;#125;
&amp;#125;
console.log(new Example() instanceof Example); // false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;静态方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example&amp;#123;
    static sum(a, b) &amp;#123;
        console.log(a+b);
    &amp;#125;
&amp;#125;
Example.sum(1, 2); // 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原型方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
    sum(a, b) &amp;#123;
        console.log(a + b);
    &amp;#125;
&amp;#125;
let exam = new Example();
exam.sum(1, 2); // 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实例方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
    constructor() &amp;#123;
        this.sum = (a, b) =&amp;gt; &amp;#123;
            console.log(a + b);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;类的实例化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类的实例化&#34;&gt;#&lt;/a&gt; 类的实例化&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;class 的实例化必须通过 new 关键字&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;&amp;#125;
 
let exam1 = Example(); 
// Class constructor Example cannot be invoked without &#39;new&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;实例化对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;共享原型对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
    constructor(a, b) &amp;#123;
        this.a = a;
        this.b = b;
        console.log(&#39;Example&#39;);
    &amp;#125;
    sum() &amp;#123;
        return this.a + this.b;
    &amp;#125;
&amp;#125;
let exam1 = new Example(2, 1);
let exam2 = new Example(3, 1);
 
// __proto__ 已废弃，不建议使用
// console.log(exam1.__proto__ == exam2.__proto__); 
 
console.log(Object.getPrototypeOf(exam1) === Object.getPrototypeOf(exam2));// true
 
Object.getPrototypeOf(exam1).sub = function() &amp;#123;
    return this.a - this.b;
&amp;#125;
console.log(exam1.sub()); // 1
console.log(exam2.sub()); // 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;decorator&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#decorator&#34;&gt;#&lt;/a&gt; decorator&lt;/h2&gt;
&lt;p&gt;decorator 是一个函数，用来修改类的行为，在代码编译时产生作用。&lt;/p&gt;
&lt;h3 id=&#34;类修饰&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类修饰&#34;&gt;#&lt;/a&gt; 类修饰&lt;/h3&gt;
&lt;p&gt;一个参数&lt;/p&gt;
&lt;p&gt;第一个参数 target，指向类本身&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function testable(target) &amp;#123;
    target.isTestable = true;
&amp;#125;
@testable
class Example &amp;#123;&amp;#125;
Example.isTestable; // true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多个参数 —— 嵌套实现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function testable(isTestable) &amp;#123;
    return function(target) &amp;#123;
        target.isTestable=isTestable;
    &amp;#125;
&amp;#125;
@testable(true)
class Example &amp;#123;&amp;#125;
Example.isTestable; // true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实例属性&lt;/p&gt;
&lt;p&gt;上面两个例子添加的是静态属性，若要添加实例属性，在类的 prototype 上操作即可。&lt;/p&gt;
&lt;h3 id=&#34;方法修饰&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法修饰&#34;&gt;#&lt;/a&gt; 方法修饰&lt;/h3&gt;
&lt;p&gt;3 个参数：target（类的原型对象）、name（修饰的属性名）、descriptor（该属性的描述对象）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
    @writable
    sum(a, b) &amp;#123;
        return a + b;
    &amp;#125;
&amp;#125;
function writable(target, name, descriptor) &amp;#123;
    descriptor.writable = false;
    return descriptor; // 必须返回
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修饰器执行顺序&lt;/p&gt;
&lt;p&gt;由外向内进入，由内向外执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
    @logMethod(1)
    @logMethod(2)
    sum(a, b)&amp;#123;
        return a + b;
    &amp;#125;
&amp;#125;
function logMethod(id) &amp;#123;
    console.log(&#39;evaluated logMethod&#39;+id);
    return (target, name, desctiptor) =&amp;gt; console.log(&#39;excuted         logMethod &#39;+id);
&amp;#125;
// evaluated logMethod 1
// evaluated logMethod 2
// excuted logMethod 2
// excuted logMethod 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;封装与继承&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#封装与继承&#34;&gt;#&lt;/a&gt; 封装与继承&lt;/h2&gt;
&lt;h3 id=&#34;getter-setter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#getter-setter&#34;&gt;#&lt;/a&gt; getter / setter&lt;/h3&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example&amp;#123;
    constructor(a, b) &amp;#123;
        this.a = a; // 实例化时调用 set 方法
        this.b = b;
    &amp;#125;
    get a()&amp;#123;
        console.log(&#39;getter&#39;);
        return this.a;
    &amp;#125;
    set a(a)&amp;#123;
        console.log(&#39;setter&#39;);
        this.a = a; // 自身递归调用
    &amp;#125;
&amp;#125;
let exam = new Example(1,2); // 不断输出 setter ，最终导致 RangeError
class Example1&amp;#123;
    constructor(a, b) &amp;#123;
        this.a = a;
        this.b = b;
    &amp;#125;
    get a()&amp;#123;
        console.log(&#39;getter&#39;);
        return this._a;
    &amp;#125;
    set a(a)&amp;#123;
        console.log(&#39;setter&#39;);
        this._a = a;
    &amp;#125;
&amp;#125;
let exam1 = new Example1(1,2); // 只输出 setter , 不会调用 getter 方法
console.log(exam1._a); // 1, 可以直接访问
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;getter 不可单独出现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Example &amp;#123;
    constructor(a) &amp;#123;
        this.a = a; 
    &amp;#125;
    get a() &amp;#123;
        return this.a;
    &amp;#125;
&amp;#125;
let exam = new Example(1); // Uncaught TypeError: Cannot set property // a of #&amp;lt;Example&amp;gt; which has only a getter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;getter 与 setter 必须同级出现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Father &amp;#123;
    constructor()&amp;#123;&amp;#125;
    get a() &amp;#123;
        return this._a;
    &amp;#125;
&amp;#125;
class Child extends Father &amp;#123;
    constructor()&amp;#123;
        super();
    &amp;#125;
    set a(a) &amp;#123;
        this._a = a;
    &amp;#125;
&amp;#125;
let test = new Child();
test.a = 2;
console.log(test.a); // undefined
 
class Father1 &amp;#123;
    constructor()&amp;#123;&amp;#125;
    // 或者都放在子类中
    get a() &amp;#123;
        return this._a;
    &amp;#125;
    set a(a) &amp;#123;
        this._a = a;
    &amp;#125;
&amp;#125;
class Child1 extends Father1 &amp;#123;
    constructor()&amp;#123;
        super();
    &amp;#125;
&amp;#125;
let test1 = new Child1();
test1.a = 2;
console.log(test1.a); // 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;extends&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#extends&#34;&gt;#&lt;/a&gt; extends&lt;/h3&gt;
&lt;p&gt;通过 extends 实现类的继承&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Child extends Father &amp;#123; ... &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;super&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#super&#34;&gt;#&lt;/a&gt; super&lt;/h3&gt;
&lt;p&gt;子类 constructor 方法中必须有 super ，且必须出现在 this 之前&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Father &amp;#123;
    constructor() &amp;#123;&amp;#125;
&amp;#125;
class Child extends Father &amp;#123;
    constructor() &amp;#123;&amp;#125;
    // or 
    // constructor(a) &amp;#123;
        // this.a = a;
        // super();
    // &amp;#125;
&amp;#125;
let test = new Child(); // Uncaught ReferenceError: Must call super 
// constructor in derived class before accessing &#39;this&#39; or returning 
// from derived constructor
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调用父类构造函数，只能出现在子类的构造函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Father &amp;#123;
    test()&amp;#123;
        return 0;
    &amp;#125;
    static test1()&amp;#123;
        return 1;
    &amp;#125;
&amp;#125;
class Child extends Father &amp;#123;
    constructor()&amp;#123;
        super();
    &amp;#125;
&amp;#125;
class Child1 extends Father &amp;#123;
    test2() &amp;#123;
        super(); // Uncaught SyntaxError: &#39;super&#39; keyword unexpected     
        // here
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调用父类方法，super 作为对象，在普通方法中，指向父类的原型对象，在静态方法中，指向父类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Child2 extends Father &amp;#123;
    constructor()&amp;#123;
        super();
        // 调用父类普通方法
        console.log(super.test()); // 0
    &amp;#125;
    static test3()&amp;#123;
        // 调用父类静态方法
        return super.test1+2;
    &amp;#125;
&amp;#125;
Child2.test3(); // 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;注意要点-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意要点-2&#34;&gt;#&lt;/a&gt; 注意要点&lt;/h3&gt;
&lt;p&gt;不可继承常规对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Father = &amp;#123;
    // ...
&amp;#125;
class Child extends Father &amp;#123;
     // ...
&amp;#125;
// Uncaught TypeError: Class extends value #&amp;lt;Object&amp;gt; is not a constructor or null
 
// 解决方案
Object.setPrototypeOf(Child.prototype, Father);
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/Generator%E5%87%BD%E6%95%B0/</guid>
            <title>Generator函数</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/Generator%E5%87%BD%E6%95%B0/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:20:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;ES6 新引入了 Generator 函数，可以通过 yield 关键字，把函数的执行流挂起，为改变执行流程提供了可能，从而为异步编程提供解决方案。 基本用法&lt;/p&gt;
&lt;h3 id=&#34;generator-函数组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generator-函数组成&#34;&gt;#&lt;/a&gt; Generator 函数组成&lt;/h3&gt;
&lt;p&gt;Generator 有两个区分于普通函数的部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一是在 function 后面，函数名之前有个 * ；&lt;/li&gt;
&lt;li&gt;函数内部有 yield 表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中 * 用来表示函数为 Generator 函数，yield 用来定义函数内部的状态。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function* func()&amp;#123;
 console.log(&amp;quot;one&amp;quot;);
 yield &#39;1&#39;;
 console.log(&amp;quot;two&amp;quot;);
 yield &#39;2&#39;; 
 console.log(&amp;quot;three&amp;quot;);
 return &#39;3&#39;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;执行机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行机制&#34;&gt;#&lt;/a&gt; 执行机制&lt;/h3&gt;
&lt;p&gt;调用 Generator 函数和调用普通函数一样，在函数名后面加上 () 即可，但是 Generator 函数不会像普通函数一样立即执行，而是返回一个指向内部状态对象的指针，所以要调用遍历器对象 Iterator 的 next 方法，指针就会从函数头部或者上一次停下来的地方开始执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f.next();
// one
// &amp;#123;value: &amp;quot;1&amp;quot;, done: false&amp;#125;
 
f.next();
// two
// &amp;#123;value: &amp;quot;2&amp;quot;, done: false&amp;#125;
 
f.next();
// three
// &amp;#123;value: &amp;quot;3&amp;quot;, done: true&amp;#125;
 
f.next();
// &amp;#123;value: undefined, done: true&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一次调用 next 方法时，从 Generator 函数的头部开始执行，先是打印了 one , 执行到 yield 就停下来，并将 yield 后边表达式的值 &#39;1&#39;，作为返回对象的 value 属性值，此时函数还没有执行完， 返回对象的 done 属性值是 false。&lt;/p&gt;
&lt;p&gt;第二次调用 next 方法时，同上步 。&lt;/p&gt;
&lt;p&gt;第三次调用 next 方法时，先是打印了 three ，然后执行了函数的返回操作，并将 return 后面的表达式的值，作为返回对象的 value 属性值，此时函数已经结束，多以 done 属性值为 true 。&lt;/p&gt;
&lt;p&gt;第四次调用 next 方法时， 此时函数已经执行完了，所以返回 value 属性值是 undefined ，done 属性值是 true 。如果执行第三步时，没有 return 语句的话，就直接返回 {value: undefined, done: true}。&lt;/p&gt;
&lt;h3 id=&#34;函数返回的遍历器对象的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数返回的遍历器对象的方法&#34;&gt;#&lt;/a&gt; 函数返回的遍历器对象的方法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;next 方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般情况下，next 方法不传入参数的时候，yield 表达式的返回值是 undefined 。当 next 传入参数的时候，该参数会作为上一步 yield 的返回值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function* sendParameter()&amp;#123;
    console.log(&amp;quot;start&amp;quot;);
    var x = yield &#39;2&#39;;
    console.log(&amp;quot;one:&amp;quot; + x);
    var y = yield &#39;3&#39;;
    console.log(&amp;quot;two:&amp;quot; + y);
    console.log(&amp;quot;total:&amp;quot; + (x + y));
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;next 不传参&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var sendp1 = sendParameter();
sendp1.next();
// start
// &amp;#123;value: &amp;quot;2&amp;quot;, done: false&amp;#125;
sendp1.next();
// one:undefined
// &amp;#123;value: &amp;quot;3&amp;quot;, done: false&amp;#125;
sendp1.next();
// two:undefined
// total:NaN
// &amp;#123;value: undefined, done: true&amp;#125;
next传参
var sendp2 = sendParameter();
sendp2.next(10);
// start
// &amp;#123;value: &amp;quot;2&amp;quot;, done: false&amp;#125;
sendp2.next(20);
// one:20
// &amp;#123;value: &amp;quot;3&amp;quot;, done: false&amp;#125;
sendp2.next(30);
// two:30
// total:50
// &amp;#123;value: undefined, done: true&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除了使用 next ，还可以使用 for... of 循环遍历 Generator 函数生产的 Iterator 对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;return 方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;return 方法返回给定值，并结束遍历 Generator 函数。&lt;/p&gt;
&lt;p&gt;return 方法提供参数时，返回该参数；不提供参数时，返回 undefined 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function* foo()&amp;#123;
    yield 1;
    yield 2;
    yield 3;
&amp;#125;
var f = foo();
f.next();
// &amp;#123;value: 1, done: false&amp;#125;
f.return(&amp;quot;foo&amp;quot;);
// &amp;#123;value: &amp;quot;foo&amp;quot;, done: true&amp;#125;
f.next();
// &amp;#123;value: undefined, done: true&amp;#125;
throw 方法
throw 方法可以再 Generator 函数体外面抛出异常，再函数体内部捕获。
var g = function* () &amp;#123;
  try &amp;#123;
    yield;
  &amp;#125; catch (e) &amp;#123;
    console.log(&#39;catch inner&#39;, e);
  &amp;#125;
&amp;#125;;
 
var i = g();
i.next();
 
try &amp;#123;
  i.throw(&#39;a&#39;);
  i.throw(&#39;b&#39;);
&amp;#125; catch (e) &amp;#123;
  console.log(&#39;catch outside&#39;, e);
&amp;#125;
// catch inner a
// catch outside b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;遍历器对象抛出了两个错误，第一个被 Generator 函数内部捕获，第二个因为函数体内部的 catch 函数已经执行过了，不会再捕获这个错误，所以这个错误就抛出 Generator 函数体，被函数体外的 catch 捕获。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;yield* 表达式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;yield* 表达式表示 yield 返回一个遍历器对象，用于在 Generator 函数内部，调用另一个 Generator 函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function* callee() &amp;#123;
    console.log(&#39;callee: &#39; + (yield));
&amp;#125;
function* caller() &amp;#123;
    while (true) &amp;#123;
        yield* callee();
    &amp;#125;
&amp;#125;
const callerObj = caller();
callerObj.next();
// &amp;#123;value: undefined, done: false&amp;#125;
callerObj.next(&amp;quot;a&amp;quot;);
// callee: a
// &amp;#123;value: undefined, done: false&amp;#125;
callerObj.next(&amp;quot;b&amp;quot;);
// callee: b
// &amp;#123;value: undefined, done: false&amp;#125;
 
// 等同于
function* caller() &amp;#123;
    while (true) &amp;#123;
        for (var value of callee) &amp;#123;
          yield value;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;使用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用场景&#34;&gt;#&lt;/a&gt; 使用场景&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;实现 Iterator&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为不具备 Iterator 接口的对象提供遍历方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function* objectEntries(obj) &amp;#123;
    const propKeys = Reflect.ownKeys(obj);
    for (const propKey of propKeys) &amp;#123;
        yield [propKey, obj[propKey]];
    &amp;#125;
&amp;#125;
 
const jane = &amp;#123; first: &#39;Jane&#39;, last: &#39;Doe&#39; &amp;#125;;
for (const [key,value] of objectEntries(jane)) &amp;#123;
    console.log(`$&amp;#123;key&amp;#125;: $&amp;#123;value&amp;#125;`);
&amp;#125;
// first: Jane
// last: Doe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reflect.ownKeys () 返回对象所有的属性，不管属性是否可枚举，包括 Symbol。&lt;/p&gt;
&lt;p&gt;jane 原生是不具备 Iterator 接口无法通过 for... of 遍历。这边用了 Generator 函数加上了 Iterator 接口，所以就可以遍历 jane 对象了。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/async%E5%87%BD%E6%95%B0/</guid>
            <title>async函数</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/async%E5%87%BD%E6%95%B0/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:20:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;async&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#async&#34;&gt;#&lt;/a&gt; async&lt;/h2&gt;
&lt;p&gt;async 是 ES7 才有的与异步操作有关的关键字，和 Promise ， Generator 有很大关联的。&lt;/p&gt;
&lt;h3 id=&#34;语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语法&#34;&gt;#&lt;/a&gt; 语法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;async function name([param[, param[, ... param]]]) &amp;#123; statements &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;name: 函数名称。&lt;/li&gt;
&lt;li&gt;param: 要传递给函数的参数的名称。&lt;/li&gt;
&lt;li&gt;statements: 函数体语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;返回值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#返回值&#34;&gt;#&lt;/a&gt; 返回值&lt;/h3&gt;
&lt;p&gt;async 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;async function helloAsync()&amp;#123;
    return &amp;quot;helloAsync&amp;quot;;
  &amp;#125;
  
console.log(helloAsync())  // Promise &amp;#123;&amp;lt;resolved&amp;gt;: &amp;quot;helloAsync&amp;quot;&amp;#125;
 
helloAsync().then(v=&amp;gt;&amp;#123;
   console.log(v);         // helloAsync
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;async 函数中可能会有 await 表达式，async 函数执行时，如果遇到 await 就会先暂停执行 ，等到触发的异步操作完成后，恢复 async 函数的执行并返回解析值。&lt;/p&gt;
&lt;p&gt;await 关键字仅在 async function 中有效。如果在 async function 函数体外使用 await ，你只会得到一个语法错误。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function testAwait()&amp;#123;
   return new Promise((resolve) =&amp;gt; &amp;#123;
       setTimeout(function()&amp;#123;
          console.log(&amp;quot;testAwait&amp;quot;);
          resolve();
       &amp;#125;, 1000);
   &amp;#125;);
&amp;#125;
 
async function helloAsync()&amp;#123;
   await testAwait();
   console.log(&amp;quot;helloAsync&amp;quot;);
 &amp;#125;
helloAsync();
// testAwait
// helloAsync
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;await&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#await&#34;&gt;#&lt;/a&gt; await&lt;/h2&gt;
&lt;p&gt;await 操作符用于等待一个 Promise 对象，它只能在异步函数 async function 内部使用。&lt;/p&gt;
&lt;h3 id=&#34;语法-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语法-2&#34;&gt;#&lt;/a&gt; 语法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[return_value] = await expression;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;expression: 一个 Promise 对象或者任何要等待的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;返回值-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#返回值-2&#34;&gt;#&lt;/a&gt; 返回值&lt;/h3&gt;
&lt;p&gt;返回 Promise 对象的处理结果。如果等待的不是 Promise 对象，则返回该值本身。&lt;/p&gt;
&lt;p&gt;如果一个 Promise 被传递给一个 await 操作符，await 将等待 Promise 正常处理完成并返回其处理结果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function testAwait (x) &amp;#123;
  return new Promise(resolve =&amp;gt; &amp;#123;
    setTimeout(() =&amp;gt; &amp;#123;
      resolve(x);
    &amp;#125;, 2000);
  &amp;#125;);
&amp;#125;
 
async function helloAsync() &amp;#123;
  var x = await testAwait (&amp;quot;hello world&amp;quot;);
  console.log(x); 
&amp;#125;
helloAsync ();
// hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正常情况下，await 命令后面是一个 Promise 对象，它也可以跟其他值，如字符串，布尔值，数值以及普通函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function testAwait()&amp;#123;
   console.log(&amp;quot;testAwait&amp;quot;);
&amp;#125;
async function helloAsync()&amp;#123;
   await testAwait();
   console.log(&amp;quot;helloAsync&amp;quot;);
&amp;#125;
helloAsync();
// testAwait
// helloAsync
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;await 针对所跟不同表达式的处理方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Promise 对象：await 会暂停执行，等待 Promise 对象 resolve，然后恢复 async 函数的执行并返回解析值。&lt;/li&gt;
&lt;li&gt;非 Promise 对象：直接返回对应的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;async function a()&amp;#123;  
  console.log(&amp;quot;1&amp;quot;)  
   console.log(&amp;quot;2&amp;quot;)
&amp;#125;
a()
console.log(&amp;quot;3&amp;quot;)
//打印： 1 2 3 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 await 测试：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;async function a()&amp;#123;  
  await 1  
  console.log(&amp;quot;1&amp;quot;)  
  console.log(&amp;quot;2&amp;quot;)
&amp;#125;
a()
console.log(&amp;quot;3&amp;quot;)
//打印： 3 1 2
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
            <title>ES6字符串</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 22:20:00 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;拓展的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拓展的方法&#34;&gt;#&lt;/a&gt; 拓展的方法&lt;/h3&gt;
&lt;h3 id=&#34;子串的识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子串的识别&#34;&gt;#&lt;/a&gt; 子串的识别&lt;/h3&gt;
&lt;p&gt;ES6 之前判断字符串是否包含子串，用 indexOf 方法，ES6 新增了子串的识别方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;includes()&lt;/strong&gt;：返回布尔值，判断是否找到参数字符串。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;startsWith()&lt;/strong&gt;：返回布尔值，判断参数字符串是否在原字符串的头部。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;endsWith()&lt;/strong&gt;：返回布尔值，判断参数字符串是否在原字符串的尾部。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上三个方法都可以接受两个参数，需要搜索的字符串，和可选的搜索起始位置索引。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let string = &amp;quot;apple,banana,orange&amp;quot;;
string.includes(&amp;quot;banana&amp;quot;);     // true
string.startsWith(&amp;quot;apple&amp;quot;);    // true
string.endsWith(&amp;quot;apple&amp;quot;);      // false
string.startsWith(&amp;quot;banana&amp;quot;,6)  // true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这三个方法只返回布尔值，如果需要知道子串的位置，还是得用 indexOf 和 lastIndexOf 。&lt;/li&gt;
&lt;li&gt;这三个方法如果传入了正则表达式而不是字符串，会抛出错误。而 indexOf 和 lastIndexOf 这两个方法，它们会将正则表达式转换为字符串并搜索它。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字符串重复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串重复&#34;&gt;#&lt;/a&gt; 字符串重复&lt;/h3&gt;
&lt;p&gt;repeat ()：返回新的字符串，表示将字符串重复指定次数返回。&lt;/p&gt;
&lt;h3 id=&#34;字符串重复-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串重复-2&#34;&gt;#&lt;/a&gt; 字符串重复&lt;/h3&gt;
&lt;p&gt;repeat ()：返回新的字符串，表示将字符串重复指定次数返回。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(&amp;quot;Hello,&amp;quot;.repeat(2));  // &amp;quot;Hello,Hello,&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果参数是小数，向下取整&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(&amp;quot;Hello,&amp;quot;.repeat(3.2));  // &amp;quot;Hello,Hello,Hello,&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果参数是 0 至 -1 之间的小数，会进行取整运算，0 至 -1 之间的小数取整得到 -0 ，等同于 repeat 零次&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(&amp;quot;Hello,&amp;quot;.repeat(-0.5));  // &amp;quot;&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果参数是 NaN，等同于 repeat 零次&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(&amp;quot;Hello,&amp;quot;.repeat(NaN));  // &amp;quot;&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果参数是负数或者 Infinity ，会报错:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(&amp;quot;Hello,&amp;quot;.repeat(-1));  
// RangeError: Invalid count value

console.log(&amp;quot;Hello,&amp;quot;.repeat(Infinity));  
// RangeError: Invalid count value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果传入的参数是字符串，则会先将字符串转化为数字&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(&amp;quot;Hello,&amp;quot;.repeat(&amp;quot;hh&amp;quot;)); // &amp;quot;&amp;quot;
console.log(&amp;quot;Hello,&amp;quot;.repeat(&amp;quot;2&amp;quot;));  // &amp;quot;Hello,Hello,&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;字符串补全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串补全&#34;&gt;#&lt;/a&gt; 字符串补全&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;padStart&lt;/strong&gt;：返回新的字符串，表示用参数字符串从头部（左侧）补全原字符串。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;padEnd&lt;/strong&gt;：返回新的字符串，表示用参数字符串从尾部（右侧）补全原字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上两个方法接受两个参数，第一个参数是指定生成的字符串的最小长度，第二个参数是用来补全的字符串。如果没有指定第二个参数，默认用空格填充。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(&amp;quot;h&amp;quot;.padStart(5,&amp;quot;o&amp;quot;));  // &amp;quot;ooooh&amp;quot;
console.log(&amp;quot;h&amp;quot;.padEnd(5,&amp;quot;o&amp;quot;));    // &amp;quot;hoooo&amp;quot;
console.log(&amp;quot;h&amp;quot;.padStart(5));      // &amp;quot;    h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果指定的长度小于或者等于原字符串的长度，则返回原字符串:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(&amp;quot;hello&amp;quot;.padStart(5,&amp;quot;A&amp;quot;));  // &amp;quot;hello&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果原字符串加上补全字符串长度大于指定长度，则截去超出位数的补全字符串:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(&amp;quot;hello&amp;quot;.padEnd(10,&amp;quot;,world!&amp;quot;));  // &amp;quot;hello,worl&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;常用于补全位数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(&amp;quot;123&amp;quot;.padStart(10,&amp;quot;0&amp;quot;));  // &amp;quot;0000000123&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;模板字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模板字符串&#34;&gt;#&lt;/a&gt; 模板字符串&lt;/h3&gt;
&lt;p&gt;模板字符串相当于加强版的字符串，用反引号 &lt;strong&gt;`&lt;/strong&gt;, 除了作为普通字符串，还可以用来定义多行字符串，还可以在字符串中加入变量和表达式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本用法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;普通字符串&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let string = `Hello&#39;\n&#39;world`;
console.log(string); 
// &amp;quot;Hello&#39;
// &#39;world&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多行字符串:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let string1 =  `Hey,
can you stop angry now?`;
console.log(string1);
// Hey,
// can you stop angry now?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;字符串插入变量和表达式。&lt;/p&gt;
&lt;p&gt;变量名写在 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;/mrow&gt;&lt;mtext&gt;中，&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;{} 中，&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;中&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;{} 中可以放入 JavaScript 表达式。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let name = &amp;quot;Mike&amp;quot;;
let age = 27;
let info = `My Name is $&amp;#123;name&amp;#125;,I am $&amp;#123;age+1&amp;#125; years old next year.`
console.log(info);
// My Name is Mike,I am 28 years old next year.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;字符串中调用函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function f()&amp;#123;
  return &amp;quot;have fun!&amp;quot;;
&amp;#125;
let string2= `Game start,$&amp;#123;f()&amp;#125;`;
console.log(string2);  // Game start,have fun!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意要点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;模板字符串中的换行和空格都是会被保留的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;innerHtml = `&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;menu&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;mine&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
`;
console.log(innerHtml);
// 输出
&amp;lt;ul&amp;gt;
 &amp;lt;li&amp;gt;menu&amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;mine&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;标签模板&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标签模板&#34;&gt;#&lt;/a&gt; 标签模板&lt;/h3&gt;
&lt;p&gt;标签模板，是一个函数的调用，其中调用的参数是模板字符串&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alert`Hello world!`;
// 等价于
alert(&#39;Hello world!&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当模板字符串中带有变量，会将模板字符串参数处理成多个参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function f(stringArr,...values)&amp;#123;
 let result = &amp;quot;&amp;quot;;
 for(let i=0;i&amp;lt;stringArr.length;i++)&amp;#123;
  result += stringArr[i];
  if(values[i])&amp;#123;
   result += values[i];
        &amp;#125;
    &amp;#125;
 return result;
&amp;#125;
let name = &#39;Mike&#39;;
let age = 27;
f`My Name is $&amp;#123;name&amp;#125;,I am $&amp;#123;age+1&amp;#125; years old next year.`;
// &amp;quot;My Name is Mike,I am 28 years old next year.&amp;quot;
 
f`My Name is $&amp;#123;name&amp;#125;,I am $&amp;#123;age+1&amp;#125; years old next year.`;
// 等价于
f([&#39;My Name is&#39;,&#39;,I am &#39;,&#39; years old next year.&#39;],&#39;Mike&#39;,28);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;过滤 HTML 字符串，防止用户输入恶意内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function f(stringArr,...values)&amp;#123;
 let result = &amp;quot;&amp;quot;;
 for(let i=0;i&amp;lt;stringArr.length;i++)&amp;#123;
  result += stringArr[i];
   if(values[i])&amp;#123;
     result += String(values[i]).replace(/&amp;amp;/g, &amp;quot;&amp;amp;amp;&amp;quot;)
               .replace(/&amp;lt;/g, &amp;quot;&amp;amp;lt;&amp;quot;)
               .replace(/&amp;gt;/g, &amp;quot;&amp;amp;gt;&amp;quot;);
    &amp;#125;
 &amp;#125;
 return result;
&amp;#125;
name = &#39;&amp;lt;Amy&amp;amp;MIke&amp;gt;&#39;;
f`&amp;lt;p&amp;gt;Hi, $&amp;#123;name&amp;#125;.I would like send you some message.&amp;lt;/p&amp;gt;`;
// &amp;lt;p&amp;gt;Hi, &amp;amp;lt;Amy&amp;amp;amp;MIke&amp;amp;gt;.I would like send you some message.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;国际化处理（转化多国语言）&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i18n`Hello $&amp;#123;name&amp;#125;, you are visitor number $&amp;#123;visitorNumber&amp;#125;.`;  
// 你好**，你是第**位访问者
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/%E6%95%B0%E7%BB%84/</guid>
            <title>ES6数组</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/%E6%95%B0%E7%BB%84/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 21:37:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;数组创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组创建&#34;&gt;#&lt;/a&gt; 数组创建&lt;/h2&gt;
&lt;h3 id=&#34;arrayof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arrayof&#34;&gt;#&lt;/a&gt; Array.of()&lt;/h3&gt;
&lt;p&gt;将参数中所有值作为元素形成数组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(Array.of(1, 2, 3, 4)); // [1, 2, 3, 4]
 
// 参数值可为不同类型
console.log(Array.of(1, &#39;2&#39;, true)); // [1, &#39;2&#39;, true]
 
// 参数为空时返回空数组
console.log(Array.of()); // []
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;arrayfrom&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arrayfrom&#34;&gt;#&lt;/a&gt; Array.from()&lt;/h3&gt;
&lt;p&gt;将类数组对象或可迭代对象转化为数组。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 参数为数组,返回与原数组一样的数组
console.log(Array.from([1, 2])); // [1, 2]
 
// 参数含空位
console.log(Array.from([1, , 3])); // [1, undefined, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Array.from(arrayLike[, mapFn[, thisArg]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回值为转换后的数组。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;arrayLike&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;想要转换的类数组对象或可迭代对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(Array.from([1, 2, 3])); // [1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;mapFn&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可选，map 函数，用于对每个元素进行处理，放入数组的是处理后的元素。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(Array.from([1, 2, 3], (n) =&amp;gt; n * 2)); // [2, 4, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;thisArg&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可选，用于指定 map 函数执行时的 this 对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let map = &amp;#123;
    do: function(n) &amp;#123;
        return n * 2;
    &amp;#125;
&amp;#125;
let arrayLike = [1, 2, 3];
console.log(Array.from(arrayLike, function (n)&amp;#123;
    return this.do(n);
&amp;#125;, map)); // [2, 4, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;类数组对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类数组对象&#34;&gt;#&lt;/a&gt; 类数组对象&lt;/h3&gt;
&lt;p&gt;一个类数组对象必须含有 length 属性，且元素属性名必须是数值或者可转换为数值的字符&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let arr = Array.from(&amp;#123;
  0: &#39;1&#39;,
  1: &#39;2&#39;,
  2: 3,
  length: 3
&amp;#125;);
console.log(arr); // [&#39;1&#39;, &#39;2&#39;, 3]
 
// 没有 length 属性,则返回空数组
let array = Array.from(&amp;#123;
  0: &#39;1&#39;,
  1: &#39;2&#39;,
  2: 3,
&amp;#125;);
console.log(array); // []
 
// 元素属性名不为数值且无法转换为数值，返回长度为 length 元素值为 undefined 的数组  
let array1 = Array.from(&amp;#123;
  a: 1,
  b: 2,
  length: 2
&amp;#125;);
console.log(array1); // [undefined, undefined]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;转换可迭代对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#转换可迭代对象&#34;&gt;#&lt;/a&gt; 转换可迭代对象&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;转换 map&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let map = new Map();
map.set(&#39;key0&#39;, &#39;value0&#39;);
map.set(&#39;key1&#39;, &#39;value1&#39;);
console.log(Array.from(map)); // [[&#39;key0&#39;, &#39;value0&#39;],[&#39;key1&#39;,
// &#39;value1&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;转换 set&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let arr = [1, 2, 3];
let set = new Set(arr);
console.log(Array.from(set)); // [1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;转换字符串&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let str = &#39;abc&#39;;
console.log(Array.from(str)); // [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;扩展的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扩展的方法&#34;&gt;#&lt;/a&gt; 扩展的方法&lt;/h2&gt;
&lt;h3 id=&#34;查找&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查找&#34;&gt;#&lt;/a&gt; 查找&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;find()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查找数组中符合条件的元素，若有多个符合条件的元素，则返回第一个元素。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let arr = Array.of(1, 2, 3, 4);
console.log(arr.find(item =&amp;gt; item &amp;gt; 2)); // 3
 
// 数组空位处理为 undefined
console.log([, 1].find(n =&amp;gt; true)); // undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;findIndex()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查找数组中符合条件的元素索引，若有多个符合条件的元素，则返回第一个元素索引。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let arr = Array.of(1, 2, 1, 3);
// 参数1：回调函数
// 参数2(可选)：指定回调函数中的 this 值
console.log(arr.findIndex(item =&amp;gt; item == 2)); // 1
 
// 数组空位处理为 undefined
console.log([, 1].findIndex(n =&amp;gt; true)); //0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;填充&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#填充&#34;&gt;#&lt;/a&gt; 填充&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;fill()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将一定范围索引的数组元素内容填充为单个指定的值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let arr = Array.of(1, 2, 3, 4);
// 参数1：用来填充的值
// 参数2：被填充的起始索引
// 参数3(可选)：被填充的结束索引，默认为数组末尾
console.log(arr.fill(0,1,2)); // [1, 0, 3, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;copyWithin()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将一定范围索引的数组元素修改为此数组另一指定范围索引的元素。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 参数1：被修改的起始索引
// 参数2：被用来覆盖的数据的起始索引
// 参数3(可选)：被用来覆盖的数据的结束索引，默认为数组末尾
console.log([1, 2, 3, 4].copyWithin(0,2,4)); // [3, 4, 3, 4]
 
// 参数1为负数表示倒数
console.log([1, 2, 3, 4].copyWithin(-2, 0)); // [1, 2, 1, 2]
 
console.log([1, 2, ,4].copyWithin(0, 2, 4)); // [, 4, , 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#遍历&#34;&gt;#&lt;/a&gt; 遍历&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;entries()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;遍历键值对&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(let [key, value] of [&#39;a&#39;, &#39;b&#39;].entries())&amp;#123;
    console.log(key, value);
&amp;#125;
// 0 &amp;quot;a&amp;quot;
// 1 &amp;quot;b&amp;quot;
 
// 不使用 for... of 循环
let entries = [&#39;a&#39;, &#39;b&#39;].entries();
console.log(entries.next().value); // [0, &amp;quot;a&amp;quot;]
console.log(entries.next().value); // [1, &amp;quot;b&amp;quot;]
 
// 数组含空位
console.log([...[,&#39;a&#39;].entries()]); // [[0, undefined], [1, &amp;quot;a&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;keys()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;遍历键名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(let key of [&#39;a&#39;, &#39;b&#39;].keys())&amp;#123;
    console.log(key);
&amp;#125;
// 0
// 1
 
// 数组含空位
console.log([...[,&#39;a&#39;].keys()]); // [0, 1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;values()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;遍历键值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(let value of [&#39;a&#39;, &#39;b&#39;].values())&amp;#123;
    console.log(value);
&amp;#125;
// &amp;quot;a&amp;quot;
// &amp;quot;b&amp;quot;
 
// 数组含空位
console.log([...[,&#39;a&#39;].values()]); // [undefined, &amp;quot;a&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;包含&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#包含&#34;&gt;#&lt;/a&gt; 包含&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;includes()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数组是否包含指定值。&lt;/p&gt;
&lt;p&gt;注意：与 Set 和 Map 的 has 方法区分；Set 的 has 方法用于查找值；Map 的 has 方法用于查找键名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 参数1：包含的指定值
[1, 2, 3].includes(1);    // true
 
// 参数2：可选，搜索的起始索引，默认为0
[1, 2, 3].includes(1, 2); // false
 
// NaN 的包含判断
[1, NaN, 3].includes(NaN); // true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;嵌套数组转一维数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#嵌套数组转一维数组&#34;&gt;#&lt;/a&gt; 嵌套数组转一维数组&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;flat()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log([1 ,[2, 3]].flat()); // [1, 2, 3]
 
// 指定转换的嵌套层数
console.log([1, [2, [3, [4, 5]]]].flat(2)); // [1, 2, 3, [4, 5]]
 
// 不管嵌套多少层
console.log([1, [2, [3, [4, 5]]]].flat(Infinity)); // [1, 2, 3, 4, 5]
 
// 自动跳过空位
console.log([1, [2, , 3]].flat());&amp;lt;p&amp;gt; // [1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;flatMap()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先对数组中每个元素进行了的处理，再对数组执行 flat () 方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 参数1：遍历函数，该遍历函数可接受3个参数：当前元素、当前元素索引、原数组
// 参数2：指定遍历函数中 this 的指向
console.log([1, 2, 3].flatMap(n =&amp;gt; [n * 2])); // [2, 4, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数组缓冲区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组缓冲区&#34;&gt;#&lt;/a&gt; 数组缓冲区&lt;/h2&gt;
&lt;p&gt;数组缓冲区是内存中的一段地址。&lt;/p&gt;
&lt;p&gt;定型数组的基础。&lt;/p&gt;
&lt;p&gt;实际字节数在创建时确定，之后只可修改其中的数据，不可修改大小。&lt;/p&gt;
&lt;h3 id=&#34;创建数组缓冲区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建数组缓冲区&#34;&gt;#&lt;/a&gt; 创建数组缓冲区&lt;/h3&gt;
&lt;p&gt;通过构造函数创建:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let buffer = new ArrayBuffer(10);
console.log(buffer.byteLength); // 10
分割已有数组缓冲区
let buffer = new ArrayBuffer(10);
let buffer1 = buffer.slice(1, 3);
console.log(buffer1.byteLength); // 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;视图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#视图&#34;&gt;#&lt;/a&gt; 视图&lt;/h3&gt;
&lt;p&gt;视图是用来操作内存的接口。&lt;/p&gt;
&lt;p&gt;视图可以操作数组缓冲区或缓冲区字节的子集，并按照其中一种数值数据类型来读取和写入数据。&lt;/p&gt;
&lt;p&gt;DataView 类型是一种通用的数组缓冲区视图，其支持所有 8 种数值型数据类型。&lt;/p&gt;
&lt;p&gt;创建:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 默认 DataView 可操作数组缓冲区全部内容
let buffer = new ArrayBuffer(10);
    dataView = new DataView(buffer); 
dataView.setInt8(0,1);
console.log(dataView.getInt8(0)); // 1
 
// 通过设定偏移量(参数2)与长度(参数3)指定 DataView 可操作的字节范围
let buffer1 = new ArrayBuffer(10);
    dataView1 = new DataView(buffer1, 0, 3);
dataView1.setInt8(5,1); // RangeError
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;定型数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定型数组&#34;&gt;#&lt;/a&gt; 定型数组&lt;/h2&gt;
&lt;p&gt;数组缓冲区的特定类型的视图。&lt;/p&gt;
&lt;p&gt;可以强制使用特定的数据类型，而不是使用通用的 DataView 对象来操作数组缓冲区。&lt;/p&gt;
&lt;h3 id=&#34;创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建&#34;&gt;#&lt;/a&gt; 创建&lt;/h3&gt;
&lt;p&gt;通过数组缓冲区生成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let buffer = new ArrayBuffer(10),
    view = new Int8Array(buffer);
console.log(view.byteLength); // 10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过构造函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let view = new Int32Array(10);
console.log(view.byteLength); // 40
console.log(view.length);     // 10
 
// 不传参则默认长度为0
// 在这种情况下数组缓冲区分配不到空间，创建的定型数组不能用来保存数据
let view1 = new Int32Array();
console.log(view1.byteLength); // 0
console.log(view1.length);     // 0
 
// 可接受参数包括定型数组、可迭代对象、数组、类数组对象
let arr = Array.from(&amp;#123;
  0: &#39;1&#39;,
  1: &#39;2&#39;,
  2: 3,
  length: 3
&amp;#125;);
let view2 = new Int16Array([1, 2]),
    view3 = new Int32Array(view2),
    view4 = new Int16Array(new Set([1, 2, 3])),
    view5 = new Int16Array([1, 2, 3]),
    view6 = new Int16Array(arr);
console.log(view2 .buffer === view3.buffer); // false
console.log(view4.byteLength); // 6
console.log(view5.byteLength); // 6
console.log(view6.byteLength); // 6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;注意要点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意要点&#34;&gt;#&lt;/a&gt; 注意要点&lt;/h3&gt;
&lt;p&gt;length 属性不可写，如果尝试修改这个值，在非严格模式下会直接忽略该操作，在严格模式下会抛出错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let view = new Int16Array([1, 2]);
view.length = 3;
console.log(view.length); // 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定型数组可使用 entries ()、keys ()、values () 进行迭代&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let view = new Int16Array([1, 2]);
for(let [k, v] of view.entries())&amp;#123;
    console.log(k, v);
&amp;#125;
// 0 1
// 1 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;find () 等方法也可用于定型数组，但是定型数组中的方法会额外检查数值类型是否安全，也会通过 Symbol.species 确认方法的返回值是定型数组而非普通数组。concat () 方法由于两个定型数组合并结果不确定，故不能用于定型数组；另外，由于定型数组的尺寸不可更改，可以改变数组的尺寸的方法，例如 splice () ，不适用于定型数组。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let view = new Int16Array([1, 2]);
view.find((n) &amp;gt; 1); // 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所有定型数组都含有静态 of () 方法和 from () 方法，运行效果分别与 Array.of () 方法和 Array.from () 方法相似，区别是定型数组的方法返回定型数组，而普通数组的方法返回普通数组。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let view = Int16Array.of(1, 2);
console.log(view instanceof Int16Array); // true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定型数组不是普通数组，不继承自 Array&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let view = new Int16Array([1, 2]);
console.log(Array.isArray(view)); // false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定型数组中增加了 set () 与 subarray () 方法。 set () 方法用于将其他数组复制到已有定型数组，subarray () 用于提取已有定型数组的一部分形成新的定型数组。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// set 方法
// 参数1：一个定型数组或普通数组
// 参数2：可选，偏移量，开始插入数据的位置，默认为0
let view= new Int16Array(4);
view.set([1, 2]);
view.set([3, 4], 2);
console.log(view); // [1, 2, 3, 4]
 
// subarray 方法
// 参数1：可选，开始位置
// 参数2：可选，结束位置(不包含结束位置)
let view= new Int16Array([1, 2, 3, 4]), 
    subview1 = view.subarray(), 
    subview2 = view.subarray(1), 
    subview3 = view.subarray(1, 3);
console.log(subview1); // [1, 2, 3, 4]
console.log(subview2); // [2, 3, 4]
console.log(subview3); // [2, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;扩展运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扩展运算符&#34;&gt;#&lt;/a&gt; 扩展运算符&lt;/h2&gt;
&lt;h3 id=&#34;复制数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复制数组&#34;&gt;#&lt;/a&gt; 复制数组&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;let arr = [1, 2],
    arr1 = [...arr];
console.log(arr1); // [1, 2]
 
// 数组含空位
let arr2 = [1, , 3],
    arr3 = [...arr2];
console.log(arr3); [1, undefined, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;合并数组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log([...[1, 2],...[3, 4]]); // [1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</guid>
            <title>ES6解构赋值</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 21:37:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h2&gt;
&lt;p&gt;解构赋值是对赋值运算符的扩展。&lt;/p&gt;
&lt;p&gt;他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。&lt;/p&gt;
&lt;p&gt;在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;解构模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解构模型&#34;&gt;#&lt;/a&gt; 解构模型&lt;/h2&gt;
&lt;p&gt;在解构中，有下面两部分参与：&lt;/p&gt;
&lt;p&gt;解构的源，解构赋值表达式的右边部分。解构的目标，解构赋值表达式的左边部分。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;数组模型的解构array&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组模型的解构array&#34;&gt;#&lt;/a&gt; 数组模型的解构（Array）&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;基本&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let [a, b, c] = [1, 2, 3]; // a = 1 // b = 2 // c = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;可嵌套&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let [a, [[b], c]] = [1, [[2], 3]]; // a = 1 // b = 2 // c = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;可忽略&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let [a, , b] = [1, 2, 3]; // a = 1 // b = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;不完全解构&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let [a = 1, b] = []; // a = 1, b = undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;剩余运算符&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let [a, ...b] = [1, 2, 3]; //a = 1 //b = [2, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;字符串等&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在数组的解构中，解构的目标若为可遍历对象，皆可进行解构赋值。可遍历对象即实现 Iterator 接口的数据。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let [a, b, c, d, e] = &#39;hello&#39;; // a = &#39;h&#39; // b = &#39;e&#39; // c = &#39;l&#39; // d = &#39;l&#39; // e = &#39;o&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解构默认值&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let [a = 2] = [undefined]; // a = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当解构模式有匹配结果，且匹配结果是 undefined 时，会触发默认值作为返回结果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let [a = 3, b = a] = [];     // a = 3, b = 3 
let [a = 3, b = a] = [1];    // a = 1, b = 1 
let [a = 3, b = a] = [1, 2]; // a = 1, b = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;a 与 b 匹配结果为 undefined ，触发默认值：&lt;strong&gt;a = 3; b = a =3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a 正常解构赋值，匹配结果：a = 1，b 匹配结果 undefined ，触发默认值：&lt;strong&gt;b = a =1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a 与 b 正常解构赋值，匹配结果：&lt;strong&gt;a = 1，b = 2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;对象模型的解构object&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象模型的解构object&#34;&gt;#&lt;/a&gt; 对象模型的解构（Object）&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;基本&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let &amp;#123; foo, bar &amp;#125; = &amp;#123; foo: &#39;aaa&#39;, bar: &#39;bbb&#39; &amp;#125;; // foo = &#39;aaa&#39; // bar = &#39;bbb&#39;  let &amp;#123; baz : foo &amp;#125; = &amp;#123; baz : &#39;ddd&#39; &amp;#125;; // foo = &#39;ddd&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;可嵌套可忽略&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let obj = &amp;#123;p: [&#39;hello&#39;, &amp;#123;y: &#39;world&#39;&amp;#125;] &amp;#125;; 
let &amp;#123;p: [x, &amp;#123; y &amp;#125;] &amp;#125; = obj; // x = &#39;hello&#39; // y = &#39;world&#39; 
let obj = &amp;#123;p: [&#39;hello&#39;, &amp;#123;y: &#39;world&#39;&amp;#125;] &amp;#125;; 
let &amp;#123;p: [x, &amp;#123;  &amp;#125;] &amp;#125; = obj; // x = &#39;hello&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;不完全解构&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let obj = &amp;#123;p: [&amp;#123;y: &#39;world&#39;&amp;#125;] &amp;#125;; 
let &amp;#123;p: [&amp;#123; y &amp;#125;, x ] &amp;#125; = obj; // x = undefined // y = &#39;world&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;剩余运算符&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let &amp;#123;a, b, ...rest&amp;#125; = &amp;#123;a: 10, b: 20, c: 30, d: 40&amp;#125;; // a = 10 // b = 20 // rest = &amp;#123;c: 30, d: 40&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解构默认值&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let &amp;#123;a = 10, b = 5&amp;#125; = &amp;#123;a: 3&amp;#125;; // a = 3; b = 5; 
let &amp;#123;a: aa = 10, b: bb = 5&amp;#125; = &amp;#123;a: 3&amp;#125;; // aa = 3; bb = 5;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/%E6%95%B0%E5%80%BC/</guid>
            <title>ES6数值</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/%E6%95%B0%E5%80%BC/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 21:37:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;数值的表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数值的表示&#34;&gt;#&lt;/a&gt; 数值的表示&lt;/h2&gt;
&lt;p&gt;二进制表示法新写法：前缀 0b 或 0B 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(0b11 === 3); // true
console.log(0B11 === 3); // true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;八进制表示法新写法：前缀 0o 或 0O 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(0o11 === 9); // true
console.log(0O11 === 9); // true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;常量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常量&#34;&gt;#&lt;/a&gt; 常量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Number.EPSILON
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Number.EPSILON 属性表示 1 与大于 1 的最小浮点数之间的差。&lt;/p&gt;
&lt;p&gt;它的值接近于 2.2204460492503130808472633361816E-16，或者 2-52。&lt;/p&gt;
&lt;p&gt;测试数值是否在误差范围内:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.1 + 0.2 === 0.3; // false
// 在误差范围内即视为相等
equal = (Math.abs(0.1 - 0.3 + 0.2) &amp;lt; Number.EPSILON); // true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;属性特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属性特性&#34;&gt;#&lt;/a&gt; 属性特性&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;writable：false
enumerable：false
configurable：false
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;最大最小安全整数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最大最小安全整数&#34;&gt;#&lt;/a&gt; 最大 / 最小安全整数&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;安全整数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安全整数表示在 JavaScript 中能够精确表示的整数，安全整数的范围在 2 的 -53 次方到 2 的 53 次方之间（不包括两个端点），超过这个范围的整数无法精确表示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最大安全整数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安全整数范围的上限，即 2 的 53 次方减 1 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2; // true
Number.MAX_SAFE_INTEGER === Number.MAX_SAFE_INTEGER + 1;     // false
Number.MAX_SAFE_INTEGER - 1 === Number.MAX_SAFE_INTEGER - 2; // false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;最小安全整数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安全整数范围的下限，即 2 的 53 次方减 1 的负数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Number.MIN_SAFE_INTEGER + 1 === Number.MIN_SAFE_INTEGER + 2; // false
Number.MIN_SAFE_INTEGER === Number.MIN_SAFE_INTEGER - 1;     // false
Number.MIN_SAFE_INTEGER - 1 === Number.MIN_SAFE_INTEGER - 2; // true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;属性特性&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;writable：false
enumerable：false
configurable：false
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法&#34;&gt;#&lt;/a&gt; 方法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Number 对象新方法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Number.isFinite()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于检查一个数值是否为有限的（ finite ），即不是 Infinity&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log( Number.isFinite(1));   // true
console.log( Number.isFinite(0.1)); // true
 
// NaN 不是有限的
console.log( Number.isFinite(NaN)); // false
 
console.log( Number.isFinite(Infinity));  // false
console.log( Number.isFinite(-Infinity)); // false
 
// Number.isFinate 没有隐式的 Number() 类型转换，所有非数值都返回 false
console.log( Number.isFinite(&#39;foo&#39;)); // false
console.log( Number.isFinite(&#39;15&#39;));  // false
console.log( Number.isFinite(true));  // false
Number.isNaN()
用于检查一个值是否为 NaN 。
console.log(Number.isNaN(NaN));      // true
console.log(Number.isNaN(&#39;true&#39;/0)); // true
 
// 在全局的 isNaN() 中，以下皆返回 true，因为在判断前会将非数值向数值转换
// 而 Number.isNaN() 不存在隐式的 Number() 类型转换，非 NaN 全部返回 false
Number.isNaN(&amp;quot;NaN&amp;quot;);      // false
Number.isNaN(undefined);  // false
Number.isNaN(&amp;#123;&amp;#125;);         // false
Number.isNaN(&amp;quot;true&amp;quot;);     // false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;从全局移植到 Number 对象的方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;逐步减少全局方法，用于全局变量的模块化。&lt;/p&gt;
&lt;p&gt;方法的行为没有发生改变。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Number.parseInt()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于将给定字符串转化为指定进制的整数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 不指定进制时默认为 10 进制
Number.parseInt(&#39;12.34&#39;); // 12
Number.parseInt(12.34);   // 12
 
// 指定进制
Number.parseInt(&#39;0011&#39;,2); // 3
 
// 与全局的 parseInt() 函数是同一个函数
Number.parseInt === parseInt; // true
Number.parseFloat()
用于把一个字符串解析成浮点数。
Number.parseFloat(&#39;123.45&#39;)    // 123.45
Number.parseFloat(&#39;123.45abc&#39;) // 123.45
 
// 无法被解析成浮点数，则返回 NaN
Number.parseFloat(&#39;abc&#39;) // NaN
 
// 与全局的 parseFloat() 方法是同一个方法
Number.parseFloat === parseFloat // true
Number.isInteger()
用于判断给定的参数是否为整数。
Number.isInteger(value)
Number.isInteger(0); // true
// JavaScript 内部，整数和浮点数采用的是同样的储存方法,因此 1 与 1.0 被视为相同的值
Number.isInteger(1);   // true
Number.isInteger(1.0); // true
 
Number.isInteger(1.1);     // false
Number.isInteger(Math.PI); // false
 
// NaN 和正负 Infinity 不是整数
Number.isInteger(NaN);       // false
Number.isInteger(Infinity);  // false
Number.isInteger(-Infinity); // false
 
Number.isInteger(&amp;quot;10&amp;quot;);  // false
Number.isInteger(true);  // false
Number.isInteger(false); // false
Number.isInteger([1]);   // false
 
// 数值的精度超过 53 个二进制位时，由于第 54 位及后面的位被丢弃，会产生误判
Number.isInteger(1.0000000000000001) // true
 
// 一个数值的绝对值小于 Number.MIN_VALUE（5E-324），即小于 JavaScript 能够分辨
// 的最小值，会被自动转为 0，也会产生误判
Number.isInteger(5E-324); // false
Number.isInteger(5E-325); // true
Number.isSafeInteger()
用于判断数值是否在安全范围内。
Number.isSafeInteger(Number.MIN_SAFE_INTEGER - 1); // false
Number.isSafeInteger(Number.MAX_SAFE_INTEGER + 1); // false
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;math-对象的扩展&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#math-对象的扩展&#34;&gt;#&lt;/a&gt; Math 对象的扩展&lt;/h2&gt;
&lt;p&gt;ES6 在 Math 对象上新增了 17 个数学相关的静态方法，这些方法只能在 Math 中调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;普通计算&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Math.cbrt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于计算一个数的立方根。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Math.cbrt(1);  // 1
Math.cbrt(0);  // 0
Math.cbrt(-1); // -1
// 会对非数值进行转换
Math.cbrt(&#39;1&#39;); // 1
 
// 非数值且无法转换为数值时返回 NaN
Math.cbrt(&#39;hhh&#39;); // NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Math.imul
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 大多数情况下，结果与 a * b 相同 
Math.imul(1, 2);   // 2
 
// 用于正确返回大数乘法结果中的低位数值
Math.imul(0x7fffffff, 0x7fffffff); // 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Math.hypot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于计算所有参数的平方和的平方根。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Math.hypot(3, 4); // 5
 
// 非数值会先被转换为数值后进行计算
Math.hypot(1, 2, &#39;3&#39;); // 3.741657386773941
Math.hypot(true);      // 1
Math.hypot(false);     // 0
 
// 空值会被转换为 0
Math.hypot();   // 0
Math.hypot([]); // 0
 
// 参数为 Infinity 或 -Infinity 返回 Infinity
Math.hypot(Infinity); // Infinity
Math.hypot(-Infinity); // Infinity
 
// 参数中存在无法转换为数值的参数时返回 NaN
Math.hypot(NaN);         // NaN
Math.hypot(3, 4, &#39;foo&#39;); // NaN
Math.hypot(&amp;#123;&amp;#125;);          // NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Math.clz32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于返回数字的 32 位无符号整数形式的前导 0 的个数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Math.clz32(0); // 32
Math.clz32(1); // 31
Math.clz32(0b01000000000100000000000000000000); // 1
 
// 当参数为小数时，只考虑整数部分
Math.clz32(0.5); // 32
 
// 对于空值或非数值，会转化为数值再进行计算
Math.clz32(&#39;1&#39;);       // 31
Math.clz32();          // 32
Math.clz32([]);        // 32
Math.clz32(&amp;#123;&amp;#125;);        // 32
Math.clz32(NaN);       // 32
Math.clz32(Infinity);  // 32
Math.clz32(-Infinity); // 32
Math.clz32(undefined); // 32
Math.clz32(&#39;hhh&#39;);     // 32
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数字处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数字处理&#34;&gt;#&lt;/a&gt; 数字处理&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Math.trunc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于返回数字的整数部分。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Math.trunc(12.3); // 12
Math.trunc(12);   // 12
 
// 整数部分为 0 时也会判断符号
Math.trunc(-0.5); // -0
Math.trunc(0.5);  // 0
 
// Math.trunc 会将非数值转为数值再进行处理
Math.trunc(&amp;quot;12.3&amp;quot;); // 12
 
// 空值或无法转化为数值时时返回 NaN
Math.trunc();           // NaN
Math.trunc(NaN);        // NaN
Math.trunc(&amp;quot;hhh&amp;quot;);      // NaN
Math.trunc(&amp;quot;123.2hhh&amp;quot;); // NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Math.fround
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于获取数字的 32 位单精度浮点数形式。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 对于 2 的 24 次方取负至 2 的 24 次方之间的整数（不含两个端点），返回结果与参数本身一致
Math.fround(-(2**24)+1);  // -16777215
Math.fround(2 ** 24 - 1); // 16777215
 
// 用于将 64 位双精度浮点数转为 32 位单精度浮点数
Math.fround(1.234) // 1.125
// 当小数的精度超过 24 个二进制位，会丢失精度
Math.fround(0.3); // 0.30000001192092896
// 参数为 NaN 或 Infinity 时返回本身
Math.fround(NaN)      // NaN
Math.fround(Infinity) // Infinity
 
// 参数为其他非数值类型时会将参数进行转换 
Math.fround(&#39;5&#39;);  // 5
Math.fround(true); // 1
Math.fround(null); // 0
Math.fround([]);   // 0
Math.fround(&amp;#123;&amp;#125;);   // NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;判断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判断&#34;&gt;#&lt;/a&gt; 判断&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Math.sign
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;判断数字的符号（正、负、0）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Math.sign(1);  // 1
Math.sign(-1); // -1
 
// 参数为 0 时，不同符号的返回不同
Math.sign(0);  // 0
Math.sign(-0); // -0
 
// 判断前会对非数值进行转换
Math.sign(&#39;1&#39;);  // 1
Math.sign(&#39;-1&#39;); // -1  
 
// 参数为非数值（无法转换为数值）时返回 NaN
Math.sign(NaN);   // NaN 
Math.sign(&#39;hhh&#39;); // NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;对数方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对数方法&#34;&gt;#&lt;/a&gt; 对数方法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Math.expm1()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于计算 e 的 x 次方减 1 的结果，即 Math.exp (x) - 1 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Math.expm1(1);  // 1.718281828459045
Math.expm1(0);  // 0
Math.expm1(-1); // -0.6321205588285577
// 会对非数值进行转换
Math.expm1(&#39;0&#39;); //0
 
// 参数不为数值且无法转换为数值时返回 NaN
Math.expm1(NaN); // NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Math.log1p(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于计算 1 + x 的自然对数，即 Math.log (1 + x) 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Math.log1p(1);  // 0.6931471805599453
Math.log1p(0);  // 0
Math.log1p(-1); // -Infinity
 
// 参数小于 -1 时返回 NaN
Math.log1p(-2); // NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Math.log10(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于计算以 10 为底的 x 的对数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Math.log10(1);   // 0
// 计算前对非数值进行转换
Math.log10(&#39;1&#39;); // 0
// 参数为0时返回 -Infinity
Math.log10(0);   // -Infinity
// 参数小于0或参数不为数值（且无法转换为数值）时返回 NaN
Math.log10(-1);  // NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Math.log2()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用于计算 2 为底的 x 的对数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Math.log2(1);   // 0
// 计算前对非数值进行转换
Math.log2(&#39;1&#39;); // 0
// 参数为0时返回 -Infinity
Math.log2(0);   // -Infinity
// 参数小于0或参数不为数值（且无法转换为数值）时返回 NaN
Math.log2(-1);  // NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;双曲函数方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#双曲函数方法&#34;&gt;#&lt;/a&gt; 双曲函数方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Math.sinh (x): 用于计算双曲正弦。&lt;/li&gt;
&lt;li&gt;Math.cosh (x): 用于计算双曲余弦。&lt;/li&gt;
&lt;li&gt;Math.tanh (x): 用于计算双曲正切。&lt;/li&gt;
&lt;li&gt;Math.asinh (x): 用于计算反双曲正弦。&lt;/li&gt;
&lt;li&gt;Math.acosh (x): 用于计算反双曲余弦。&lt;/li&gt;
&lt;li&gt;Math.atanh (x): 用于计算反双曲正切。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;指数运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指数运算符&#34;&gt;#&lt;/a&gt; 指数运算符&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;1 ** 2; // 1
// 右结合，从右至左计算
2 ** 2 ** 3; // 256
// **=
let exam = 2;
exam ** = 2; // 4
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/%E6%A8%A1%E5%9D%97/</guid>
            <title>ES6模块</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/%E6%A8%A1%E5%9D%97/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 21:37:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h2&gt;
&lt;p&gt;在 ES6 前， 实现模块化使用的是 RequireJS 或者 seaJS（分别是基于 AMD 规范的模块化库， 和基于 CMD 规范的模块化库）。&lt;/p&gt;
&lt;p&gt;ES6 引入了模块化，其设计思想是在编译时就能确定模块的依赖关系，以及输入和输出的变量。&lt;/p&gt;
&lt;p&gt;ES6 的模块化分为导出（export） @与导入（import）两个模块。&lt;/p&gt;
&lt;h2 id=&#34;特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特点&#34;&gt;#&lt;/a&gt; 特点&lt;/h2&gt;
&lt;p&gt;ES6 的模块自动开启严格模式，不管你有没有在模块头部加上 &lt;strong&gt;use strict;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;模块中可以导入和导出各种类型的变量，如函数，对象，字符串，数字，布尔值，类等。&lt;/p&gt;
&lt;p&gt;每个模块都有自己的上下文，每一个模块内声明的变量都是局部变量，不会污染全局作用域。&lt;/p&gt;
&lt;p&gt;每一个模块只加载一次（是单例的）， 若再去加载同目录下同文件，直接从内存中读取。&lt;/p&gt;
&lt;h2 id=&#34;export-与-import&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#export-与-import&#34;&gt;#&lt;/a&gt; export 与 import&lt;/h2&gt;
&lt;h3 id=&#34;基本用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本用法&#34;&gt;#&lt;/a&gt; 基本用法&lt;/h3&gt;
&lt;p&gt;模块导入导出各种类型的变量，如字符串，数值，函数，类。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导出的函数声明与类声明必须要有名称（export default 命令另外考虑）。&lt;/li&gt;
&lt;li&gt;不仅能导出声明还能导出引用（例如函数）。&lt;/li&gt;
&lt;li&gt;export 命令可以出现在模块的任何位置，但必需处于模块顶层。&lt;/li&gt;
&lt;li&gt;import 命令会提升到整个模块的头部，首先执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;/*-----export [test.js]-----*/
let myName = &amp;quot;Tom&amp;quot;;
let myAge = 20;
let myfn = function()&amp;#123;
    return &amp;quot;My name is&amp;quot; + myName + &amp;quot;! I&#39;m &#39;&amp;quot; + myAge + &amp;quot;years old.&amp;quot;
&amp;#125;
let myClass =  class myClass &amp;#123;
    static a = &amp;quot;yeah!&amp;quot;;
&amp;#125;
export &amp;#123; myName, myAge, myfn, myClass &amp;#125;
 
/*-----import [xxx.js]-----*/
import &amp;#123; myName, myAge, myfn, myClass &amp;#125; from &amp;quot;./test.js&amp;quot;;
console.log(myfn());// My name is Tom! I&#39;m 20 years old.
console.log(myAge);// 20
console.log(myName);// Tom
console.log(myClass.a );// yeah!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;建议使用大括号指定所要输出的一组变量写在文档尾部，明确导出的接口。&lt;/p&gt;
&lt;p&gt;函数与类都需要有对应的名称，导出文档尾部也避免了无对应名称。&lt;/p&gt;
&lt;h3 id=&#34;as-的用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#as-的用法&#34;&gt;#&lt;/a&gt; as 的用法&lt;/h3&gt;
&lt;p&gt;export 命令导出的接口名称，须和模块内部的变量有一一对应关系。&lt;/p&gt;
&lt;p&gt;导入的变量名，须和导出的接口名称相同，即顺序可以不一致。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/*-----export [test.js]-----*/
let myName = &amp;quot;Tom&amp;quot;;
export &amp;#123; myName as exportName &amp;#125;
 
/*-----import [xxx.js]-----*/
import &amp;#123; exportName &amp;#125; from &amp;quot;./test.js&amp;quot;;
console.log(exportName);// Tom
使用 as 重新定义导出的接口名称，隐藏模块内部的变量
/*-----export [test1.js]-----*/
let myName = &amp;quot;Tom&amp;quot;;
export &amp;#123; myName &amp;#125;
/*-----export [test2.js]-----*/
let myName = &amp;quot;Jerry&amp;quot;;
export &amp;#123; myName &amp;#125;
/*-----import [xxx.js]-----*/
import &amp;#123; myName as name1 &amp;#125; from &amp;quot;./test1.js&amp;quot;;
import &amp;#123; myName as name2 &amp;#125; from &amp;quot;./test2.js&amp;quot;;
console.log(name1);// Tom
console.log(name2);// Jerry
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不同模块导出接口名称命名重复， 使用 as 重新定义变量名。&lt;/p&gt;
&lt;h3 id=&#34;import-命令的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#import-命令的特点&#34;&gt;#&lt;/a&gt; import 命令的特点&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;只读属性&lt;/strong&gt;：不允许在加载模块的脚本里面，改写接口的引用指向，即可以改写 import 变量类型为对象的属性值，不能改写 import 变量类型为基本类型的值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123;a&amp;#125; from &amp;quot;./xxx.js&amp;quot;
a = &amp;#123;&amp;#125;; // error
 
import &amp;#123;a&amp;#125; from &amp;quot;./xxx.js&amp;quot;
a.foo = &amp;quot;hello&amp;quot;; // a = &amp;#123; foo : &#39;hello&#39; &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;单例模式&lt;/strong&gt;：多次重复执行同一句 import 语句，那么只会执行一次，而不会执行多次。import 同一模块，声明不同接口引用，会声明对应变量，但只执行一次 import 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; a &amp;#125; &amp;quot;./xxx.js&amp;quot;;
import &amp;#123; a &amp;#125; &amp;quot;./xxx.js&amp;quot;;
// 相当于 import &amp;#123; a &amp;#125; &amp;quot;./xxx.js&amp;quot;;
 
import &amp;#123; a &amp;#125; from &amp;quot;./xxx.js&amp;quot;;
import &amp;#123; b &amp;#125; from &amp;quot;./xxx.js&amp;quot;;
// 相当于 import &amp;#123; a, b &amp;#125; from &amp;quot;./xxx.js&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;静态执行特性：import 是静态执行，所以不能使用表达式和变量。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; &amp;quot;f&amp;quot; + &amp;quot;oo&amp;quot; &amp;#125; from &amp;quot;methods&amp;quot;;
// error
let module = &amp;quot;methods&amp;quot;;
import &amp;#123; foo &amp;#125; from module;
// error
if (true) &amp;#123;
  import &amp;#123; foo &amp;#125; from &amp;quot;method1&amp;quot;;
&amp;#125; else &amp;#123;
  import &amp;#123; foo &amp;#125; from &amp;quot;method2&amp;quot;;
&amp;#125;
// error
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;export-default-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#export-default-命令&#34;&gt;#&lt;/a&gt; export default 命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在一个文件或模块中，export、import 可以有多个，export default 仅有一个。&lt;/li&gt;
&lt;li&gt;export default 中的 default 是对应的导出接口变量。&lt;/li&gt;
&lt;li&gt;通过 export 方式导出，在导入时要加 { }，export default 则不需要。&lt;/li&gt;
&lt;li&gt;export default 向外暴露的成员，可以使用任意变量来接收。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var a = &amp;quot;My name is Tom!&amp;quot;;
export default a; // 仅有一个
export default var c = &amp;quot;error&amp;quot;; 
// error，default 已经是对应的导出变量，不能跟着变量声明语句
 
import b from &amp;quot;./xxx.js&amp;quot;; // 不需要加&amp;#123;&amp;#125;， 使用任意变量接收
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;复合使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复合使用&#34;&gt;#&lt;/a&gt; 复合使用&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：import () 是提案，这边暂时不延伸讲解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;export 与 import 可以在同一模块使用，使用特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以将导出接口改名，包括 default。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复合使用 export 与 import ，也可以导出全部，当前模块导出的接口会覆盖继承导出的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; export &amp;#123; foo, bar &amp;#125; from &amp;quot;methods&amp;quot;;
  
 // 约等于下面两段语句，不过上面导入导出方式该模块没有导入 foo 与 bar
 import &amp;#123; foo, bar &amp;#125; from &amp;quot;methods&amp;quot;;
 export &amp;#123; foo, bar &amp;#125;;
  
 /* ------- 特点 1 --------*/
 // 普通改名
 export &amp;#123; foo as bar &amp;#125; from &amp;quot;methods&amp;quot;;
 // 将 foo 转导成 default
 export &amp;#123; foo as default &amp;#125; from &amp;quot;methods&amp;quot;;
 // 将 default 转导成 foo
 export &amp;#123; default as foo &amp;#125; from &amp;quot;methods&amp;quot;;
  
 /* ------- 特点 2 --------*/
 export * from &amp;quot;methods&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/AJAX/XHR%E5%93%8D%E5%BA%94/</guid>
            <title>XHR响应</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/AJAX/XHR%E5%93%8D%E5%BA%94/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="AJAX" scheme="https://entropywhite.com/tags/AJAX/" />
            <pubDate>Thu, 30 Jun 2022 21:36:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;ajax-服务器-响应&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ajax-服务器-响应&#34;&gt;#&lt;/a&gt; AJAX - 服务器 响应&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;服务器响应&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务器响应&#34;&gt;#&lt;/a&gt; 服务器响应&lt;/h2&gt;
&lt;p&gt;如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;属性&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;responseText&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;获得字符串形式的响应数据。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;responseXML&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;获得 XML 形式的响应数据。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;responsetext-属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#responsetext-属性&#34;&gt;#&lt;/a&gt; responseText 属性&lt;/h2&gt;
&lt;p&gt;如果来自服务器的响应并非 XML，请使用 responseText 属性。&lt;/p&gt;
&lt;h2 id=&#34;responsexml-属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#responsexml-属性&#34;&gt;#&lt;/a&gt; responseXML 属性&lt;/h2&gt;
&lt;p&gt;如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，请使用 responseXML 属性：&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/%E5%87%BD%E6%95%B0/</guid>
            <title>ES6函数</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/%E5%87%BD%E6%95%B0/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 21:36:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;函数参数的扩展&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数参数的扩展&#34;&gt;#&lt;/a&gt; 函数参数的扩展&lt;/h2&gt;
&lt;h3 id=&#34;默认参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#默认参数&#34;&gt;#&lt;/a&gt; 默认参数&lt;/h3&gt;
&lt;p&gt;基本用法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function fn(name,age=17)&amp;#123;
 console.log(name+&amp;quot;,&amp;quot;+age);
&amp;#125;
fn(&amp;quot;Amy&amp;quot;,18);  // Amy,18
fn(&amp;quot;Amy&amp;quot;,&amp;quot;&amp;quot;);  // Amy,
fn(&amp;quot;Amy&amp;quot;);     // Amy,17
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意点：使用函数默认参数时，不允许有同名参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 不报错
function fn(name,name)&amp;#123;
 console.log(name);
&amp;#125;
 
// 报错
//SyntaxError: Duplicate parameter name not allowed in this context
function fn(name,name,age=17)&amp;#123;
 console.log(name+&amp;quot;,&amp;quot;+age);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只有在未传递参数，或者参数为 undefined 时，才会使用默认参数，null 值被认为是有效的值传递&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function fn(name,age=17)&amp;#123;
    console.log(name+&amp;quot;,&amp;quot;+age);
&amp;#125;
fn(&amp;quot;Amy&amp;quot;,null); // Amy,null
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数参数默认值存在暂时性死区，在函数参数默认值表达式中，还未初始化赋值的参数值无法作为其他参数的默认值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function f(x,y=x)&amp;#123;
    console.log(x,y);
&amp;#125;
f(1);  // 1 1
 
function f(x=y)&amp;#123;
    console.log(x);
&amp;#125;
f();  // ReferenceError: y is not defined
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;不定参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不定参数&#34;&gt;#&lt;/a&gt; 不定参数&lt;/h3&gt;
&lt;p&gt;不定参数用来表示不确定参数个数，形如，... 变量名，由... 加上一个具名参数标识符组成。具名参数只能放在参数组的最后，并且有且只有一个不定参数。&lt;/p&gt;
&lt;p&gt;基本用法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function f(...values)&amp;#123;
    console.log(values.length);
&amp;#125;
f(1,2);      //2
f(1,2,3,4);  //4
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;箭头函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#箭头函数&#34;&gt;#&lt;/a&gt; 箭头函数&lt;/h2&gt;
&lt;p&gt;箭头函数提供了一种更加简洁的函数书写方式。基本语法是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;参数 =&amp;gt; 函数体
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;基本用法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var f = v =&amp;gt; v;
//等价于
var f = function(a)&amp;#123;
 return a;
&amp;#125;
f(1);  //1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当箭头函数没有参数或者有多个参数，要用 &lt;strong&gt;()&lt;/strong&gt; 括起来&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var f = (a,b) =&amp;gt; a+b;
f(6,2);  //8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当箭头函数函数体有多行语句，用 &lt;strong&gt;{}&lt;/strong&gt; 包裹起来，表示代码块，当只有一行语句，并且需要返回结果时，可以省略 &lt;strong&gt;{}&lt;/strong&gt; , 结果会自动返回&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var f = (a,b) =&amp;gt; &amp;#123;
 let result = a+b;
 return result;
&amp;#125;
f(6,2);  // 8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当箭头函数要返回对象的时候，为了区分于代码块，要用 &lt;strong&gt;()&lt;/strong&gt; 将对象包裹起来&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 报错
var f = (id,name) =&amp;gt; &amp;#123;id: id, name: name&amp;#125;;
f(6,2);  // SyntaxError: Unexpected token :
 
// 不报错
var f = (id,name) =&amp;gt; (&amp;#123;id: id, name: name&amp;#125;);
f(6,2);  // &amp;#123;id: 6, name: 2&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意点：没有 this、super、arguments 和 new.target 绑定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var func = () =&amp;gt; &amp;#123;
  // 箭头函数里面没有 this 对象，
  // 此时的 this 是外层的 this 对象，即 Window 
  console.log(this)
&amp;#125;
func(55)  // Window 
 
var func = () =&amp;gt; &amp;#123;    
  console.log(arguments)
&amp;#125;
func(55);  // ReferenceError: arguments is not defined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;箭头函数体中的 this 对象，是定义函数时的对象，而不是使用函数时的对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function fn()&amp;#123;
  setTimeout(()=&amp;gt;&amp;#123;
    // 定义时，this 绑定的是 fn 中的 this 对象
    console.log(this.a);
  &amp;#125;,0)
&amp;#125;
var a = 20;
// fn 的 this 对象为 &amp;#123;a: 18&amp;#125;
fn.call(&amp;#123;a: 18&amp;#125;);  // 18
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不可以作为构造函数，也就是不能使用 new 命令，否则会报错&lt;/p&gt;
&lt;h3 id=&#34;适合使用的场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#适合使用的场景&#34;&gt;#&lt;/a&gt; 适合使用的场景&lt;/h3&gt;
&lt;p&gt;ES6 之前，JavaScript 的 this 对象一直很令人头大，回调函数，经常看到 var self = this 这样的代码，为了将外部 this 传递到回调函数中，那么有了箭头函数，就不需要这样做了，直接使用 this 就行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 回调函数
var Person = &amp;#123;
    &#39;age&#39;: 18,
    &#39;sayHello&#39;: function () &amp;#123;
      setTimeout(function () &amp;#123;
        console.log(this.age);
      &amp;#125;);
    &amp;#125;
&amp;#125;;
var age = 20;
Person.sayHello();  // 20
 
var Person1 = &amp;#123;
    &#39;age&#39;: 18,
    &#39;sayHello&#39;: function () &amp;#123;
      setTimeout(()=&amp;gt;&amp;#123;
        console.log(this.age);
      &amp;#125;);
    &amp;#125;
&amp;#125;;
var age = 20;
Person1.sayHello();  // 18
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以，当我们需要维护一个 this 上下文的时候，就可以使用箭头函数。&lt;/p&gt;
&lt;h3 id=&#34;不适合使用的场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不适合使用的场景&#34;&gt;#&lt;/a&gt; 不适合使用的场景&lt;/h3&gt;
&lt;p&gt;定义函数的方法，且该方法中包含 this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Person = &amp;#123;
    &#39;age&#39;: 18,
    &#39;sayHello&#39;: ()=&amp;gt;&amp;#123;
        console.log(this.age);
      &amp;#125;
&amp;#125;;
var age = 20;
Person.sayHello();  // 20
// 此时 this 指向的是全局对象
 
var Person1 = &amp;#123;
    &#39;age&#39;: 18,
    &#39;sayHello&#39;: function () &amp;#123;
        console.log(this.age);
    &amp;#125;
&amp;#125;;
var age = 20;
Person1.sayHello();   // 18
// 此时的 this 指向 Person1 对象
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要动态 this 的时候&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var button = document.getElementById(&#39;userClick&#39;);
button.addEventListener(&#39;click&#39;, () =&amp;gt; &amp;#123;
     this.classList.toggle(&#39;on&#39;);
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;button 的监听函数是箭头函数，所以监听函数里面的 this 指向的是定义的时候外层的 this 对象，即 Window，导致无法操作到被点击的按钮对象。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/%E5%AF%B9%E8%B1%A1/</guid>
            <title>ES6对象</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/%E5%AF%B9%E8%B1%A1/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 21:36:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;对象字面量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象字面量&#34;&gt;#&lt;/a&gt; 对象字面量&lt;/h2&gt;
&lt;h3 id=&#34;属性的简洁表示法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属性的简洁表示法&#34;&gt;#&lt;/a&gt; 属性的简洁表示法&lt;/h3&gt;
&lt;p&gt;ES6 允许对象的属性直接写变量，这时候属性名是变量名，属性值是变量值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const age = 12;
const name = &amp;quot;Amy&amp;quot;;
const person = &amp;#123;age, name&amp;#125;;
person   //&amp;#123;age: 12, name: &amp;quot;Amy&amp;quot;&amp;#125;
//等同于
const person = &amp;#123;age: age, name: name&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;方法名也可以简写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法名也可以简写&#34;&gt;#&lt;/a&gt; 方法名也可以简写&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;const person = &amp;#123;
  sayHi()&amp;#123;
    console.log(&amp;quot;Hi&amp;quot;);
  &amp;#125;
&amp;#125;
person.sayHi();  //&amp;quot;Hi&amp;quot;
//等同于
const person = &amp;#123;
  sayHi:function()&amp;#123;
    console.log(&amp;quot;Hi&amp;quot;);
  &amp;#125;
&amp;#125;
person.sayHi();//&amp;quot;Hi&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果是 Generator 函数，则要在前面加一个星号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const obj = &amp;#123;
  * myGenerator() &amp;#123;
    yield &#39;hello world&#39;;
  &amp;#125;
&amp;#125;;
//等同于
const obj = &amp;#123;
  myGenerator: function* () &amp;#123;
    yield &#39;hello world&#39;;
  &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;属性名表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属性名表达式&#34;&gt;#&lt;/a&gt; 属性名表达式&lt;/h3&gt;
&lt;p&gt;ES6 允许用表达式作为属性名，但是一定要将表达式放在方括号内&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const obj = &amp;#123;
 [&amp;quot;he&amp;quot;+&amp;quot;llo&amp;quot;]()&amp;#123;
   return &amp;quot;Hi&amp;quot;;
  &amp;#125;
&amp;#125;
obj.hello();  //&amp;quot;Hi&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意点：属性的简洁表示法和属性名表达式不能同时使用，否则会报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const hello = &amp;quot;Hello&amp;quot;;
const obj = &amp;#123;
 [hello]
&amp;#125;;
obj  //SyntaxError: Unexpected token &amp;#125;
 
const hello = &amp;quot;Hello&amp;quot;;
const obj = &amp;#123;
 [hello+&amp;quot;2&amp;quot;]:&amp;quot;world&amp;quot;
&amp;#125;;
obj  //&amp;#123;Hello2: &amp;quot;world&amp;quot;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;对象的拓展运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象的拓展运算符&#34;&gt;#&lt;/a&gt; 对象的拓展运算符&lt;/h2&gt;
&lt;p&gt;拓展运算符（...）用于取出参数对象所有可遍历属性然后拷贝到当前对象。&lt;/p&gt;
&lt;h3 id=&#34;基本用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本用法&#34;&gt;#&lt;/a&gt; 基本用法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;let person = &amp;#123;name: &amp;quot;Amy&amp;quot;, age: 15&amp;#125;;
let someone = &amp;#123; ...person &amp;#125;;
someone;  //&amp;#123;name: &amp;quot;Amy&amp;quot;, age: 15&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;可用于合并两个对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可用于合并两个对象&#34;&gt;#&lt;/a&gt; 可用于合并两个对象&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;let age = &amp;#123;age: 15&amp;#125;;
let name = &amp;#123;name: &amp;quot;Amy&amp;quot;&amp;#125;;
let person = &amp;#123;...age, ...name&amp;#125;;
person;  //&amp;#123;age: 15, name: &amp;quot;Amy&amp;quot;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;注意点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意点&#34;&gt;#&lt;/a&gt; 注意点&lt;/h3&gt;
&lt;p&gt;自定义的属性和拓展运算符对象里面属性的相同的时候：&lt;strong&gt;自定义的属性在拓展运算符后面，则拓展运算符对象内部同名的属性将被覆盖掉。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let person = &amp;#123;name: &amp;quot;Amy&amp;quot;, age: 15&amp;#125;;
let someone = &amp;#123; ...person, name: &amp;quot;Mike&amp;quot;, age: 17&amp;#125;;
someone;  //&amp;#123;name: &amp;quot;Mike&amp;quot;, age: 17&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自定义的属性在拓展运算度前面，则变成设置新对象默认属性值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let person = &amp;#123;name: &amp;quot;Amy&amp;quot;, age: 15&amp;#125;;
let someone = &amp;#123;name: &amp;quot;Mike&amp;quot;, age: 17, ...person&amp;#125;;
someone;  //&amp;#123;name: &amp;quot;Amy&amp;quot;, age: 15&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;拓展运算符后面是空对象，没有任何效果也不会报错。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let a = &amp;#123;...&amp;#123;&amp;#125;, a: 1, b: 2&amp;#125;;
a;  //&amp;#123;a: 1, b: 2&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;拓展运算符后面是 null 或者 undefined，没有效果也不会报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let b = &amp;#123;...null, ...undefined, a: 1, b: 2&amp;#125;;
b;  //&amp;#123;a: 1, b: 2&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;对象的新方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象的新方法&#34;&gt;#&lt;/a&gt; 对象的新方法&lt;/h2&gt;
&lt;h3 id=&#34;objectassigntarget-source_1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#objectassigntarget-source_1&#34;&gt;#&lt;/a&gt; Object.assign(target, source_1, ···)&lt;/h3&gt;
&lt;p&gt;用于将源对象的所有可枚举属性复制到目标对象中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本用法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let target = &amp;#123;a: 1&amp;#125;;
let object2 = &amp;#123;b: 2&amp;#125;;
let object3 = &amp;#123;c: 3&amp;#125;;
Object.assign(target,object2,object3);  
// 第一个参数是目标对象，后面的参数是源对象
target;  // &amp;#123;a: 1, b: 2, c: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果目标对象和源对象有同名属性，或者多个源对象有同名属性，则后面的属性会覆盖前面的属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果该函数只有一个参数，当参数为对象时，直接返回该对象；当参数不是对象时，会先将参数转为对象然后返回。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Object.assign(3);         // Number &amp;#123;3&amp;#125;
typeof Object.assign(3);  // &amp;quot;object&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为 null 和 undefined 不能转化为对象，所以会报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Object.assign(null);       // TypeError: Cannot convert undefined or null to object
Object.assign(undefined);  // TypeError: Cannot convert undefined or null to object
当参数不止一个时，null 和 undefined 不放第一个，即不为目标对象时，会跳过 null 和 undefined ，不报错
Object.assign(1,undefined);  // Number &amp;#123;1&amp;#125;
Object.assign(&amp;#123;a: 1&amp;#125;,null);  // &amp;#123;a: 1&amp;#125;
 
Object.assign(undefined,&amp;#123;a: 1&amp;#125;);  // TypeError: Cannot convert undefined or null to object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;assign 的属性拷贝是浅拷贝:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let sourceObj = &amp;#123; a: &amp;#123; b: 1&amp;#125;&amp;#125;;
let targetObj = &amp;#123;c: 3&amp;#125;;
Object.assign(targetObj, sourceObj);
targetObj.a.b = 2;
sourceObj.a.b;  // 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同名属性替换&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;targetObj = &amp;#123; a: &amp;#123; b: 1, c:2&amp;#125;&amp;#125;;
sourceObj = &amp;#123; a: &amp;#123; b: &amp;quot;hh&amp;quot;&amp;#125;&amp;#125;;
Object.assign(targetObj, sourceObj);
targetObj;  // &amp;#123;a: &amp;#123;b: &amp;quot;hh&amp;quot;&amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;数组的处理&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Object.assign([2,3], [5]);  // [5,3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;会将数组处理成对象，所以先将 [2,3] 转为 {0:2,1:3} ，然后再进行属性复制，所以源对象的 0 号属性覆盖了目标对象的 0。&lt;/p&gt;
&lt;h3 id=&#34;objectis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#objectis&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL09iamVjdC5pcw==&#34;&gt;Object.is&lt;/span&gt;(value1, value2)&lt;/h3&gt;
&lt;p&gt;用来比较两个值是否严格相等，与（===）基本类似。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本用法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Object.is(&amp;quot;q&amp;quot;,&amp;quot;q&amp;quot;);      // true
Object.is(1,1);          // true
Object.is([1],[1]);      // false
Object.is(&amp;#123;q:1&amp;#125;,&amp;#123;q:1&amp;#125;);  // false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;与（===）的区别&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//一是+0不等于-0
Object.is(+0,-0);  //false
+0 === -0  //true
//二是NaN等于本身
Object.is(NaN,NaN); //true
NaN === NaN  //false
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/ES6/%E7%AE%80%E4%BB%8B/</guid>
            <title>ES6简介</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/ES6/%E7%AE%80%E4%BB%8B/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="ES6" scheme="https://entropywhite.com/tags/ES6/" />
            <pubDate>Thu, 30 Jun 2022 21:36:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;ES6， 全称 ECMAScript 6.0 ，是 JavaScript 的下一个版本标准，2015.06 发版。&lt;/p&gt;
&lt;p&gt;ES6 主要是为了解决 ES5 的先天不足，比如 JavaScript 里并没有类的概念，但是目前浏览器的 JavaScript 是 ES5 版本，大多数高版本的浏览器也支持 ES6，不过只实现了 ES6 的部分特性和功能。&lt;/p&gt;
&lt;h2 id=&#34;ecmascript-的背景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ecmascript-的背景&#34;&gt;#&lt;/a&gt; ECMAScript 的背景&lt;/h2&gt;
&lt;p&gt;JavaScript 是大家所了解的语言名称，但是这个语言名称是商标（ Oracle 公司注册的商标）。因此，JavaScript 的正式名称是 ECMAScript 。1996 年 11 月，JavaScript 的创造者网景公司将 JS 提交给国际化标准组织 ECMA（European computer manufactures association，欧洲计算机制造联合会），希望这种语言能够成为国际标准，随后 ECMA 发布了规定浏览器脚本语言的标准，即 ECMAScript。这也有利于这门语言的开放和中立。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ecmascript-的历史&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ecmascript-的历史&#34;&gt;#&lt;/a&gt; ECMAScript 的历史&lt;/h2&gt;
&lt;p&gt;ES6 是 ECMAScript 标准十余年来变动最大的一个版本，为其添加了许多新的语法特性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1997 年 ECMAScript 1.0 诞生。&lt;/li&gt;
&lt;li&gt;1998 年 6 月 ECMAScript 2.0 诞生，包含一些小的更改，用于同步独立的 ISO 国际标准。&lt;/li&gt;
&lt;li&gt;1999 年 12 月 ECMAScript 3.0 诞生，它是一个巨大的成功，在业界得到了广泛的支持，它奠定了 JS 的基本语法，被其后版本完全继承。直到今天，我们一开始学习 JS ，其实就是在学 3.0 版的语法。&lt;/li&gt;
&lt;li&gt;2000 年的 ECMAScript 4.0 是当下 ES6 的前身，但由于这个版本太过激烈，对 ES 3 做了彻底升级，所以暂时被 &amp;quot;和谐&amp;quot; 了。&lt;/li&gt;
&lt;li&gt;2009 年 12 月，ECMAScript 5.0 版正式发布。ECMA 专家组预计 ECMAScript 的第五个版本会在 2013 年中期到 2018 年作为主流的开发标准。2011 年 6 月，ES 5.1 版发布，并且成为 ISO 国际标准。&lt;/li&gt;
&lt;li&gt;2013 年，ES6 草案冻结，不再添加新的功能，新的功能将被放到 ES7 中；2015 年 6 月， ES6 正式通过，成为国际标准。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;es6-的目标与愿景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#es6-的目标与愿景&#34;&gt;#&lt;/a&gt; ES6 的目标与愿景&lt;/h2&gt;
&lt;p&gt;成为更好编写的开发语言有以下目标。&lt;/p&gt;
&lt;p&gt;适应更复杂的应用；实现代码库之间的共享；不断迭代维护新版本。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/AJAX/XHR%E5%AF%B9%E8%B1%A1/</guid>
            <title>XHR对象</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/AJAX/XHR%E5%AF%B9%E8%B1%A1/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="AJAX" scheme="https://entropywhite.com/tags/AJAX/" />
            <pubDate>Thu, 30 Jun 2022 21:35:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;ajax-创建-xmlhttprequest-对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ajax-创建-xmlhttprequest-对象&#34;&gt;#&lt;/a&gt; AJAX - 创建 XMLHttpRequest 对象&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;XMLHttpRequest 是 AJAX 的基础。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;xmlhttprequest-对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xmlhttprequest-对象&#34;&gt;#&lt;/a&gt; XMLHttpRequest 对象&lt;/h2&gt;
&lt;p&gt;所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。&lt;/p&gt;
&lt;p&gt;XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;创建-xmlhttprequest-对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建-xmlhttprequest-对象&#34;&gt;#&lt;/a&gt; 创建 XMLHttpRequest 对象&lt;/h2&gt;
&lt;p&gt;所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。&lt;/p&gt;
&lt;p&gt;创建 XMLHttpRequest 对象的语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;variable=new XMLHttpRequest();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;variable=new ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject ：&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://entropywhite.com/computer-science/web/JavaScript/AJAX/AJAX%E5%BC%82%E6%AD%A5/</guid>
            <title>AJAX异步</title>
            <link>https://entropywhite.com/computer-science/web/JavaScript/AJAX/AJAX%E5%BC%82%E6%AD%A5/</link>
            <category term="计算机科学" scheme="https://entropywhite.com/categories/computer-science/" />
            <category term="web" scheme="https://entropywhite.com/categories/computer-science/web/" />
            <category term="JavaScript" scheme="https://entropywhite.com/categories/computer-science/web/JavaScript/" />
            <category term="AJAX" scheme="https://entropywhite.com/tags/AJAX/" />
            <pubDate>Thu, 30 Jun 2022 21:34:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;全称：&lt;strong&gt;Asynchronous JavaScript And XML（异步 JavaScript 及 XML）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ajax 的作用：实现异步请求的技术&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是同步请求？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;场景：页面上有一个 a 标签，用户点击 a 标签，浏览器发出一个请求，然后服务器给出一个响应。&lt;/p&gt;
&lt;p&gt;(请求，其实是用户的操作，触发的)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是异步（不同步）请求？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;场景：在用户注册的时候，用户首先输入用户名，接下来用户继续填写其他注册信息，与此同时，浏览器自动发送了一个请求，将用户输入的用户名发送给服务器，去校验是否可用.&lt;/p&gt;
&lt;p&gt;(请求，是浏览器自己发送的，与用户没有关系)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同步与异步区别的理解：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 同步请求：之前我们写的注册案例，依次写用户名，密码，等等所有信息之后，手动按提交按钮，才会把浏览器上的数据传到服务器进行校验用户名是否重复，然后在浏览器上提示用户名是否重复的信息，这种方式一速度较慢，需要将全部信息写完之后刷新整个页面提交到服务器，如果没有通过验证还得重新填写信息再提交，比较浪费流量，二则是如果没有通过验证所有的信息都没有了还得重新填写，太麻烦&lt;/p&gt;
&lt;p&gt;2. 异步请求：使用 ajax 的话，将用户名文本框绑定一个鼠标离焦事件，事件里用 ajax 提交用户名到服务器校验，这个验证是我们鼠标离开用户名文本框浏览器自动向服务器发出请求校验的，我们在填写别的信息时，服务器会将校验信息发送给浏览器提示是否重复信息，这样既省流量，又可以只修改用户名即可，最后验证通过才可以提交全部信息；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么需要异步请求，或者说那些功能必须使用异步请求技术来实现？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在不刷新页面（使用 a 标签发送请求和使用 form 表单发送请求，这两种请求都会，刷新页面）的情况下，发送请求，接收响应，然后修改部分的页面，这样的需求需要异步请求实现&lt;/p&gt;
&lt;p&gt;总结：在不使用 a 标签和 form 表单发送请求的情况下，使用异步请求&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在这个需求中，发送请求应该谁来做？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;浏览器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;让浏览器来帮助发送这个请求，那么程序员如何与浏览器沟通，让它帮助我们发送请求？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Javascript 技术&lt;/p&gt;
&lt;p&gt;企业为什么特别喜欢使用 ajax?&lt;/p&gt;
&lt;p&gt;钱。企业的网络通信费用，按流量计费，那么使用 ajax 它的数据量小，所以省钱&lt;/p&gt;
&lt;p&gt;ajax 它的数据量小 —— 因为他不重新加载整个页面（加载部分）&lt;/p&gt;
&lt;p&gt;Ajax 因为数据量小，响应速度快，用户体验好&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
